[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "",
    "text": "Class Sessions: MWF 10:00 AM to 10:50 AM, Alden 101\nLaboratory Session: Thursday, 2:30 PM to 4 PM, Alden 101\nInstructor: Dr. Bonham-Carter, obonhamcarter@allegheny.edu\nOffice Location: Alden Hall 203\nInstructor Office Hours: Visit the below URL to find availability and schedule and appointment. https://www.oliverbonhamcarter.com/contactandabout/\nBook An Appointment!: https://calendar.app.google/dEK6MftNGNLV1Ft96\nNote: If the office hours times are not convenient, then please reach out to me and we can find an alternative time to meet."
  },
  {
    "objectID": "index.html#quick-links",
    "href": "index.html#quick-links",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Quick Links",
    "text": "Quick Links\n\nThe attendance form\nToken Form for Automatic Extension\nGradebook repository"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Course Description",
    "text": "Course Description\nA continuation of CMPSC 100 with an emphasis on implementing, using, and evaluating the computational structures needed to efficiently store and retrieve digital data. Participating in hands-on activities that often require teamwork, students create data structures and algorithms whose correctness and performance they study through proofs and experimentation. Students continue to refine their ability to organize and document a program’s source code so that it effectively communicates with the intended users and maintainers. During a weekly laboratory session, students use state-of-the-art technology to complete projects, reporting on their results through both written documents and oral presentations.\nQuantitative Reasoning (QR): Quantitative Reasoning is the ability to understand, investigate, communicate, and contextualize numerical, symbolic, and graphical information towards the exploration of natural, physical, behavioral, or social phenomena.\nScientific Process and Knowledge (SP): Courses involving Scientific Process and Knowledge aim to convey an understanding of what is known or can be known about the natural world; apply scientific reasoning towards the analysis and synthesis of scientific information; and create scientifically literate citizens who can engage productively in problem solving.\n\nPrerequisite: CMPSC 100 or permission of the instructor.\nDistribution Requirements: QR, SP."
  },
  {
    "objectID": "index.html#course-learning-objectives",
    "href": "index.html#course-learning-objectives",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\n\nWhen solving a problem with a Python program, accurately describe data structures and algorithms and their inherent trade-offs.\nUse data structures and algorithms to correctly and efficiently solve a problem through the use of a Python program.\nUse empirical methods to characterize the performance of a Python program that uses data structures and algorithms.\nUse industry-standard practices, such as testing and debugging, and professional-grade integrated development environments (IDEs), command-line tools, and version control systems to implement Python programs.\nImplement Python programs and documentation that conforms to industry-standard formats and styles.\n\nLearning Outcome QR: Students who successfully complete this requirement will demonstrate an understanding of how to interpret numeric data and/or their graphical or symbolic representations.\nLearning Outcome SP: Students who successfully complete this requirement will demonstrate an understanding of the nature, approaches, and domain of scientific inquiry."
  },
  {
    "objectID": "index.html#course-materials",
    "href": "index.html#course-materials",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Course Materials",
    "text": "Course Materials\n\nTextbook\nIntroduction to Computation and Programming Using Python by John V. Guttag\n\n\n\nOnline Resources and Course Materials\n\nW3schools  \nCourse GitHub Organization\nJupyter Notebooks Directory\nGuttag Textbook Publisher Preview\nGuttag Textbook Google Previews\nAdditional Guttag Textbook Availability\nGuttag Lectures\nPython Docs Proactive Programmers\n\n\n\nSelected Software and Technologies\nWe will be using the following technologies in class.\n\nVSCode\nPython 3.12 or later\npipx\nPoetry\nGatorgrade\nGit\nFree GitHub Account\nFree Discord Account\nAllegheny College Email\n\n\n\nGrading\n\n\nGradebook Repository\nGradeBook repository will be used to deliver your grades from your activities and labs to you. In this repository, you will find a file which contains the same information that the instructor has in the gradebook. While it is a repository that you will pull from, you will never need to push anything to this repository.\nPlease use the following URL to create your gradebook repository; https://classroom.github.com/a/34hXX52q.\n\nGrading Scale\n\n\n\n\n\n\n\n\n\n\n\n\nLetter\nRange\nLetter\nRange\nLetter\nRange\n\n\n\n\nA\n96 - 100\nA-\n90 - 95.9\n\n\n\n\nB+\n87 - 89.9\nB\n83 - 86.9\nB-\n80 - 82.9\n\n\nC+\n77 - 79.9\nC\n73 - 76.9\nC-\n70 - 72.9\n\n\nD+\n67 - 69.9\nD\n63 - 66.9\nF\n59.9 and below\n\n\n\n\n\nBenchmarks\nThe grade that a student receives in this class will be based on the following categories. All percentages are approximate and, if the need to do so presents itself, it is possible for the assigned percentages to change during the academic semester.\n\n\n\nCategory\nPercentage\nAssessment metric\n\n\n\n\nClass Participation and Activities\n20%\ncheck mark grade\n\n\nLabs\n40%\nletter grade\n\n\nMidterm Exam\n20%\nletter grade\n\n\nFinal Project\n20%\nletter grade\n\n\nTotal\n100%\n\n\n\n\n\n\nDefinitions of Grading Categories\n\nClass Participation: All students are required to actively participate during all of the class sessions. Your participation will take forms such as answering questions about the required reading assignments, completing in-class exercises, asking constructive questions of the other members of the class, giving presentations, leading a discussion session in class.% and in the course’s Slack channels.\nActivities: These assignments invite students to explore different techniques for rigorously designing, implementing, programming, evaluating, and documenting real-world Python programs. These assignments will invite students to use tools like a text editor, a terminal window, and a modern Python development environment to implement functions that strike the right balance between understandability, generalizability, and specialization. Students will also use the data collected from running experiments to evaluate the implementation of a Python function as they consider, for instance, its efficiency and correctness. Knowledge gained from the class and the textbook will be integral to the completion of these projects. Unless other information is given about a due date, activities are to be completed by the end of class.\nExams: The exams will cover all of the material in their associated module(s). The finalized date for each of the exams will be announced at least one week in advance of the scheduled date. Unless prior arrangements are made with the course instructor, all students will be expected to take these exams on the scheduled date and complete the exams in the stated period of time.\nFinal Project: This project will present you with an opportunity to design and implement a correct and carefully evaluated programming solution for a specific problem. Completion of the final project will require you to apply the knowledge, programming and technical skills that you have acquired during the course. The details for the final project will be given approximately a month before the project due date (during finals week)."
  },
  {
    "objectID": "index.html#schedule-at-a-glance",
    "href": "index.html#schedule-at-a-glance",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Schedule At-A-Glance",
    "text": "Schedule At-A-Glance\n\nWeek One: Software Operations (Guttag Chapter 1)\nWeek Two: Python Foundations (Guttage Chapter 2)\nWeek Three: Numerical Programs (Guttag Chapter 3)\nWeek Four: Function Scope (Guttag Chapter 4)\nWeek Five: Structured Types (Guttag Chapter 5)\nWeek Eleven: Object-Oriented Programming (Guttag Chapter 10)\n\n\nTBA\n\nWeek Six: Mutability and Aliasing (Guttag Chapter 5)\nWeek Seven: Recursion (Guttag Chapter 6)\nFall Break (Thursday to Sunday)\nWeek Nine: Modules and Files (Guttag Chapter 7)\nWeek Ten: Testing and Handling Exceptions (Guttag Chapter 8 and 9)\nWeek Twelve: Algorithmic Complexity (Guttag Chapter 11)\nWeek Thirteen: Sorting (Guttag Chapter 12)\nWeek Fourteen: Data Structures (Guttag Chapter 12 cont)\nWeek Fifteen: Optimization Problems (Guttag Chapter 14)\nWeek Sixteen: Review\n\n\n\nFinal Deliverable\n\nWednesday, December 10, 2025 at 9:00 AM (Complete Final Exam Schedule)\nExam Code: G"
  },
  {
    "objectID": "index.html#assignment-policies",
    "href": "index.html#assignment-policies",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Assignment Policies",
    "text": "Assignment Policies\n\nAssignment Submission\nAll graded components of the course are expected to be turned in on time. Due dates are provided on each assignment. Electronic versions of the Engineering and Specification Labs must be submitted to through a student’s GitHub repository created by GitHub Classroom. No credit will be awarded for any course work that you submit to the incorrect GitHub repository.\nLabs are graded based on gatorgrade scores and other criteria.\n\nFifty percent of the grade of each Lab is determined by the percentage of gatorgrade checks passed.\nOne quarter of the grade is determined by code correctness following a rubric.\nOne quarter of the grade is determined by professional skills and presentation following a rubric. Professional presentation is impacted by linting, formatting, testing, profiling, duplication avoidance, commenting, markdown styling and communication in reflections.\n\nActivities Nearly weekly, we will have an activity for which points in the course may be earned. Please be sure to turn in activities by the due date as they cannot be made up at a later time."
  },
  {
    "objectID": "index.html#discord",
    "href": "index.html#discord",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Discord",
    "text": "Discord\nThe instructor will be using Discord to pass important information along to the class, such as code, news and other details. Please actively check your Discord each day to ensure that you are up-to-date with course events."
  },
  {
    "objectID": "index.html#additional-policies",
    "href": "index.html#additional-policies",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Additional Policies",
    "text": "Additional Policies\n\nAttendance\nStudents are expected to come to class prepared, on time, and to stay engaged for the duration of the class period. This includes both class and lab sessions. This behavior is core to our shared departmental values and is in addition to the college’s attendance policy.\nEach day of class, please complete the attendance form.\n\nPreparedness\nComing to class prepared means coming with everything you need to engage in a class session. To satisfy basic expectations of CIS courses, this means, at minimum, that students must:\n\narrive at class with a fully charged laptop\nbring their laptop charger or a battery pack so as to ensure that their laptop works throughout the entire class session\ncomplete any pre-session work such as readings and preparatory assignments\n\n\n\nAttendance and Lateness\nOne missed class or lab session counts as one absence. Coming to class/lab late, leaving early, or missing a large portion of a class/lab session will result in your being marked as “late” to class. Coming to class/lab unprepared may also result in being marked “late”. Being marked “late” to class three times during the course of a semester is equal to one absence.\nExcluding the first week of the semester, students can have eight absences without any impact to their grade. These accommodations are meant to cover illness and emergency, so you should always come to class if you are able to do so.\nAs a general guideline, students cannot miss more than two weeks of class in total throughout the academic semester without receiving a letter grade reduction.\nFor this course, excluding the first week and eight excused absences, overall course grade will go down by 1/3 of a letter grade for each additional absence or absence equivalence regardless of base grade.\n\n\nEngagement\nThe term “engagement” or our expectation that students remain “engaged” can mean many things, often varying by course. Baseline behaviors that indicate engagement include:\n\nparticipation in class activities and discussions\ndefined contribution to class sessions in full-class or group discussions\nnote-taking (physical or digital)\nparticipating in course session attendance requirements\nnot participating in non-course related activities\nnot completing non-course related projects\n\n\n\n\nLate Work Policy\nThe deadlines for assignments are hard deadlines. This policy is intended to ensure that students keep up with course topics, are able to actively participate in class, and are accountable for managing time effectively.\nAll students in the CIS department are expected to turn in assignments on time. “On time” means on or before the assignment’s due date. This means that an assignment cannot be turned in for credit after a due date, unless the student applies a token.\n\nTokens\nStudents in 101 are allotted four tokens to receive extensions on any assignment except the final with no questions asked by the course instructor except either in the rare cases of documented severe and/or extenuating circumstances or in cases that violate the CIS policy document or any College-approved policy.\n\nA token may be applied via a Google Form up to the assignment deadline, with exceptions granted only for severe and/or extenuating circumstances.\nTokens grant an automatic extension of one week to anything except the project or final exam.\nTokens will not be accepted after the due date of the last lab. This means that token usage will end after the labs are complete and will no longer be accepted. This roughly implies that they will stop three or four weeks from the end of class.\n\nToken Form for Automatic Extension\n\n\n\nExtenuating Circumstances\nExtenuating circumstances are exceptional, unforeseen, outside of your control, and short-term, like illness and emergency. Regular circumstances associated with taking courses at Allegheny College are not considered extenuating.\nThe accommodations provided by tokens and permitted absences are meant to cover extenuating circumstances like illness, emergency, and work. However, if you have a contagious illness like COVID-19, the flu, or a cold, you should not come to class. If you have expended all your absences and tokens and are still sick with a contagious illness, you may contact your professor about options. If your symptoms are mild or you are recovering from a respiratory illness, we recommend that you wear a mask to class.\nProfessor must be informed of all athletic obligations at the beginning of the semester, or with as much notice as possible. If you are feeling healthy and well, you should make every effort to come to class on time and to complete assignments, rather than using absences and tokens you may need later.\nThese no-questions-asked accommodations are meant to protect student privacy, and to remove the additional effort of acquiring documentation under duress of illness or emergency. In addition, they allow the professor to remain focused on teaching rather than adjudicating excuses.\nIf extenuating circumstances are severe enough to require more absences and tokens, you may contact your professor to discuss options. In most cases, however, a situation of this gravity warrants a request for a “Late Drop” or “Incomplete” in the course, as the student will not have had adequate opportunity to learn the material."
  },
  {
    "objectID": "index.html#communications",
    "href": "index.html#communications",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Communications",
    "text": "Communications\n\nUsing GitHub and Discord\nThis course will primarily use GitHub and Discord for collaborative course communication. Communications that are not private matters must take place in the Data Structures Channel in Discord.\nThe Allegheny College Computer and Information Science Discord Server will also have useful announcements about departmental activities including TL office hours.\n\n\nUsing Email\nAlthough we will primarily use Discord for class communication, the course instructor will sometimes use email to send announcements about important matters such as changes in the schedule. It is your responsibility to check your email at least once a day and to ensure that you can reliably send and receive emails."
  },
  {
    "objectID": "index.html#honor-code",
    "href": "index.html#honor-code",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Honor Code",
    "text": "Honor Code\nThe Academic Honor Program that governs the entire academic program at Allegheny College is described in the Allegheny Academic Bulletin. The Honor Program applies to all work that is submitted for academic credit or to meet non-credit requirements for graduation at Allegheny College. This includes all work assigned for this class (e.g., examinations and course assignments). All students who have enrolled in the College will work under the Honor Program. Each student who has matriculated at the College has acknowledged the following Honor Code pledge:\n\nI hereby recognize and pledge to fulfill my responsibilities, as defined in the Honor Code, and to maintain the integrity of both myself and the College community as a whole.\n\n\nEffective Collaboration\nComputer science is an inherently collaborative discipline. The Department of Computer and Information Science at Allegheny College encourages students to engage in collaboration. However, in the context of individual coursework, through which each student must demonstrate their own knowledge, there are certain forms of collaboration that are and are not acceptable.\n\nAcceptable forms of collaboration include:\n\nDiscussing high-level concepts.\nReferring someone to a course text book, course slides, example programs, or other resources that contain helpful information or instructions.\nOutlining the high-level steps to solving a problem, without mentioning specific\nlines of code that need to be written.\n\nUnacceptable forms of collaboration include:\n\nSharing details about specific lines of code, including showing your source code to someone or looking at someone else’s code.\nCopying someone else’s source code, technical writing, program commands, or program output, even with some slight modifications.\nTyping source code, technical writing, or commands on someone else’s computer.\n\n\n\n\nPlagiarism and Artificial Intelligence\nStudents may not pass off or represent the work of another student, or their own prior work, as their own current work in any case. Plagiarism and AI-generated code, text, or images are not permitted in any assignment type unless the instructions supplied for the assignment explicitly state otherwise.For exams and all other coursework, students are expected to adhere to the given instructions for the particular exam or item of coursework. It is the responsibility of the student to review the authorization specifications on every item and act appropriately, upholding the honor code. Suspected plagiarized or unauthorized use of AI to generate the work that is turned in will be reported to the Honor Code Committee. This policy does not preclude the use of AI to learn."
  },
  {
    "objectID": "index.html#educational-accommodations",
    "href": "index.html#educational-accommodations",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Educational Accommodations",
    "text": "Educational Accommodations\nThe Americans with Disabilities Act (ADA) is a federal anti-discrimination statute that provides comprehensive civil rights protection for persons with disabilities. Among other things, this legislation requires all students with disabilities be guaranteed a learning environment that provides for reasonable accommodation of their disabilities. Students with disabilities who believe they may need accommodations in this class are encouraged to contact Student Accessibility and Support Services (SASS) at 814-332-2898. Student Accessibility and Support Services is part of the Learning Commons and is located in Pelletier Library. Please do this as soon as possible to ensure that approved accommodations are implemented in a timely fashion."
  },
  {
    "objectID": "index.html#syllabus-changes",
    "href": "index.html#syllabus-changes",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Syllabus Changes",
    "text": "Syllabus Changes\nThe instructor may make updates or changes to this document at any time as needed until term grades are due. Changes will be announced to the class."
  },
  {
    "objectID": "playground/03_gettingToKnowYou.html#introduce-your-partner",
    "href": "playground/03_gettingToKnowYou.html#introduce-your-partner",
    "title": "Just For Fun 03: Getting To Know You",
    "section": "Introduce Your Partner!",
    "text": "Introduce Your Partner!\nChoose the person sitting right next to you. Have a conversation with the person to find out who they are. Ask them about;\n\nHow they would like to be called in class,\nWhere they are from,\nWhat types of classes they like,\nWhat they enjoy doing on campus,\nWhat is their favorite music\nWhy they are in this course at Allegheny College. Take turns sharing.\n\nThen, each of you will present the other to the course today."
  },
  {
    "objectID": "playground/03_gettingToKnowYou.html#survey",
    "href": "playground/03_gettingToKnowYou.html#survey",
    "title": "Just For Fun 03: Getting To Know You",
    "section": "Survey",
    "text": "Survey\nI would like to get to know you a bit better! Please fill out this short survey so I can learn more about you and your interests. Note: one of the questions will ask you for your Dicord handle. If you have not yet got a Discord account, please go to https://discord.com/ to get started. For our course, please use your actual name in Discord.\nSurvey Link: https://forms.gle/oM5mxSCZ2Umfhrqp7"
  },
  {
    "objectID": "playground/00_playground.html",
    "href": "playground/00_playground.html",
    "title": "Playground",
    "section": "",
    "text": "Here you will find a listing of interactive curiosities from the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJust For Fun 01: Fibonacci Sequence\n\n\nThree Approaches to Computing the Famous Sequence\n\n\n\n\n\n\n\n\nAug 22, 2025\n\n\nOBC\n\n\n\n\n\n\n\n\n\n\n\n\nJust For Fun 02: String Cheese Demo\n\n\nTesting the simplified lesson template\n\n\n\n\n\n\n\n\nAug 22, 2025\n\n\nOBC\n\n\n\n\n\n\n\n\n\n\n\n\nJust For Fun 03: Getting To Know You\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2025\n\n\nOBC\n\n\n\n\n\n\n\n\n\n\n\n\nJust For Fun 04: Area of a Square and Function Calls\n\n\nExploring Python Functions and Iteration\n\n\n\n\n\n\n\n\nAug 30, 2025\n\n\nOBC\n\n\n\n\n\n\n\n\n\n\n\n\nJust For Fun 05: Function Calls in Code\n\n\nUnderstanding Functions, Flow, and Mathematical Reasoning\n\n\n\n\n\n\n\n\nAug 30, 2025\n\n\nOBC\n\n\n\n\n\n\n\n\n\n\n\n\nJust For Fun 06: Lists and Dictionaries\n\n\nOrganizing and Managing Data with Python Collections\n\n\n\n\n\n\n\n\nSep 22, 2025\n\n\nOBC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "playground/01_fibonacci.html",
    "href": "playground/01_fibonacci.html",
    "title": "Just For Fun 01: Fibonacci Sequence",
    "section": "",
    "text": "Lesson Objectives\n\n\n\nBy the end of this lesson, you will be able to:\n\nUnderstand the mathematical definition of the Fibonacci sequence\nImplement recursive Fibonacci calculation\nCreate an iterative Fibonacci algorithm\nApply Binet’s formula for direct Fibonacci computation"
  },
  {
    "objectID": "playground/01_fibonacci.html#introduction",
    "href": "playground/01_fibonacci.html#introduction",
    "title": "Just For Fun 01: Fibonacci Sequence",
    "section": "Introduction",
    "text": "Introduction\nThe Fibonacci sequence is one of the most famous sequences in mathematics, appearing in nature, art, and computer science. Each number is the sum of the two preceding ones: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144…\nIn this lesson, we’ll explore three different computational approaches to generate Fibonacci numbers, each with unique advantages and trade-offs."
  },
  {
    "objectID": "playground/01_fibonacci.html#key-concepts",
    "href": "playground/01_fibonacci.html#key-concepts",
    "title": "Just For Fun 01: Fibonacci Sequence",
    "section": "Key Concepts",
    "text": "Key Concepts\n\n\n💡 Concept 1: Mathematical Definition\n\nThe Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1\n- F(n) = F(n-1) + F(n-2) for n &gt; 1\nThis recursive definition leads naturally to our first implementation approach.\nExample:\n# Mathematical definition\n# F(5) = F(4) + F(3) = 5\n# F(4) = F(3) + F(2) = 3 \n# F(3) = F(2) + F(1) = 2\n\n\n\n💡 Concept 2: Computational Complexity\n\nDifferent algorithms have different time complexities: - Recursive: O(2^n) - exponential, very slow for large n - Iterative: O(n) - linear, efficient for reasonable n - Binet’s Formula: O(1) - constant time, but limited by floating-point precision\nExample:\n# Time comparison for F(40):\n# Recursive: ~1.6 billion operations\n# Iterative: ~40 operations  \n# Binet's: ~5 operations"
  },
  {
    "objectID": "playground/01_fibonacci.html#interactive-examples",
    "href": "playground/01_fibonacci.html#interactive-examples",
    "title": "Just For Fun 01: Fibonacci Sequence",
    "section": "Interactive Examples",
    "text": "Interactive Examples\n\nExample 1: Recursive Fibonacci\n\nWhat this code does: This implements the mathematical definition directly using recursion. Each function call splits into two more calls, creating a tree-like computation structure. While elegant, it’s very inefficient for large numbers.\n\nExample Code:\ndef fibonacci_recursive(n):\n    \"\"\"Calculate Fibonacci number using recursion\"\"\"\n    if n &lt;= 1:\n        return n\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n\n# Test with small numbers (try 10, 15, 20)\nfor i in range(11):\n    print(f'F({i}) = {fibonacci_recursive(i)}')\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\ndef fibonacci_recursive(n):\n    \"\"\"Calculate Fibonacci number using recursion\"\"\"\n    if n &lt;= 1:\n        return n\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n\n# Test with small numbers (try 10, 15, 20)\nfor i in range(11):\n    print(f'F({i}) = {fibonacci_recursive(i)}')\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nExample 2: Iterative Fibonacci\n\nWhat this code does: This approach builds up the sequence from the bottom, keeping track of only the last two numbers. It’s much more efficient than recursion, using O(n) time and O(1) space.\n\nExample Code:\ndef fibonacci_iterative(n):\n    \"\"\"Calculate Fibonacci number using iteration\"\"\"\n    if n &lt;= 1:\n        return n\n    \n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test with larger numbers (try 50, 100)\nfor i in [10, 20, 30, 40, 50]:\n    print(f'F({i}) = {fibonacci_iterative(i)}')\n\n# Show the sequence\nprint(\"\\nFirst 20 Fibonacci numbers:\")\nfib_sequence = [fibonacci_iterative(i) for i in range(20)]\nprint(fib_sequence)\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\ndef fibonacci_iterative(n):\n    \"\"\"Calculate Fibonacci number using iteration\"\"\"\n    if n &lt;= 1:\n        return n\n    \n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test with larger numbers (try 50, 100)\nfor i in [10, 20, 30, 40, 50]:\n    print(f'F({i}) = {fibonacci_iterative(i)}')\n\n# Show the sequence\nprint(\"\\nFirst 20 Fibonacci numbers:\")\nfib_sequence = [fibonacci_iterative(i) for i in range(20)]\nprint(fib_sequence)\n\n▶ Run Code 🗑 Clear\n\n\nExample 3: Binet’s Formula\n\nWhat this code does: This uses Binet’s closed-form formula to calculate Fibonacci numbers directly using the golden ratio. It’s mathematically elegant and theoretically O(1), but limited by floating-point precision for very large numbers.\n\nExample Code:\nimport math\n\ndef fibonacci_binet(n):\n    \"\"\"Calculate Fibonacci number using Binet's formula\"\"\"\n    if n &lt;= 1:\n        return n\n    \n    # Golden ratio\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    \n    # Binet's formula\n    result = (phi**n - psi**n) / math.sqrt(5)\n    return round(result)\n\n# Test Binet's formula\nprint(\"Binet's Formula Results:\")\nfor i in range(15):\n    print(f'F({i}) = {fibonacci_binet(i)}')\n\n# Compare accuracy with iterative method\nprint(\"\\nAccuracy comparison (Binet vs Iterative):\")\nfor i in [20, 30, 40, 50]:\n    binet_result = fibonacci_binet(i)\n    iterative_result = fibonacci_iterative(i)\n    match = \"✓\" if binet_result == iterative_result else \"✗\"\n    print(f'F({i}): Binet={binet_result}, Iterative={iterative_result} {match}')\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\nimport math\n\ndef fibonacci_binet(n):\n    \"\"\"Calculate Fibonacci number using Binet's formula\"\"\"\n    if n &lt;= 1:\n        return n\n    \n    # Golden ratio\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    \n    # Binet's formula\n    result = (phi**n - psi**n) / math.sqrt(5)\n    return round(result)\n\n# Test Binet's formula\nprint(\"Binet's Formula Results:\")\nfor i in range(15):\n    print(f'F({i}) = {fibonacci_binet(i)}')\n\n# Compare accuracy with iterative method\nprint(\"\\nAccuracy comparison (Binet vs Iterative):\")\nfor i in [20, 30, 40, 50]:\n    binet_result = fibonacci_binet(i)\n    iterative_result = fibonacci_iterative(i)\n    match = \"✓\" if binet_result == iterative_result else \"✗\"\n    print(f'F({i}): Binet={binet_result}, Iterative={iterative_result} {match}')\n\n▶ Run Code 🗑 Clear\n\n\nChallenge Yourself\n\nPerformance Comparison Challenge\nNow that you’ve seen all three methods, let’s compare their performance! Try running this timing comparison to see the dramatic differences between approaches:\nChallenge Code:\nimport time\n\n# Time comparison for different methods\ndef time_function(func, n):\n    start = time.time()\n    result = func(n)\n    end = time.time()\n    return result, end - start\n\n# Test with a moderate number (careful with recursive!)\ntest_n = 30\nprint(f\"Computing F({test_n}) with different methods:\\n\")\n\n# Iterative (fast)\nresult, duration = time_function(fibonacci_iterative, test_n)\nprint(f\"Iterative: {result} (took {duration:.6f} seconds)\")\n\n# Binet's formula (very fast)\nresult, duration = time_function(fibonacci_binet, test_n)\nprint(f\"Binet's:   {result} (took {duration:.6f} seconds)\")\n\n# Recursive (slow - be patient!)\nprint(\"\\nRecursive method running... (this will take a while)\")\nresult, duration = time_function(fibonacci_recursive, test_n)\nprint(f\"Recursive: {result} (took {duration:.6f} seconds)\")\n\nprint(\"\\n🎯 Challenge: Try changing test_n to see how each method scales!\")\nprint(\"   - Iterative & Binet's can handle n=50+ easily\")\nprint(\"   - Recursive becomes very slow after n=35\")\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\nimport time\n\n# Time comparison for different methods\ndef time_function(func, n):\n    start = time.time()\n    result = func(n)\n    end = time.time()\n    return result, end - start\n\n# Test with a moderate number (careful with recursive!)\ntest_n = 30\n\nprint(f\"Computing F({test_n}) with different methods:\\n\")\n\n# Iterative (fast)\nresult, duration = time_function(fibonacci_iterative, test_n)\nprint(f\"Iterative: {result} (took {duration:.6f} seconds)\")\n\n# Binet's formula (very fast)\nresult, duration = time_function(fibonacci_binet, test_n)\nprint(f\"Binet's:   {result} (took {duration:.6f} seconds)\")\n\n# Recursive (slow - be patient!)\nprint(\"\\nRecursive method running... (this will take a while)\")\nresult, duration = time_function(fibonacci_recursive, test_n)\nprint(f\"Recursive: {result} (took {duration:.6f} seconds)\")\n\nprint(\"\\n🎯 Challenge: Try changing test_n to see how each method scales!\")\nprint(\"   - Iterative & Binet's can handle n=50+ easily\")\nprint(\"   - Recursive becomes very slow after n=35\")\n\n▶ Run Code 🗑 Clear\n\n\nYour Turn!\n\nChallenge Tasks:\n\nModify the recursive function to use memoization (caching previous results) to make it faster\nCreate a function that generates the first n Fibonacci numbers using your preferred method\nInvestigate the golden ratio - calculate φ (phi) from consecutive Fibonacci numbers: F(n+1)/F(n)\nResearch question: Why does Binet’s formula eventually become inaccurate for very large numbers?\n\nUse any of the terminals above to experiment with these challenges!\n\n\n\nSummary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored three different approaches to computing Fibonacci numbers:\n\nRecursive Implementation: Elegant but exponentially slow (O(2^n)) - demonstrates the mathematical definition directly\nIterative Implementation: Efficient and practical (O(n) time, O(1) space) - builds solutions step-by-step\n\nBinet’s Formula: Mathematically beautiful (O(1) but limited by precision) - uses the golden ratio for direct calculation\nPerformance Analysis: Understanding how algorithm choice dramatically affects execution time\n\n\n\n\n\nKey Takeaways\nEach approach teaches us different programming and mathematical concepts: - Recursion and why it can be inefficient without optimization (memoization) - Iteration and the power of building solutions incrementally - Mathematical formulas and their computational trade-offs between elegance and precision - Algorithm complexity and how it affects real-world performance\nThe Fibonacci sequence appears everywhere in nature and mathematics, making it a perfect example for understanding both algorithmic thinking and mathematical beauty in programming!\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nFibonacci Numbers in Nature\nGolden Ratio and Mathematics\nAlgorithm Complexity Guide"
  },
  {
    "objectID": "playground/01_fibonacci.html#challenge-yourself",
    "href": "playground/01_fibonacci.html#challenge-yourself",
    "title": "Just For Fun 01: Fibonacci Sequence",
    "section": "Challenge Yourself",
    "text": "Challenge Yourself\n\nPerformance Comparison Challenge\nNow that you’ve seen all three methods, let’s compare their performance! Try running this timing comparison to see the dramatic differences between approaches:\nChallenge Code:\nimport time\n\n# Time comparison for different methods\ndef time_function(func, n):\n    start = time.time()\n    result = func(n)\n    end = time.time()\n    return result, end - start\n\n# Test with a moderate number (careful with recursive!)\ntest_n = 30\nprint(f\"Computing F({test_n}) with different methods:\\n\")\n\n# Iterative (fast)\nresult, duration = time_function(fibonacci_iterative, test_n)\nprint(f\"Iterative: {result} (took {duration:.6f} seconds)\")\n\n# Binet's formula (very fast)\nresult, duration = time_function(fibonacci_binet, test_n)\nprint(f\"Binet's:   {result} (took {duration:.6f} seconds)\")\n\n# Recursive (slow - be patient!)\nprint(\"\\nRecursive method running... (this will take a while)\")\nresult, duration = time_function(fibonacci_recursive, test_n)\nprint(f\"Recursive: {result} (took {duration:.6f} seconds)\")\n\nprint(\"\\n🎯 Challenge: Try changing test_n to see how each method scales!\")\nprint(\"   - Iterative & Binet's can handle n=50+ easily\")\nprint(\"   - Recursive becomes very slow after n=35\")\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\nimport time\n\n# Time comparison for different methods\ndef time_function(func, n):\n    start = time.time()\n    result = func(n)\n    end = time.time()\n    return result, end - start\n\n# Test with a moderate number (careful with recursive!)\ntest_n = 30\n\nprint(f\"Computing F({test_n}) with different methods:\\n\")\n\n# Iterative (fast)\nresult, duration = time_function(fibonacci_iterative, test_n)\nprint(f\"Iterative: {result} (took {duration:.6f} seconds)\")\n\n# Binet's formula (very fast)\nresult, duration = time_function(fibonacci_binet, test_n)\nprint(f\"Binet's:   {result} (took {duration:.6f} seconds)\")\n\n# Recursive (slow - be patient!)\nprint(\"\\nRecursive method running... (this will take a while)\")\nresult, duration = time_function(fibonacci_recursive, test_n)\nprint(f\"Recursive: {result} (took {duration:.6f} seconds)\")\n\nprint(\"\\n🎯 Challenge: Try changing test_n to see how each method scales!\")\nprint(\"   - Iterative & Binet's can handle n=50+ easily\")\nprint(\"   - Recursive becomes very slow after n=35\")\n\n▶ Run Code 🗑 Clear\n\n\nYour Turn!\n\nChallenge Tasks:\n\nModify the recursive function to use memoization (caching previous results) to make it faster\nCreate a function that generates the first n Fibonacci numbers using your preferred method\nInvestigate the golden ratio - calculate φ (phi) from consecutive Fibonacci numbers: F(n+1)/F(n)\nResearch question: Why does Binet’s formula eventually become inaccurate for very large numbers?\n\nUse any of the terminals above to experiment with these challenges!\n\n\n\nSummary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored three different approaches to computing Fibonacci numbers:\n\nRecursive Implementation: Elegant but exponentially slow (O(2^n)) - demonstrates the mathematical definition directly\nIterative Implementation: Efficient and practical (O(n) time, O(1) space) - builds solutions step-by-step\n\nBinet’s Formula: Mathematically beautiful (O(1) but limited by precision) - uses the golden ratio for direct calculation\nPerformance Analysis: Understanding how algorithm choice dramatically affects execution time\n\n\n\n\n\nKey Takeaways\nEach approach teaches us different programming and mathematical concepts: - Recursion and why it can be inefficient without optimization (memoization) - Iteration and the power of building solutions incrementally - Mathematical formulas and their computational trade-offs between elegance and precision - Algorithm complexity and how it affects real-world performance\nThe Fibonacci sequence appears everywhere in nature and mathematics, making it a perfect example for understanding both algorithmic thinking and mathematical beauty in programming!\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nFibonacci Numbers in Nature\nGolden Ratio and Mathematics\nAlgorithm Complexity Guide"
  },
  {
    "objectID": "playground/01_fibonacci.html#summary",
    "href": "playground/01_fibonacci.html#summary",
    "title": "Just For Fun 01: Fibonacci Sequence",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored three different approaches to computing Fibonacci numbers:\n\nRecursive Implementation: Elegant but exponentially slow (O(2^n)) - demonstrates the mathematical definition directly\nIterative Implementation: Efficient and practical (O(n) time, O(1) space) - builds solutions step-by-step\n\nBinet’s Formula: Mathematically beautiful (O(1) but limited by precision) - uses the golden ratio for direct calculation\nPerformance Analysis: Understanding how algorithm choice dramatically affects execution time"
  },
  {
    "objectID": "playground/01_fibonacci.html#key-takeaways",
    "href": "playground/01_fibonacci.html#key-takeaways",
    "title": "Just For Fun 01: Fibonacci Sequence",
    "section": "Key Takeaways",
    "text": "Key Takeaways\nEach approach teaches us different programming and mathematical concepts: - Recursion and why it can be inefficient without optimization (memoization) - Iteration and the power of building solutions incrementally - Mathematical formulas and their computational trade-offs between elegance and precision - Algorithm complexity and how it affects real-world performance\nThe Fibonacci sequence appears everywhere in nature and mathematics, making it a perfect example for understanding both algorithmic thinking and mathematical beauty in programming!\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nFibonacci Numbers in Nature\nGolden Ratio and Mathematics\nAlgorithm Complexity Guide"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#get-ready-for-classes-and-decorators",
    "href": "materials/8_classesAndDecorators.html#get-ready-for-classes-and-decorators",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Get Ready for Classes and Decorators!",
    "text": "Get Ready for Classes and Decorators!\n\n🏗️ Ready to build amazing Python objects and enhance functions! ✨🚀"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#classes-the-basics",
    "href": "materials/8_classesAndDecorators.html#classes-the-basics",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Classes: The Basics",
    "text": "Classes: The Basics\n\n\n\nBasic Class Syntax\n\n\n# Basic class definition\nclass Dog:\n    # Class attribute (shared by all instances)\n    species = \"Canis lupus\"\n    \n    # Constructor method (__init__)\n    def __init__(self, name, age):\n        # Instance attributes (unique to each object)\n        self.name = name\n        self.age = age\n    \n    # Instance method\n    def bark(self):\n        return f\"{self.name} says Woof!\"\n    \n    # Another method with parameters\n    def celebrate_birthday(self):\n        self.age += 1\n        return f\"Happy birthday {self.name}! Now {self.age} years old!\"\n\n# Creating objects (instances)\nmy_dog = Dog(\"Buddy\", 3)\nyour_dog = Dog(\"Luna\", 5)\n\nprint(my_dog.bark())              # Buddy says Woof!\nprint(your_dog.celebrate_birthday())  # Happy birthday Luna! Now 6 years old!"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#key-class-concepts-explained",
    "href": "materials/8_classesAndDecorators.html#key-class-concepts-explained",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Key Class Concepts Explained",
    "text": "Key Class Concepts Explained\n\n\n\nImportant Terms\n\n\n🏗️ Class: The blueprint or template\n🐕 Object/Instance: A specific creation from the class\n📋 Attributes: Variables that store data\n⚙️ Methods: Functions that belong to the class\n🎯 self: Reference to the current instance\n🚀 __init__: Constructor method that runs when creating objects"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#working-with-objects",
    "href": "materials/8_classesAndDecorators.html#working-with-objects",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Working with Objects",
    "text": "Working with Objects\n\n\n\nCreating Class Objects\n\n\nclass Car:\n    # Class attribute\n    wheels = 4\n    \n    # Constructor\n    def __init__(self, make, model, year):\n        self.make = make      # Instance attribute\n        self.model = model    # Instance attribute\n        self.year = year      # Instance attribute\n        self.odometer = 0     # Default instance attribute\n    \n    # Method\n    def drive(self, miles):\n        self.odometer += miles\n        return f\"Drove {miles} miles. Total: {self.odometer}\"\n\n\n\n\nKey Point: A class is used to create an object. Each instance is own object. Neat-O!"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#working-with-objects-1",
    "href": "materials/8_classesAndDecorators.html#working-with-objects-1",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Working with Objects",
    "text": "Working with Objects\n\n\n\nCreating and Using Objects\n\n\n# Create instances\ncar1 = Car(\"Toyota\", \"Camry\", 2022)\ncar2 = Car(\"Honda\", \"Civic\", 2021)\n\n# Access attributes\nprint(f\"Car 1: {car1.make} {car1.model}\")  # Toyota Camry\nprint(f\"Car 2: {car2.year}\")               # 2021\n\n# Call methods\nprint(car1.drive(100))  # Drove 100 miles. Total: 100\nprint(car1.drive(50))   # Drove 50 miles. Total: 150\n\n# Modify attributes\ncar2.make = \"Acura\"  # Changing attribute value\nprint(car2.make)     # Acura\n\n# Access class attributes\nprint(Car.wheels)    # 4 (from class)\nprint(car1.wheels)   # 4 (inherited from class)\n\n\n\n\nKey Point: Each object has its own copy of instance attributes but shares class attributes!"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#quick-challenge-1-3-minutes",
    "href": "materials/8_classesAndDecorators.html#quick-challenge-1-3-minutes",
    "title": "Chapter 8: Classes and Decorators",
    "section": "🤝 Quick Challenge #1 (3 minutes)",
    "text": "🤝 Quick Challenge #1 (3 minutes)\n\n\n\nYour Turn: Basic Class Creation\n\n\nChallenge: Create a Student class with the following features:\n\nAttributes: name, student_id, grade_level, and gpa (default to 0.0)\nMethods:\n\nintroduce() - returns “Hi, I’m [name], student ID [id]”\nupdate_gpa(new_gpa) - updates the GPA\nis_honor_student() - returns True if GPA &gt;= 3.5\n\n\nStarter Code:\nclass Student:\n    # Your code here\n    pass\n\n# Test your class\nstudent1 = Student(\"Alice\", \"S001\", 10)\nprint(student1.introduce())\nstudent1.update_gpa(3.8)\nprint(f\"Honor student: {student1.is_honor_student()}\")"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#challenge-1-solutions",
    "href": "materials/8_classesAndDecorators.html#challenge-1-solutions",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Challenge #1 Solutions",
    "text": "Challenge #1 Solutions\n\n\n\nSolutions\n\n\nclass Student:\n    def __init__(self, name, student_id, grade_level, gpa=0.0):\n        self.name = name\n        self.student_id = student_id\n        self.grade_level = grade_level\n        self.gpa = gpa\n    \n    def introduce(self):\n        return f\"Hi, I'm {self.name}, student ID {self.student_id}\"\n    \n    def update_gpa(self, new_gpa):\n        self.gpa = new_gpa\n        return f\"GPA updated to {self.gpa}\"\n    \n    def is_honor_student(self):\n        return self.gpa &gt;= 3.5\n\n# Test results\nstudent1 = Student(\"Alice\", \"S001\", 10)\nprint(student1.introduce())        # Hi, I'm Alice, student ID S001\nstudent1.update_gpa(3.8)\nprint(f\"Honor student: {student1.is_honor_student()}\")  # True\n\nstudent2 = Student(\"Bob\", \"S002\", 11, 3.2)\nprint(f\"Bob honor status: {student2.is_honor_student()}\")  # False"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#inheritance-example",
    "href": "materials/8_classesAndDecorators.html#inheritance-example",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Inheritance Example",
    "text": "Inheritance Example\n\n\n\nParent and Child Classes\n\n\n# Parent class (Base class)\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n        self.energy = 100\n    \n    def eat(self):\n        self.energy += 10\n        return f\"{self.name} is eating. Energy: {self.energy}\"\n    \n    def sleep(self):\n        self.energy += 20\n        return f\"{self.name} is sleeping. Energy: {self.energy}\"\n\n# Child class inherits from Animal\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name, \"Canine\")  # Call parent constructor\n        self.breed = breed\n    \n    def bark(self):  # New method specific to Dog\n        return f\"{self.name} barks! Woof woof!\"\n    \n    def play_fetch(self):  # Another dog-specific method\n        self.energy -= 15\n        return f\"{self.name} plays fetch! Energy: {self.energy}\"\n\n# Using inheritance\nmy_dog = Dog(\"Max\", \"Golden Retriever\")\nprint(my_dog.eat())        # Inherited from Animal\nprint(my_dog.bark())       # Dog-specific method\nprint(my_dog.play_fetch()) # Dog-specific method"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#method-overriding",
    "href": "materials/8_classesAndDecorators.html#method-overriding",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Method Overriding",
    "text": "Method Overriding\n\n\n\nCustomizing Inherited Methods\n\n\nclass Bird(Animal):\n    def __init__(self, name, can_fly=True):\n        super().__init__(name, \"Avian\")\n        self.can_fly = can_fly\n    \n    # Override the sleep method from Animal\n    def sleep(self):\n        self.energy += 30  # Birds need more rest!\n        return f\"{self.name} sleeps in a nest. Energy: {self.energy}\"\n    \n    # New method\n    def fly(self):\n        if self.can_fly:\n            self.energy -= 20\n            return f\"{self.name} soars through the sky!\"\n        else:\n            return f\"{self.name} cannot fly.\"\n\n# Comparison\ndog = Dog(\"Buddy\", \"Labrador\")\nbird = Bird(\"Tweety\")\n\nprint(dog.sleep())   # Uses Animal's sleep method (energy +20)\nprint(bird.sleep())  # Uses Bird's overridden sleep method (energy +30)\nprint(bird.fly())    # Bird-specific method\n\n\n\n\nKey Point: Child classes can override parent methods to provide specialized behavior!"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#quick-challenge-2-3-minutes",
    "href": "materials/8_classesAndDecorators.html#quick-challenge-2-3-minutes",
    "title": "Chapter 8: Classes and Decorators",
    "section": "🤝 Quick Challenge #2 (3 minutes)",
    "text": "🤝 Quick Challenge #2 (3 minutes)\n\n\n\nYour Turn: Inheritance Practice\n\n\nChallenge: Create a Vehicle parent class and a Motorcycle child class:\nVehicle class: - Attributes: make, model, year, fuel_level (default 100) - Methods: start_engine(), refuel()\nMotorcycle class: - Inherits from Vehicle - Additional attribute: engine_size - New method: wheelie() (reduces fuel by 5) - Override start_engine() to include motorcycle-specific message\nStarter Code:\nclass Vehicle:\n    # Your Vehicle class here\n    pass\n\nclass Motorcycle(Vehicle):\n    # Your Motorcycle class here\n    pass\n\n# Test your classes\nbike = Motorcycle(\"Harley\", \"Sportster\", 2023, 883)\nprint(bike.start_engine())\nprint(bike.wheelie())"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#challenge-2-solutions",
    "href": "materials/8_classesAndDecorators.html#challenge-2-solutions",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Challenge #2 Solutions",
    "text": "Challenge #2 Solutions\n\n\n\nSolutions\n\n\nclass Vehicle:\n    def __init__(self, make, model, year, fuel_level=100):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.fuel_level = fuel_level\n    \n    def start_engine(self):\n        return f\"{self.year} {self.make} {self.model} engine started!\"\n    \n    def refuel(self):\n        self.fuel_level = 100\n        return f\"Tank refueled to {self.fuel_level}%\"\n\nclass Motorcycle(Vehicle):\n    def __init__(self, make, model, year, engine_size, fuel_level=100):\n        super().__init__(make, model, year, fuel_level)\n        self.engine_size = engine_size\n    \n    def start_engine(self):  # Override parent method\n        return f\"{self.year} {self.make} {self.model} motorcycle roars to life! 🏍️\"\n    \n    def wheelie(self):\n        self.fuel_level -= 5\n        return f\"Awesome wheelie! Fuel: {self.fuel_level}%\"\n\n# Test results\nbike = Motorcycle(\"Harley\", \"Sportster\", 2023, 883)\nprint(bike.start_engine())  # Motorcycle roars to life! 🏍️\nprint(bike.wheelie())       # Awesome wheelie! Fuel: 95%\nprint(bike.refuel())        # Tank refueled to 100%"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#decorators-the-basics",
    "href": "materials/8_classesAndDecorators.html#decorators-the-basics",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Decorators: The Basics",
    "text": "Decorators: The Basics\n\n\n\nBasic Decorator Syntax\n\n\n# Simple decorator function\ndef my_decorator(func):\n    def wrapper():\n        print(\"Something before the function\")\n        result = func()  # Call the original function\n        print(\"Something after the function\")\n        return result\n    return wrapper\n\n# Using the decorator with @ syntax\n@my_decorator\ndef say_hello():\n    print(\"Hello, World!\")\n\n# When we call say_hello(), it's actually wrapped\nsay_hello()\n\n# Output:\n# Something before the function\n# Hello, World!\n# Something after the function\n\n\n\n\nKey Point: The @decorator_name syntax is equivalent to func = decorator_name(func)!"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#understanding-how-decorators-work",
    "href": "materials/8_classesAndDecorators.html#understanding-how-decorators-work",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Understanding How Decorators Work",
    "text": "Understanding How Decorators Work\n\n\n\nStep-by-Step Breakdown\n\n\n🔍 What happens when you use @my_decorator:\n\nDecorator function receives the original function as input\nWrapper function is created inside the decorator\nWrapper function calls the original function and adds extra behavior\nDecorator returns the wrapper function\nOriginal function name now points to the wrapper function"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#decorators-with-arguments",
    "href": "materials/8_classesAndDecorators.html#decorators-with-arguments",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Decorators with Arguments",
    "text": "Decorators with Arguments\n\n\n\nHandling Function Parameters\n\n\n# This decorator adds timing to functions\ndef timer_decorator(func):\n    def wrapper():\n        import time\n        start_time = time.time()\n        result = func()\n        end_time = time.time()\n        print(f\"Function took {end_time - start_time:.4f} seconds\")\n        return result\n    return wrapper\n\n@timer_decorator\ndef slow_function():\n    import time\n    time.sleep(1)\n    return \"Done!\"\n\nslow_function()  # Function took 1.0041 seconds"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#setting-up-decorators-with-arguments",
    "href": "materials/8_classesAndDecorators.html#setting-up-decorators-with-arguments",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Setting Up Decorators with Arguments",
    "text": "Setting Up Decorators with Arguments\n\n\n\nHandling Function Parameters\n\n\n# Decorator that works with functions that have arguments\ndef logging_decorator(func):\n    def wrapper(*args, **kwargs):  # Accept any arguments\n        print(f\"Calling function: {func.__name__}\")\n        print(f\"Arguments: args={args}, kwargs={kwargs}\")\n        result = func(*args, **kwargs)  # Pass arguments to original function\n        print(f\"Function returned: {result}\")\n        return result\n    return wrapper\n\n@logging_decorator\ndef add_numbers(a, b):\n    return a + b\n\n@logging_decorator\ndef greet(name, greeting=\"Hello\"):\n    return f\"{greeting}, {name}!\"\n\n# Test the decorated functions\nresult1 = add_numbers(5, 3)\nprint(f\"Result: {result1}\")\n\nresult2 = greet(\"Alice\", greeting=\"Hi\")\nprint(f\"Result: {result2}\")"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#built-in-decorators-property-staticmethod-and-classmethod",
    "href": "materials/8_classesAndDecorators.html#built-in-decorators-property-staticmethod-and-classmethod",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Built-in Decorators: @property, @staticmethod and @classmethod",
    "text": "Built-in Decorators: @property, @staticmethod and @classmethod\n\n\n\n\n\n\nImportant\n\n\n\nThe @staticmethod decorator in Python marks a method inside a class that does not require access to the class or any instance of the class. It behaves like a regular function but is contained within the class’s namespace for logical organization.\nThe @classmethod decorator is a built-in decorator used to define a method that belongs to the class itself, rather than to an instance of the class.\nThe @property decorator is a built-in decorator used to define managed attributes within a class. It allows you to transform regular methods into “properties,” which can be accessed like attributes but have underlying getter, setter, and deleter methods to control their behavior."
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#using-built-in-decorators-property",
    "href": "materials/8_classesAndDecorators.html#using-built-in-decorators-property",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Using Built-in Decorators: @property",
    "text": "Using Built-in Decorators: @property\n\n\n\nThe @property Decorator\n\n\n@property turns a method into a readable attribute. It’s used for computed properties and data validation!\nclass Circle:\n    def __init__(self, radius):\n        self._radius = radius  # Private attribute\n    \n    @property\n    def radius(self):\n        \"\"\"Getter for radius\"\"\"\n        return self._radius\n    \n    @radius.setter\n    def radius(self, value):\n        \"\"\"Setter with validation\"\"\"\n        if value &lt; 0:\n            raise ValueError(\"Radius cannot be negative!\")\n        self._radius = value\n    \n    @property\n    def area(self):\n        \"\"\"Computed property - calculated on demand\"\"\"\n        import math\n        return math.pi * self._radius ** 2\n    \n    @property\n    def diameter(self):\n        \"\"\"Another computed property\"\"\"\n        return 2 * self._radius\n\n# Using the Circle class\ncircle = Circle(5)\nprint(f\"Radius: {circle.radius}\")     # Uses @property getter\nprint(f\"Area: {circle.area:.2f}\")     # Computed property\nprint(f\"Diameter: {circle.diameter}\") # Another computed property\n\ncircle.radius = 10  # Uses @radius.setter\nprint(f\"New area: {circle.area:.2f}\")"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#using-built-in-decorators-staticmethod-and-classmethod",
    "href": "materials/8_classesAndDecorators.html#using-built-in-decorators-staticmethod-and-classmethod",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Using Built-in Decorators: @staticmethod and @classmethod",
    "text": "Using Built-in Decorators: @staticmethod and @classmethod\n\n\n\nClass-related Decorators\n\n\nclass MathUtils:\n    pi = 3.14159\n    \n    @staticmethod\n    def add(x, y):\n        \"\"\"Static method - doesn't need self or cls\"\"\"\n        return x + y\n    \n    @classmethod\n    def circle_area(cls, radius):\n        \"\"\"Class method - receives cls (the class) as first argument\"\"\"\n        return cls.pi * radius ** 2\n    \n    def instance_method(self):\n        \"\"\"Regular instance method - needs self\"\"\"\n        return \"This is an instance method\"\n\n# Using different types of methods\n# Static method - can call without creating instance\nresult = MathUtils.add(5, 3)\nprint(f\"Static method result: {result}\")\n\n# Class method - can call without creating instance\narea = MathUtils.circle_area(10)\nprint(f\"Circle area: {area:.2f}\")\n\n# Instance method - needs an instance\nutils = MathUtils()\nprint(utils.instance_method())\n\n# You can also call static and class methods on instances\nprint(f\"Instance calling static: {utils.add(2, 7)}\")\nprint(f\"Instance calling class method: {utils.circle_area(3):.2f}\")"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#quick-challenge-3-3-minutes",
    "href": "materials/8_classesAndDecorators.html#quick-challenge-3-3-minutes",
    "title": "Chapter 8: Classes and Decorators",
    "section": "🤝 Quick Challenge #3 (3 minutes)",
    "text": "🤝 Quick Challenge #3 (3 minutes)\n\n\n\nYour Turn: Creating Custom Decorators\n\n\nChallenge: Create a decorator called repeat_decorator that runs a function multiple times:\n\nThe decorator should take a parameter for how many times to repeat\nIt should print the result each time\nReturn the result from the last execution\n\nBonus: Create a BankAccount class with @property for balance validation\nStarter Code:\n# Create your decorator here\ndef repeat_decorator(times):\n    # Your decorator code here\n    pass\n\n@repeat_decorator(3)\ndef roll_dice():\n    import random\n    return random.randint(1, 6)\n\n# Test your decorator\nresult = roll_dice()\n\n# Bonus: BankAccount class\nclass BankAccount:\n    # Your class with @property here\n    pass"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#challenge-3-solutions-i",
    "href": "materials/8_classesAndDecorators.html#challenge-3-solutions-i",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Challenge #3 Solutions (I)",
    "text": "Challenge #3 Solutions (I)\n\n\n\nSolutions\n\n\n# Solution 1: Custom repeat decorator\ndef repeat_decorator(times):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            result = None\n            for i in range(times):\n                result = func(*args, **kwargs)\n                print(f\"Execution {i+1}: {result}\")\n            return result\n        return wrapper\n    return decorator\n\n@repeat_decorator(3)\ndef roll_dice():\n    import random\n    return random.randint(1, 6)\n\nprint(\"Rolling dice 3 times:\")\nfinal_result = roll_dice()\nprint(f\"Final result: {final_result}\")"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#challenge-3-solutions-ii",
    "href": "materials/8_classesAndDecorators.html#challenge-3-solutions-ii",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Challenge #3 Solutions (II)",
    "text": "Challenge #3 Solutions (II)\n\n\n\nSolutions\n\n\n# Solution 2: BankAccount with @property\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        self._balance = initial_balance\n    \n    @property\n    def balance(self):\n        return self._balance\n    \n    # The below setter provides a controlled way to modify\n    # the balance with validation, but the current code \n    # does not demonstrate this functionality. It is a \n    # useful feature for ensuring data integrity when\n    # someone directly assigns to the balance property.\n\n    @balance.setter\n    def balance(self, amount):\n        if amount &lt; 0:\n            raise ValueError(\"Balance cannot be negative!\")\n        self._balance = amount\n    \n    def deposit(self, amount):\n        if amount &gt; 0:\n            self._balance += amount\n            return f\"Deposited ${amount}. New balance: ${self._balance}\"\n    \n    def withdraw(self, amount):\n        if amount &gt; self._balance:\n            return \"Insufficient funds!\"\n        self._balance -= amount\n        return f\"Withdrew ${amount}. New balance: ${self._balance}\"\n\n# Test BankAccount\naccount = BankAccount(100)\nprint(f\"Initial balance: ${account.balance}\")\nprint(account.deposit(50))\nprint(account.withdraw(30))\n\n\n# This would trigger the setter\naccount.balance = 200  # This calls the setter method\n\n# This would trigger the validation\ntry:\n    account.balance = -50  # This would raise ValueError\nexcept ValueError as e:\n    print(f\"Error: {e}\")"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#real-world-example-e-commerce-system",
    "href": "materials/8_classesAndDecorators.html#real-world-example-e-commerce-system",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Real-World Example: E-commerce System",
    "text": "Real-World Example: E-commerce System\n\n\n\n\n\n\nNote\n\n\nClasses for Shopping Cart\nclass Product:\n    def __init__(self, name, price, category):\n        self.name = name\n        self.price = price\n        self.category = category\n    \n    def __str__(self):\n        return f\"{self.name} (${self.price:.2f})\"\n\nclass ShoppingCart:\n    def __init__(self):\n        self.items = []\n        self._discount_rate = 0.0\n    \n    def add_item(self, product, quantity=1):\n        self.items.append({\"product\": product, \"quantity\": quantity})\n        return f\"Added {quantity}x {product.name} to cart\"\n    \n    @property\n    def total(self):\n        subtotal = sum(item[\"product\"].price * item[\"quantity\"] \n                      for item in self.items)\n        return subtotal * (1 - self._discount_rate)\n    \n    @property\n    def item_count(self):\n        return sum(item[\"quantity\"] for item in self.items)\n    \n    def apply_discount(self, rate):\n        if 0 &lt;= rate &lt;= 1:\n            self._discount_rate = rate\n            return f\"Applied {rate*100}% discount\"\n        return \"Invalid discount rate\"\n\n# Using the e-commerce system\nlaptop = Product(\"Gaming Laptop\", 1299.99, \"Electronics\")\nmouse = Product(\"Wireless Mouse\", 29.99, \"Electronics\")\n\ncart = ShoppingCart()\nprint(cart.add_item(laptop))\nprint(cart.add_item(mouse, 2))\n\nprint(f\"Items in cart: {cart.item_count}\")\nprint(f\"Total: ${cart.total:.2f}\")\n\nprint(cart.apply_discount(0.1))  # 10% discount\nprint(f\"Total after discount: ${cart.total:.2f}\")\nOutput:\n\n\nAdded 1x Gaming Laptop to cart\nAdded 2x Wireless Mouse to cart\nItems in cart: 3\nTotal: $1359.97\nApplied 10.0% discount\nTotal after discount: $1223.97"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#real-world-example-game-development",
    "href": "materials/8_classesAndDecorators.html#real-world-example-game-development",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Real-World Example: Game Development",
    "text": "Real-World Example: Game Development\n\n\n\n\n\n\nNote\n\n\nClasses with Inheritance for Game Characters\nclass GameCharacter:\n    def __init__(self, name, health=100, attack_power=10):\n        self.name = name\n        self.max_health = health\n        self._health = health\n        self.attack_power = attack_power\n        self.level = 1\n    \n    @property\n    def health(self):\n        return self._health\n    \n    @health.setter\n    def health(self, value):\n        self._health = max(0, min(value, self.max_health))  # Keep between 0 and max\n    \n    @property\n    def is_alive(self):\n        return self._health &gt; 0\n    \n    def attack(self, target):\n        if not self.is_alive:\n            return f\"{self.name} cannot attack - defeated!\"\n        \n        damage = self.attack_power\n        target.health -= damage\n        return f\"{self.name} attacks {target.name} for {damage} damage!\"\n\nclass Warrior(GameCharacter):\n    def __init__(self, name):\n        super().__init__(name, health=150, attack_power=15)\n        self.armor = 5\n    \n    def shield_bash(self, target):\n        damage = self.attack_power + self.armor\n        target.health -= damage\n        return f\"{self.name} shield bashes {target.name} for {damage} damage!\"\n\nclass Mage(GameCharacter):\n    def __init__(self, name):\n        super().__init__(name, health=80, attack_power=20)\n        self.mana = 100\n    \n    def cast_fireball(self, target):\n        if self.mana &lt; 20:\n            return f\"{self.name} is out of mana!\"\n        \n        self.mana -= 20\n        damage = self.attack_power * 2\n        target.health -= damage\n        return f\"{self.name} casts fireball on {target.name} for {damage} damage!\"\n\n# Game battle simulation\nwarrior = Warrior(\"Sir Lancelot\")\nmage = Mage(\"Gandalf\")\n\nprint(f\"Warrior: {warrior.name} (Health: {warrior.health})\")\nprint(f\"Mage: {mage.name} (Health: {mage.health})\")\n\nprint(\"\\nBattle begins!\")\nprint(warrior.attack(mage))\nprint(f\"Mage health: {mage.health}\")\n\nprint(mage.cast_fireball(warrior))\nprint(f\"Warrior health: {warrior.health}\")\n\nprint(warrior.shield_bash(mage))\nprint(f\"Mage health: {mage.health}\")\nprint(f\"Mage alive: {mage.is_alive}\")\nOutput:\n\n\nWarrior: Sir Lancelot (Health: 150)\nMage: Gandalf (Health: 80)\n\nBattle begins!\nSir Lancelot attacks Gandalf for 15 damage!\nMage health: 65\nGandalf casts fireball on Sir Lancelot for 40 damage!\nWarrior health: 110\nSir Lancelot shield bashes Gandalf for 20 damage!\nMage health: 45\nMage alive: True"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#real-world-example-web-api-with-decorators",
    "href": "materials/8_classesAndDecorators.html#real-world-example-web-api-with-decorators",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Real-World Example: Web API with Decorators",
    "text": "Real-World Example: Web API with Decorators\n\n\n\n\n\n\nNote\n\n\nDecorators for Web Development\nimport time\nfrom functools import wraps\n\n# Authentication decorator\ndef require_auth(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        # Simulate checking authentication\n        user_authenticated = True  # In real app, check session/token\n        if not user_authenticated:\n            return {\"error\": \"Authentication required\", \"status\": 401}\n        return func(*args, **kwargs)\n    return wrapper\n\n# Rate limiting decorator\ndef rate_limit(max_calls=5, time_window=60):\n    call_times = []\n    \n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            now = time.time()\n            # Remove old calls outside time window\n            call_times[:] = [t for t in call_times if now - t &lt; time_window]\n            \n            if len(call_times) &gt;= max_calls:\n                return {\"error\": \"Rate limit exceeded\", \"status\": 429}\n            \n            call_times.append(now)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n# Logging decorator\ndef log_api_call(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print(f\"API call: {func.__name__} at {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n        result = func(*args, **kwargs)\n        print(f\"API response: {result}\")\n        return result\n    return wrapper\n\n# API endpoint class\nclass UserAPI:\n    def __init__(self):\n        self.users = {\n            1: {\"name\": \"Alice\", \"email\": \"alice@email.com\"},\n            2: {\"name\": \"Bob\", \"email\": \"bob@email.com\"}\n        }\n    \n    @log_api_call\n    @require_auth\n    @rate_limit(max_calls=3, time_window=10)\n    def get_user(self, user_id):\n        if user_id in self.users:\n            return {\"user\": self.users[user_id], \"status\": 200}\n        return {\"error\": \"User not found\", \"status\": 404}\n    \n    @log_api_call\n    @require_auth\n    def create_user(self, name, email):\n        new_id = max(self.users.keys()) + 1\n        self.users[new_id] = {\"name\": name, \"email\": email}\n        return {\"user\": self.users[new_id], \"id\": new_id, \"status\": 201}\n\n# Using the API\napi = UserAPI()\n\n# Multiple API calls to test decorators\nprint(\"=== API Testing ===\")\nprint(api.get_user(1))\nprint(api.get_user(2))\nprint(api.create_user(\"Charlie\", \"charlie@email.com\"))\n\n# Test rate limiting (uncomment to see rate limit in action)\n# for i in range(5):\n#     print(f\"Call {i+1}:\", api.get_user(1))\nOutput:\n\n\n=== API Testing ===\nAPI call: get_user at 2025-10-30 23:29:15\nAPI response: {'user': {'name': 'Alice', 'email': 'alice@email.com'}, 'status': 200}\n{'user': {'name': 'Alice', 'email': 'alice@email.com'}, 'status': 200}\nAPI call: get_user at 2025-10-30 23:29:15\nAPI response: {'user': {'name': 'Bob', 'email': 'bob@email.com'}, 'status': 200}\n{'user': {'name': 'Bob', 'email': 'bob@email.com'}, 'status': 200}\nAPI call: create_user at 2025-10-30 23:29:15\nAPI response: {'user': {'name': 'Charlie', 'email': 'charlie@email.com'}, 'id': 3, 'status': 201}\n{'user': {'name': 'Charlie', 'email': 'charlie@email.com'}, 'id': 3, 'status': 201}"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#final-challenge-putting-it-all-together-5-minutes",
    "href": "materials/8_classesAndDecorators.html#final-challenge-putting-it-all-together-5-minutes",
    "title": "Chapter 8: Classes and Decorators",
    "section": "🤝 Final Challenge: Putting It All Together (5 minutes)",
    "text": "🤝 Final Challenge: Putting It All Together (5 minutes)\n\n\n\nYour Turn: Library Management System\n\n\nChallenge: Create a complete library system using classes, inheritance, and decorators:\nRequirements: 1. Book class with title, author, ISBN, and available status 2. Library class that manages books with methods to add/checkout/return books 3. Member class that inherits from a Person base class 4. Use @property for computed attributes 5. Create a decorator that logs all library operations\nBonus: Add different types of books (TextBook, Novel) with specific behaviors\nStarter Code:\n# Create your classes and decorators here\n\n# Test your system\nlibrary = Library(\"City Library\")\nbook1 = Book(\"Python Programming\", \"John Doe\", \"123456789\", True)\nmember1 = Member(\"Alice\", \"M001\", \"alice@email.com\")\n\n# Test the system\nlibrary.add_book(book1)\nlibrary.checkout_book(\"123456789\", member1)"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#final-challenge-complete-solution",
    "href": "materials/8_classesAndDecorators.html#final-challenge-complete-solution",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Final Challenge: Complete Solution",
    "text": "Final Challenge: Complete Solution\n\n\n\nLibrary Management System Solution\n\n\nfrom datetime import datetime\nfrom functools import wraps\n\n# Logging decorator for library operations\ndef log_operation(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        print(f\"[{timestamp}] Operation: {func.__name__}\")\n        result = func(*args, **kwargs)\n        print(f\"[{timestamp}] Result: {result}\")\n        return result\n    return wrapper\n\n# Base classes\nclass Person:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    \n    def __str__(self):\n        return f\"{self.name} ({self.email})\"\n\nclass Member(Person):\n    def __init__(self, name, member_id, email):\n        super().__init__(name, email)\n        self.member_id = member_id\n        self.borrowed_books = []\n    \n    @property\n    def books_count(self):\n        return len(self.borrowed_books)\n    \n    @property\n    def can_borrow(self):\n        return self.books_count &lt; 3  # Max 3 books per member\n\nclass Book:\n    def __init__(self, title, author, isbn, available=True):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n        self._available = available\n        self.borrowed_by = None\n    \n    @property\n    def available(self):\n        return self._available\n    \n    @available.setter\n    def available(self, value):\n        self._available = value\n        if value:\n            self.borrowed_by = None\n    \n    def __str__(self):\n        status = \"Available\" if self.available else f\"Borrowed by {self.borrowed_by}\"\n        return f\"'{self.title}' by {self.author} - {status}\"\n\nclass Library:\n    def __init__(self, name):\n        self.name = name\n        self.books = {}  # isbn -&gt; book\n        self.members = {}  # member_id -&gt; member\n    \n    @log_operation\n    def add_book(self, book):\n        self.books[book.isbn] = book\n        return f\"Added book: {book.title}\"\n    \n    @log_operation\n    def add_member(self, member):\n        self.members[member.member_id] = member\n        return f\"Added member: {member.name}\"\n    \n    @log_operation\n    def checkout_book(self, isbn, member):\n        if isbn not in self.books:\n            return \"Book not found\"\n        \n        book = self.books[isbn]\n        if not book.available:\n            return f\"Book '{book.title}' is not available\"\n        \n        if not member.can_borrow:\n            return f\"Member {member.name} has reached borrowing limit\"\n        \n        book.available = False\n        book.borrowed_by = member.name\n        member.borrowed_books.append(book)\n        return f\"Book '{book.title}' checked out to {member.name}\"\n    \n    @log_operation\n    def return_book(self, isbn, member):\n        if isbn not in self.books:\n            return \"Book not found\"\n        \n        book = self.books[isbn]\n        if book in member.borrowed_books:\n            book.available = True\n            member.borrowed_books.remove(book)\n            return f\"Book '{book.title}' returned by {member.name}\"\n        return f\"Book '{book.title}' was not borrowed by {member.name}\"\n    \n    @property\n    def available_books_count(self):\n        return sum(1 for book in self.books.values() if book.available)\n    \n    @property\n    def total_books(self):\n        return len(self.books)\n\n# Testing the system\nlibrary = Library(\"City Library\")\n\n# Create books and members\nbook1 = Book(\"Python Programming\", \"John Doe\", \"123456789\")\nbook2 = Book(\"Data Science Basics\", \"Jane Smith\", \"987654321\")\nmember1 = Member(\"Alice\", \"M001\", \"alice@email.com\")\n\n# Test operations\nprint(library.add_book(book1))\nprint(library.add_book(book2))\nprint(library.add_member(member1))\n\nprint(f\"\\nLibrary stats: {library.available_books_count}/{library.total_books} books available\")\n\nprint(library.checkout_book(\"123456789\", member1))\nprint(f\"Member books count: {member1.books_count}\")\n\nprint(library.return_book(\"123456789\", member1))\nprint(f\"Member books count: {member1.books_count}\")"
  },
  {
    "objectID": "materials/8_classesAndDecorators.html#next-steps-continue-your-journey",
    "href": "materials/8_classesAndDecorators.html#next-steps-continue-your-journey",
    "title": "Chapter 8: Classes and Decorators",
    "section": "Next Steps: Continue Your Journey",
    "text": "Next Steps: Continue Your Journey\n\n\n\nWhere to Go From Here\n\n\nImmediate Practice: * Create classes for your own projects * Experiment with multiple inheritance * Build custom decorators for common patterns * Practice with @dataclass decorator\nAdvanced Topics to Explore: * Abstract Base Classes (ABC) * Context managers (__enter__, __exit__) * Metaclasses and advanced decorators * Design patterns (Singleton, Factory, Observer)\nResources: * “Effective Python” by Brett Slatkin * Python’s abc and dataclasses modules * Practice building larger object-oriented projects * Explore web frameworks like Flask/Django that use decorators extensively\n\n\n\n\nKeep coding, keep building amazing objects! 🐍🏗️✨"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#todays-mission",
    "href": "materials/9_complexity_intro_slides.html#todays-mission",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "Today’s Mission 🎯",
    "text": "Today’s Mission 🎯\nLearn the 5 most important complexity levels that describe how things scale in real life!\n\n\n\n\n\n\nTip\n\n\nWhat we’ll discover:\n\n🎪 O(1) - The Magic Trick Level\n🔍 O(log n) - The Smart Detective Level\n\n🚶 O(n) - The One-by-One Level\n🐌 O(n²) - The Handshake Problem Level\n💥 O(2ⁿ) - The Explosion Level\n\n\n\n\n\n🎉 Ready to become complexity detectives? Let’s go! 🕵️‍♀️"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#complexity-is-all-about-how-things-scale",
    "href": "materials/9_complexity_intro_slides.html#complexity-is-all-about-how-things-scale",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "Complexity is All About How Things Scale 📈",
    "text": "Complexity is All About How Things Scale 📈\n\n\n\n\n\n\nNote\n\n\nComplexity = How much more work do you need when you have more stuff to deal with?\nReal-Life Examples:\n\n🍕 Making dinner for friends: 2 friends vs 20 friends - how much more work?\n📚 Finding a book: In a small pile vs a huge library - how much longer?\n🎁 Gift wrapping: 5 gifts vs 50 gifts - how much more time?\n👋 Meeting everyone at a party: 10 people vs 100 people - how many more handshakes?"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#o1---the-magic-trick-level",
    "href": "materials/9_complexity_intro_slides.html#o1---the-magic-trick-level",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "O(1) - The Magic Trick Level ⚡",
    "text": "O(1) - The Magic Trick Level ⚡\n\n\n\n\n\n\n“No Matter How Much, It Takes the Same Time!” 🎪\n\n\nO(1) means: Whether you have 1 thing or 1 million things, the task takes exactly the same amount of time!\n\n\n\n\n\n\n\n\n\nEveryday O(1) Examples:\n🔑 Using a key to open your door - Same one turn always!\n💡 Turning on a light switch - Same flip always!\n📱 Checking the time on your phone - Always instant!\n🏧 Using your debit card - Same swipe time always!"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#why-o1-is-amazing",
    "href": "materials/9_complexity_intro_slides.html#why-o1-is-amazing",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "Why O(1) is Amazing ⚡",
    "text": "Why O(1) is Amazing ⚡\n\n\n\n\n\n\nThe Holy Grail of Algorithms! 🏆\n\n\n✨ It’s like magic - the amount of work never changes\n🎯 Perfect performance - always fast, always reliable\n🚀 Every programmer dreams of O(1) solutions!\n\n\n\n\n\n\n\n\n\nReal-World O(1) Examples:\n\n📞 Your phone’s “Recent Calls” list\n📱 Looking up a contact by name\n\n💳 Checking account balance\n🎵 Skipping to specific song"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#olog-n---the-smart-detective-level",
    "href": "materials/9_complexity_intro_slides.html#olog-n---the-smart-detective-level",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "O(log n) - The Smart Detective Level 🕵️",
    "text": "O(log n) - The Smart Detective Level 🕵️\n\n\n\n\n\n\n“Cut the Problem in Half, Over and Over!” 🔍\n\n\nO(log n) means: Each step eliminates half of what’s left to search. Super efficient even with huge amounts!\n\n\n\n\n\n\n\n\n\nEveryday O(log n) Examples:\n🎯 Guessing a number 1-1000 - Cut problem in half each time, found in ~10 questions max!\n📖 Finding word in dictionary - Open to middle, go left or right, found in seconds!\n🎪 20 Questions game - Each question eliminates half the possibilities\n🔍 Phone contact search - Type “J” → cuts to J names, type “Jo” → even fewer options"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#why-olog-n-is-amazing",
    "href": "materials/9_complexity_intro_slides.html#why-olog-n-is-amazing",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "Why O(log n) is Amazing 🏆",
    "text": "Why O(log n) is Amazing 🏆\n\n\n\n\n\n\nIncredible Scaling Performance! 📊\n\n\nAmazing scaling: * 1,000 items → ~10 steps * 1,000,000 items → ~20 steps\n* 1,000,000,000 items → ~30 steps\n🧠 Smart strategy beats brute force\n\n\n\n\n\n\n\n\n\nUsed everywhere:\n\n🔍 Google searches\n🗺️ GPS route finding\n📱 Phone contact search"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#but-whats-the-catch",
    "href": "materials/9_complexity_intro_slides.html#but-whats-the-catch",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "But What’s the Catch?",
    "text": "But What’s the Catch?\n\n\n\n\n\n\n\n\n\nThe catch: You need things organized first! 📋"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#on---the-one-by-one-level",
    "href": "materials/9_complexity_intro_slides.html#on---the-one-by-one-level",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "O(n) - The One-by-One Level 🚶",
    "text": "O(n) - The One-by-One Level 🚶\n\n\n\n\n\n\n“Check Every Single Thing, One by One” 👀\n\n\nO(n) means: Double the stuff = Double the work. Fair and predictable!\n\n\n\n\n\n\n\n\n\nEveryday O(n) Examples:\n📚 Reading every page in a book - 100 pages = 100 page flips, 200 pages = 200 page flips\n🛒 Counting items in shopping cart - Must touch each item once, 10 items = 10 counts\n🎵 Listening to playlist - 50 songs = 50× the time\n📝 Grading test stack - 30 tests = 30× the work"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#why-on-is-pretty-good",
    "href": "materials/9_complexity_intro_slides.html#why-on-is-pretty-good",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "Why O(n) is Pretty Good ✅",
    "text": "Why O(n) is Pretty Good ✅\n\n\n\n\n\n\nPredictable and Fair! 📈\n\n\n✅ Predictable and fair - work scales linearly\n🎯 Often the best you can do when you need to check everything\n📈 Reasonable for most tasks: * Finding highest grade * Adding up expenses * Reading all text messages\n\n\n\n\n\n\n\n\n\nWhen it gets slow:\n\n\nReally large amounts of data - but still very manageable for normal use! 🎯"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#on²---the-handshake-problem-level",
    "href": "materials/9_complexity_intro_slides.html#on²---the-handshake-problem-level",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "O(n²) - The Handshake Problem Level 🤝",
    "text": "O(n²) - The Handshake Problem Level 🤝\n\n\n\n\n\n\n“Everyone Must Meet Everyone Else!” 😰\n\n\nO(n²) means: When you double the people, you get four times the work! This gets crazy fast.\n\n\n\n\n\n\n\n\n\nEveryday O(n²) Examples:\n🤝 Party introductions - 4 people = 6 handshakes, 8 people = 28 handshakes, 16 people = 120 handshakes!\n🏆 Sports tournament - Everyone plays everyone, gets expensive fast!\n👥 Group photo arrangements - Every person next to every other, gets overwhelming quickly!\n📝 Comparing all student tests - Looking for identical answers, 30 students = 435 comparisons!"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#why-on²-gets-scary",
    "href": "materials/9_complexity_intro_slides.html#why-on²-gets-scary",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "Why O(n²) Gets Scary 📈",
    "text": "Why O(n²) Gets Scary 📈\n\n\n\n\n\n\nExplosive Growth! 💥\n\n\n📈 Explosive growth: * 10 things → 100 operations * 100 things → 10,000 operations * 1,000 things → 1,000,000 operations!\n⚠️ The danger zone - where apps become unusably slow\n\n\n\n\n\n\n\n\n\n🐌 Common culprits: * Comparing every item to every other * Nested loops in programming * Poor algorithm choices\n\n\n\n\n\n\n\n\n\nWhen to worry: Anything over ~1,000 items gets really slow! 🚨"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#o2ⁿ---the-explosion-level",
    "href": "materials/9_complexity_intro_slides.html#o2ⁿ---the-explosion-level",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "O(2ⁿ) - The Explosion Level 💥",
    "text": "O(2ⁿ) - The Explosion Level 💥\n\n\n\n\n\n\n“Every Choice Doubles Your Problems!” 🤯\n\n\nO(2ⁿ) means: Add just one more thing, and you double all the work! This explodes instantly.\n\n\n\n\n\n\n\n\n\nEveryday O(2ⁿ) Examples:\n🧬 Family tree exploration - 2 parents → 4 grandparents → 8 great-grandparents → 16 great-great-grandparents\n\n🔐 Password cracking - Each digit doubles possibilities, 10-digit PIN = 1+ billion combos!\n🎁 Gift wrapping combinations - Each gift: wrapped or not, 20 gifts = 1+ million combinations!"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#why-o2ⁿ-is-terrifying",
    "href": "materials/9_complexity_intro_slides.html#why-o2ⁿ-is-terrifying",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "Why O(2ⁿ) is Terrifying 💀",
    "text": "Why O(2ⁿ) is Terrifying 💀\n\n\n\n\n\n\nGrows Impossibly Fast! 🚨\n\n\n💀 Grows impossibly fast: * 10 things → 1,024 operations * 20 things → 1,048,576 operations\n* 30 things → 1,073,741,824 operations!\n🚫 Usually unusable for anything but tiny problems\n\n\n\n\n\n\n\n\n\n⏰ Real-world impact: * Why cryptography works (good!) * Why some problems are “impossible” (bad!)\n\n\n\n\n\n\n\n\n\nBottom line: Avoid at all costs unless you have &lt; 20 items! ⚠️"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#the-complexity-race",
    "href": "materials/9_complexity_intro_slides.html#the-complexity-race",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "The Complexity Race! 🏃‍♀️💨",
    "text": "The Complexity Race! 🏃‍♀️💨\n\n\n\n\n\n\n\n\n\nHow They Compare With 1,000 Items 🏁\n\n\nLet’s see what happens when we have 1,000 things to process:"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#the-complexity-race-table",
    "href": "materials/9_complexity_intro_slides.html#the-complexity-race-table",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "The Complexity Race Table 🏃‍♀️💨",
    "text": "The Complexity Race Table 🏃‍♀️💨\n\n\n\n\n\n\n\n\n\n\n\n\nComplexity\nName\nSteps Needed\nReal-World Feeling\n\n\n\n\nO(1)\nMagic Trick\n1 step\n⚡ Instant!\n\n\nO(log n)\nSmart Detective\n~10 steps\n🏃 Super fast!\n\n\nO(n)\nOne-by-One\n1,000 steps\n🚶 Takes a moment\n\n\nO(n²)\nHandshake Problem\n1,000,000 steps\n🐌 Ugh, so slow…\n\n\nO(2ⁿ)\nExplosion\n2¹⁰⁰⁰ steps\n💀 Heat death of universe"
  },
  {
    "objectID": "materials/9_complexity_intro_slides.html#the-build-a-better-algorithm-challenge",
    "href": "materials/9_complexity_intro_slides.html#the-build-a-better-algorithm-challenge",
    "title": "ALGORITHM COMPLEXITIES",
    "section": "The “Build a Better Algorithm” Challenge 🏗️",
    "text": "The “Build a Better Algorithm” Challenge 🏗️\n\n\n\n\n\n\nTip\n\n\nYour Mission:\n\n🧠 Brainstorm real-life situations that match each complexity level\n🤝 Work in teams to find creative examples\n\n💡 Think about when you’d choose one approach over another\n🎪 Share your discoveries with the class!"
  },
  {
    "objectID": "materials/execution_log.html",
    "href": "materials/execution_log.html",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "",
    "text": "Command: sh RenderToPDFandSlides.sh\n\n\n\n\nFile: 3_i_introToPython_solutions.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-3_i_introtopython.qmd",
    "href": "materials/execution_log.html#file-3_i_introtopython.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 3_i_introToPython.qmd",
    "text": "File: 3_i_introToPython.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-3_ii_introtopython_solutions.qmd",
    "href": "materials/execution_log.html#file-3_ii_introtopython_solutions.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 3_ii_introToPython_solutions.qmd",
    "text": "File: 3_ii_introToPython_solutions.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-3_ii_introtopython.qmd",
    "href": "materials/execution_log.html#file-3_ii_introtopython.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 3_ii_introToPython.qmd",
    "text": "File: 3_ii_introToPython.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-6_energy_analysis_slides.qmd",
    "href": "materials/execution_log.html#file-6_energy_analysis_slides.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 6_energy_analysis_slides.qmd",
    "text": "File: 6_energy_analysis_slides.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-6_exhaustive_approximation.qmd",
    "href": "materials/execution_log.html#file-6_exhaustive_approximation.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 6_exhaustive_approximation.qmd",
    "text": "File: 6_exhaustive_approximation.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-7_midterm_study_sheet.qmd",
    "href": "materials/execution_log.html#file-7_midterm_study_sheet.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 7_midterm_study_sheet.qmd",
    "text": "File: 7_midterm_study_sheet.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-7_python_fundamentals_slides_all_together.qmd",
    "href": "materials/execution_log.html#file-7_python_fundamentals_slides_all_together.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 7_python_fundamentals_slides_all_together.qmd",
    "text": "File: 7_python_fundamentals_slides_all_together.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-7_python_fundamentals_slides.qmd",
    "href": "materials/execution_log.html#file-7_python_fundamentals_slides.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 7_python_fundamentals_slides.qmd",
    "text": "File: 7_python_fundamentals_slides.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-8_classesanddecorators.qmd",
    "href": "materials/execution_log.html#file-8_classesanddecorators.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 8_classesAndDecorators.qmd",
    "text": "File: 8_classesAndDecorators.qmd"
  },
  {
    "objectID": "materials/execution_log.html#file-8_lambdafunctions_i.qmd",
    "href": "materials/execution_log.html#file-8_lambdafunctions_i.qmd",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "File: 8_lambdaFunctions_i.qmd",
    "text": "File: 8_lambdaFunctions_i.qmd\nto: latex output-file: 0_materials.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: Materials\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/0_materials.pdf\n\u001b[1mpandoc \u001b[22m to: latex output-file: 3_i_introToPython_solutions.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf css: - custom.css toc: true toc-depth: 1\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 2: Python Programming: Concepts I’ subtitle: Basics, Solutions author: Oliver Bonham-Carter theme: moon transition: fade backgroundTransition: convex slide-number: true center: true touch: true controls: true progress: true width: 1200 height: 700 chalkboard: true menu: true\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 3\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/3_i_introToPython_solutions.pdf\n\u001b[1mpandoc \u001b[22m to: latex output-file: 3_i_introToPython.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf css: - custom.css toc: true toc-depth: 1\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 2: Python Programming: Concepts I’ subtitle: Basics author: Oliver Bonham-Carter theme: moon transition: fade backgroundTransition: convex slide-number: true center: true touch: true controls: true progress: true width: 1200 height: 700 chalkboard: true menu: true\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 3\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/3_i_introToPython.pdf\n\u001b[1mpandoc \u001b[22m to: latex output-file: 3_ii_introToPython_solutions.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf css: - custom.css toc: true toc-depth: 1\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 2: Python Programming: Concepts II’ subtitle: Basics, Solutions author: Oliver Bonham-Carter theme: moon transition: fade backgroundTransition: convex slide-number: true center: true touch: true controls: true progress: true width: 1200 height: 700 chalkboard: true menu: true\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/3_ii_introToPython_solutions.pdf\n\u001b[1mpandoc \u001b[22m to: latex output-file: 3_ii_introToPython.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf css: - custom.css toc: true toc-depth: 1\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Python Programming: Concepts II’ author: Oliver Bonham-Carter theme: moon transition: fade backgroundTransition: convex slide-number: true center: true touch: true controls: true progress: true width: 1200 height: 700 chalkboard: true menu: true\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/3_ii_introToPython.pdf\nStarting python3 kernel…Done\nExecuting ‘6_energy_analysis_slides.quarto_ipynb’ Cell 1/14: ’‘…Done Cell 2/14:’‘…Done Cell 3/14:’‘…Done Cell 4/14:’‘…Done Cell 5/14:’‘…Done Cell 6/14:’‘…Done Cell 7/14:’‘…Done Cell 8/14:’‘…Done Cell 9/14:’‘…Done Cell 10/14:’‘…Done Cell 11/14:’‘…Done Cell 12/14:’‘…Done Cell 13/14:’‘…Done Cell 14/14:’’…Done\n\u001b[1mpandoc \u001b[22m to: latex output-file: 6_energy_analysis_slides.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 4: Computational Energy Analysis of Newton’‘s Method’ subtitle: A Study of the General nth Root Algorithm author: Energy-Efficient Computing Research\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/6_energy_analysis_slides.pdf\nStarting python3 kernel…Done\nExecuting ‘6_exhaustive_approximation.quarto_ipynb’ Cell 1/24: ’‘…Done Cell 2/24:’‘…Done Cell 3/24:’‘…Done Cell 4/24:’‘…Done Cell 5/24:’‘…Done Cell 6/24:’‘…Done Cell 7/24:’‘…Done Cell 8/24:’‘…Done Cell 9/24:’‘…Done Cell 10/24:’‘…Done Cell 11/24:’‘…Done Cell 12/24:’‘…Done Cell 13/24:’‘…Done Cell 14/24:’‘…Done Cell 15/24:’‘…Done Cell 16/24:’‘…Done Cell 17/24:’‘…Done Cell 18/24:’‘…Done Cell 19/24:’‘…Done Cell 20/24:’‘…Done Cell 21/24:’‘…Done Cell 22/24:’‘…Done Cell 23/24:’‘…Done Cell 24/24:’’…Done\n\u001b[1mpandoc \u001b[22m to: latex output-file: 6_exhaustive_approximation.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS’ subtitle: ‘Some Approximation Techniques in Python: Numerical Search Methods and Their Applications’ author: CS 101 - Fall 2025 jupyter: python3\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/6_exhaustive_approximation.pdf\n\u001b[1mpandoc \u001b[22m to: latex output-file: 7_midterm_study_sheet.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf toc: true toc-depth: 2 number-sections: true\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘CS101 Fall 2025 :: Midterm Preparation Guide’ subtitle: Python Programming Fundamentals\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 3\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/7_midterm_study_sheet.pdf\n\u001b[1mpandoc \u001b[22m to: latex output-file: 7_python_fundamentals_slides_all_together.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 5: STRUCTURED TYPES AND MUTABILITY’ subtitle: Python challenges author: CS 101 - Fall 2025\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/7_python_fundamentals_slides_all_together.pdf\nStarting python3 kernel…Done\nExecuting ‘7_python_fundamentals_slides.quarto_ipynb’ Cell 1/6: ’‘…Done Cell 2/6:’‘…Done Cell 3/6:’‘…Done Cell 4/6:’‘…Done Cell 5/6:’‘…Done Cell 6/6:’’…Done\n\u001b[1mpandoc \u001b[22m to: latex output-file: 7_python_fundamentals_slides.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 5: STRUCTURED TYPES AND MUTABILITY’ subtitle: ‘Python Fundamentals: Data Structures & Operations’ author: CS 101 - Fall 2025\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/7_python_fundamentals_slides.pdf\nStarting python3 kernel…Done\nExecuting ‘8_classesAndDecorators.quarto_ipynb’ Cell 1/3: ’‘…Done Cell 2/3:’‘…Done Cell 3/3:’’…Done\n\u001b[1mpandoc \u001b[22m to: latex output-file: 8_classesAndDecorators.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 8: Classes and Decorators’ subtitle: Object-Oriented Programming and Function Enhancement in Python author: CS 101 - Fall 2025\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/8_classesAndDecorators.pdf\nStarting python3 kernel…Done\nExecuting ‘8_lambdaFunctions_i.quarto_ipynb’ Cell 1/4: ’‘…Done Cell 2/4:’‘…Done Cell 3/4:’‘…Done Cell 4/4:’’…Done\n\u001b[1mpandoc \u001b[22m to: latex output-file: 8_lambdaFunctions_i.tex standalone: true pdf-engine: xelatex variables: graphics: true tables: true default-image-extension: pdf\n\u001b[1mmetadata\u001b[22m documentclass: scrartcl classoption: - DIV=11 - numbers=noendperiod papersize: letter header-includes: - block-headings: true title: ‘Chapter 5: Lambda Functions’ subtitle: Anonymous Functions in Python author: CS 101 - Fall 2025\n\u001b[1m\u001b[34m Rendering PDF\u001b[39m\u001b[22m \u001b[1m\u001b[34mrunning xelatex - 1\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\n\u001b[1m\u001b[34mrunning xelatex - 2\u001b[39m\u001b[22m This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) restricted \\write18 enabled. entering extended mode\nOutput created: ../docs/materials/8_lambdaFunctions_i.pdf ```\nTime: 232.5319 seconds"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#what-is-the-travelling-salesman-problem",
    "href": "materials/10_5_travellingSalesman.html#what-is-the-travelling-salesman-problem",
    "title": "The Travelling Salesman Problem",
    "section": "What is the Travelling Salesman Problem?",
    "text": "What is the Travelling Salesman Problem?\n\n\n\n\n\n\nThe Ultimate Route Challenge 🗺️\n\n\nThe Problem: A salesperson needs to visit every city exactly once and return home, using the shortest possible route.\nReal-World Analogy: * Like a delivery driver planning the most efficient route * GPS apps finding the fastest path through multiple stops * Amazon trucks optimizing deliveries to save time and fuel * Tour guides planning the best sightseeing route\n\n\n\n\n\nWhy It Matters 🚚\n\nDelivery Services: UPS saves millions by optimizing routes\nCircuit Board Manufacturing: Drilling holes efficiently\nDNA Sequencing: Finding optimal gene arrangements\nSchool Bus Routes: Getting kids to school faster\n\n\nThe Challenge ⚡\n\nSeems simple with 3-4 cities\nGets impossibly hard very quickly\nWith just 10 cities: 3,628,800 possible routes!\nWith 20 cities: More routes than atoms in the universe!\n\nKey Question: “How do we find the best route without checking every possibility?”"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#interactive-tsp-demo-plan-your-route",
    "href": "materials/10_5_travellingSalesman.html#interactive-tsp-demo-plan-your-route",
    "title": "The Travelling Salesman Problem",
    "section": "Interactive TSP Demo: Plan Your Route!",
    "text": "Interactive TSP Demo: Plan Your Route!\n\n\n    🗺️ Interactive Travelling Salesman Demo: Click on the map to add cities, then see how many possible routes there are. Watch the complexity explode!\n\n    \n        Add Random City\n        Find Best Route!\n        Reset Cities\n        Load Demo Cities\n    \n    \n        \n    \n    \n        Cities: 0\n        Possible Routes: 0\n        Best Route Distance: Click \"Find Best Route!\" to calculate\n        Computation Time: -\n        ⚠️ Complexity: Add cities to see the challenge!\n    \n    \n        💡 Tip: Click anywhere on the map to add cities at exact locations, or use \"Add Random City\" for quick setup!\n    \n    \n        🎯 Interactive Mode: Click on the canvas to place cities exactly where you want them!"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#the-mathematics-behind-the-factorial-explosion",
    "href": "materials/10_5_travellingSalesman.html#the-mathematics-behind-the-factorial-explosion",
    "title": "The Travelling Salesman Problem",
    "section": "The Mathematics Behind The Factorial Explosion! 📈",
    "text": "The Mathematics Behind The Factorial Explosion! 📈\n\n\n\n\n\n\nFor n cities, there are (n-1)!/2 unique routes to check Why? We fix the starting city and divide by 2 since routes can go clockwise or counterclockwise.\n\n\n\nRoute Count Growth 📊\ndef calculate_routes(n_cities):\n    \"\"\"Calculate number of TSP routes\"\"\"\n    if n_cities &lt;= 1:\n        return 0\n    \n    # (n-1)! / 2 unique routes\n    factorial = 1\n    for i in range(1, n_cities):\n        factorial *= i\n    \n    return factorial // 2\n\n# Let's see the explosion!\nfor cities in range(2, 11):\n    routes = calculate_routes(cities)\n    print(f\"{cities} cities: {routes:,} routes\")\n\n\nReal Numbers:\n\n3 cities → 1 route, 4 cities → 3 routes\n\n5 cities → 12 routes, 10 cities → 181,440 routes\n15 cities → 43,589,145,600 routes!\n\n\nThe Pattern:\n\nEach new city multiplies the complexity\nNot addition - factorial growth!\nThis is why TSP is so challenging\nReal-world problems have 100+ cities!"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#time-complexity-when-mathematics-meets-reality",
    "href": "materials/10_5_travellingSalesman.html#time-complexity-when-mathematics-meets-reality",
    "title": "The Travelling Salesman Problem",
    "section": "Time Complexity: When Mathematics Meets Reality ⏱️",
    "text": "Time Complexity: When Mathematics Meets Reality ⏱️\n\n⚠️ The Scary Truth About Computation Time\nEven with the world’s fastest computers, brute force TSP becomes impossible very quickly!\n\nTime Complexity Analysis ⏱️\nimport time\nimport math\n\ndef time_estimate(n_cities):\n    \"\"\"Estimate computation time for brute force TSP\"\"\"\n    routes = math.factorial(n_cities - 1) // 2\n    \n    # Assume 1 million routes per second\n    seconds = routes / 1_000_000\n    \n    if seconds &lt; 60:\n        return f\"{seconds:.2f} seconds\"\n    elif seconds &lt; 3600:\n        return f\"{seconds/60:.2f} minutes\"\n    elif seconds &lt; 86400:\n        return f\"{seconds/3600:.2f} hours\" \n    elif seconds &lt; 31536000:\n        return f\"{seconds/86400:.2f} days\"\n    else:\n        return f\"{seconds/31536000:.2f} years\"\n\n# The scary truth\nprint(\"Time to solve TSP by brute force:\")\nfor n in [10, 15, 20, 25]:\n    print(f\"{n} cities: {time_estimate(n)}\")\n\n\nReality Check 🤯\n\n10 cities: 0.18 seconds\n15 cities: 21.8 days\n\n20 cities: 77 billion years\n25 cities: Longer than universe exists!\n\n\nWhy This Matters 💡\n\nUPS trucks visit 100+ stops daily\nAmazon deliveries optimize thousands of routes\nGPS systems need real-time solutions\nNeed better algorithms than brute force!"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#python-implementation-brute-force-approach",
    "href": "materials/10_5_travellingSalesman.html#python-implementation-brute-force-approach",
    "title": "The Travelling Salesman Problem",
    "section": "Python Implementation: Brute Force Approach",
    "text": "Python Implementation: Brute Force Approach\n\n\n\n\n\n\n⚠️ Warning: This Gets Slow Fast!\n\n\nOur brute force solution checks every possible route. It works great for small examples, but becomes impossible for real-world problems.\n\n\n\n\n\nThe Core Algorithm 🧠\ndef tsp_brute_force(cities, current_city=0, \n                   visited=None, path=None):\n    \"\"\"\n    Solve TSP by checking ALL possible routes\n    Time Complexity: O(n!) - FACTORIAL!\n    \"\"\"\n    # Initialize first call\n    if visited is None:\n        visited = {current_city}\n        path = [current_city]\n    \n    # Base case: visited all cities, return home\n    if len(visited) == len(cities):\n        complete_path = path + [0]  # Return to start\n        total_distance = calculate_distance(complete_path)\n        return complete_path, total_distance\n    \n    # Try every unvisited city next\n    best_path = None\n    best_distance = float('inf')\n    \n    for next_city in range(len(cities)):\n        if next_city not in visited:\n            # Recursive magic: solve for remaining cities\n            new_path, distance = tsp_brute_force(\n                cities, next_city,\n                visited | {next_city},\n                path + [next_city]\n            )\n            \n            # Keep the best route found so far\n            if distance &lt; best_distance:\n                best_distance = distance\n                best_path = new_path\n    \n    return best_path, best_distance\n\nDistance Calculation 📐\ndef calculate_distance(path):\n    \"\"\"Calculate total route distance\"\"\"\n    # Example distance matrix for 4 cities\n    distances = {\n        (0, 1): 10, (1, 0): 10,  # City 0 ↔ City 1\n        (0, 2): 15, (2, 0): 15,  # City 0 ↔ City 2  \n        (0, 3): 20, (3, 0): 20,  # City 0 ↔ City 3\n        (1, 2): 25, (2, 1): 25,  # City 1 ↔ City 2\n        (1, 3): 30, (3, 1): 30,  # City 1 ↔ City 3\n        (2, 3): 35, (3, 2): 35,  # City 2 ↔ City 3\n        # Distance to self is 0\n        (0, 0): 0, (1, 1): 0, (2, 2): 0, (3, 3): 0\n    }\n    \n    total = 0\n    for i in range(len(path) - 1):\n        current = path[i]\n        next_city = path[i + 1]\n        total += distances.get((current, next_city), 999)\n    \n    return total\n\n# Real-world: use Euclidean distance\ndef euclidean_distance(city1, city2):\n    \"\"\"Calculate straight-line distance between cities\"\"\"\n    x1, y1 = city1\n    x2, y2 = city2\n    return ((x2 - x1)**2 + (y2 - y1)**2)**0.5"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#build-a-project-from-this-code",
    "href": "materials/10_5_travellingSalesman.html#build-a-project-from-this-code",
    "title": "The Travelling Salesman Problem",
    "section": "Build a Project From This Code?!",
    "text": "Build a Project From This Code?!\nLeft to the reader…\n\n\n\nCopy these blocks into two files (main.py, examples.py and tsp.py) to run this larger demo from the commmand line.\n\n\ntsp.py\ndef tsp_brute_force(cities, current_city=0, \n                   visited=None, path=None):\n    \"\"\"\n    Solve TSP by checking ALL possible routes\n    Time Complexity: O(n!) - FACTORIAL!\n    \"\"\"\n    # Initialize first call\n    if visited is None:\n        visited = {current_city}\n        path = [current_city]\n    \n    # Base case: visited all cities, return home\n    if len(visited) == len(cities):\n        complete_path = path + [0]  # Return to start\n        total_distance = calculate_distance(complete_path)\n        return complete_path, total_distance\n    \n    # Try every unvisited city next\n    best_path = None\n    best_distance = float('inf')\n    \n    for next_city in range(len(cities)):\n        if next_city not in visited:\n            # Recursive magic: solve for remaining cities\n            new_path, distance = tsp_brute_force(\n                cities, next_city,\n                visited | {next_city},\n                path + [next_city]\n            )\n            \n            # Keep the best route found so far\n            if distance &lt; best_distance:\n                best_distance = distance\n                best_path = new_path\n    \n    return best_path, best_distance\n    \ndef calculate_distance(path):\n    \"\"\"Calculate total route distance\"\"\"\n    # Example distance matrix for 4 cities\n    distances = {\n        (0, 1): 10, (1, 0): 10,  # City 0 ↔ City 1\n        (0, 2): 15, (2, 0): 15,  # City 0 ↔ City 2  \n        (0, 3): 20, (3, 0): 20,  # City 0 ↔ City 3\n        (1, 2): 25, (2, 1): 25,  # City 1 ↔ City 2\n        (1, 3): 30, (3, 1): 30,  # City 1 ↔ City 3\n        (2, 3): 35, (3, 2): 35,  # City 2 ↔ City 3\n        # Distance to self is 0\n        (0, 0): 0, (1, 1): 0, (2, 2): 0, (3, 3): 0\n    }\n    \n    total = 0\n    for i in range(len(path) - 1):\n        current = path[i]\n        next_city = path[i + 1]\n        total += distances.get((current, next_city), 999)\n    \n    return total\n\n# Real-world: use Euclidean distance\ndef euclidean_distance(city1, city2):\n    \"\"\"Calculate straight-line distance between cities\"\"\"\n    x1, y1 = city1\n    x2, y2 = city2\n    return ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n\nexamples.py\n#!/usr/bin/env python3\n\"\"\"\nSimple usage example for the TSP solver\nShows how to use the TSP functions directly in your own code\n\"\"\"\n\nfrom tsp import tsp_brute_force, euclidean_distance\nimport time\n\n\ndef example_usage():\n    \"\"\"Demonstrate how to use the TSP solver in your own code\"\"\"\n    \n    print(\"🔧 TSP Solver - Usage Example\")\n    print(\"=\" * 40)\n    \n    # Example 1: Using the built-in distance matrix (4 cities)\n    print(\"\\n1️⃣  Using built-in distance matrix:\")\n    cities = [0, 1, 2, 3]\n    \n    start = time.time()\n    path, distance = tsp_brute_force(cities)\n    end = time.time()\n    \n    print(f\"   Input: {cities}\")\n    print(f\"   Best path: {path}\")\n    print(f\"   Distance: {distance}\")\n    print(f\"   Time: {end-start:.4f}s\")\n    \n    # Example 2: Custom coordinates with euclidean distance\n    print(\"\\n2️⃣  Using custom city coordinates:\")\n    \n    # Define your cities as (x, y) coordinates\n    city_positions = [(0, 0), (1, 3), (4, 1), (2, 4)]\n    \n    # Create a custom distance function\n    def calculate_custom_distance(path):\n        total = 0\n        for i in range(len(path) - 1):\n            city1 = city_positions[path[i]]\n            city2 = city_positions[path[i + 1]]\n            total += euclidean_distance(city1, city2)\n        return total\n    \n    # Temporarily replace the global function\n    import tsp\n    original_calc = tsp.calculate_distance\n    tsp.calculate_distance = calculate_custom_distance\n    \n    try:\n        start = time.time()\n        path, distance = tsp_brute_force(list(range(len(city_positions))))\n        end = time.time()\n        \n        print(f\"   Coordinates: {city_positions}\")\n        print(f\"   Best path: {path}\")\n        print(f\"   Distance: {distance:.2f}\")\n        print(f\"   Time: {end-start:.4f}s\")\n        \n    finally:\n        # Restore original function\n        tsp.calculate_distance = original_calc\n    \n    # Example 3: Timing comparison\n    print(\"\\n3️⃣  Performance for different city counts:\")\n    for n in [3, 4, 5, 6, 7]:\n        cities = list(range(n))\n        start = time.time()\n        path, distance = tsp_brute_force(cities)\n        end = time.time()\n        \n        import math\n        routes = math.factorial(n-1) if n &gt; 1 else 1\n        \n        print(f\"   {n} cities: {routes:&gt;6} routes, {end-start:.4f}s\")\n        \n        if end - start &gt; 0.1:  # Stop if getting slow\n            print(\"   (stopping - getting slow)\")\n            break\n\n\ndef solve_custom_problem():\n    \"\"\"Example of solving a specific TSP problem\"\"\"\n    print(\"\\n🎯 Solving a specific problem:\")\n    print(\"   Visiting 5 offices in a city\")\n    \n    # Office locations (in km from city center)\n    offices = {\n        'HQ': (0, 0),\n        'Branch A': (2, 3),\n        'Branch B': (5, 1),\n        'Branch C': (1, 4),\n        'Branch D': (4, 4)\n    }\n    \n    office_names = list(offices.keys())\n    coordinates = list(offices.values())\n    \n    print(f\"   Offices: {office_names}\")\n    \n    # Create distance calculation function\n    def office_distance(path):\n        total = 0\n        for i in range(len(path) - 1):\n            pos1 = coordinates[path[i]]\n            pos2 = coordinates[path[i + 1]]\n            total += euclidean_distance(pos1, pos2)\n        return total\n    \n    # Solve the problem\n    import tsp\n    original_calc = tsp.calculate_distance\n    tsp.calculate_distance = office_distance\n    \n    try:\n        start = time.time()\n        path, distance = tsp_brute_force(list(range(len(offices))))\n        end = time.time()\n        \n        # Convert indices back to office names\n        route_names = [office_names[i] for i in path]\n        \n        print(f\"   Best route: {' → '.join(route_names)}\")\n        print(f\"   Total distance: {distance:.2f} km\")\n        print(f\"   Solve time: {end-start:.4f} seconds\")\n        \n    finally:\n        tsp.calculate_distance = original_calc\n\n\nif __name__ == \"__main__\":\n    example_usage()\n    solve_custom_problem()\n    \n    print(\"\\n✨ Want more examples? Run 'python3 main.py' for interactive mode!\")\n\n\n\n\n\n\n\nmain.py\n#!/usr/bin/env python3\n\"\"\"\nMain driver for the Travelling Salesman Problem (TSP) solver\nDemonstrates brute force TSP algorithm with various test cases\n\"\"\"\n\nimport time\nfrom tsp import tsp_brute_force, calculate_distance, euclidean_distance\n\n\ndef print_header(title):\n    \"\"\"Print a formatted header for output sections\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(f\"  {title}\")\n    print(\"=\"*60)\n\n\ndef print_result(path, distance, execution_time):\n    \"\"\"Print formatted TSP solution results\"\"\"\n    print(f\"\\nBest Path: {' → '.join(map(str, path))}\")\n    print(f\"Total Distance: {distance}\")\n    print(f\"Execution Time: {execution_time:.4f} seconds\")\n\n\ndef example_1_simple():\n    \"\"\"Example 1: Simple 4-city TSP with predefined distance matrix\"\"\"\n    print_header(\"Example 1: Simple 4-City TSP\")\n    \n    print(\"Cities: 0, 1, 2, 3\")\n    print(\"Using predefined distance matrix in tsp.py\")\n    \n    # Create city list (just indices for this example)\n    cities = list(range(4))\n    \n    # Time the execution\n    start_time = time.time()\n    best_path, best_distance = tsp_brute_force(cities)\n    end_time = time.time()\n    \n    print_result(best_path, best_distance, end_time - start_time)\n\n\ndef calculate_euclidean_distance_matrix(cities):\n    \"\"\"Calculate distance matrix using Euclidean distances\"\"\"\n    n = len(cities)\n    distances = {}\n    \n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                distances[(i, j)] = 0\n            else:\n                dist = euclidean_distance(cities[i], cities[j])\n                distances[(i, j)] = dist\n    \n    return distances\n\n\ndef tsp_with_coordinates(cities):\n    \"\"\"\n    Modified TSP solver that uses coordinate-based distances\n    \"\"\"\n    def calculate_coord_distance(path):\n        \"\"\"Calculate total route distance using coordinates\"\"\"\n        distances = calculate_euclidean_distance_matrix(cities)\n        \n        total = 0\n        for i in range(len(path) - 1):\n            current = path[i]\n            next_city = path[i + 1]\n            total += distances[(current, next_city)]\n        \n        return total\n    \n    # Temporarily replace the global calculate_distance function\n    global calculate_distance\n    original_calc = calculate_distance\n    calculate_distance = calculate_coord_distance\n    \n    try:\n        result = tsp_brute_force(list(range(len(cities))))\n        return result\n    finally:\n        # Restore original function\n        calculate_distance = original_calc\n\n\ndef example_2_coordinates():\n    \"\"\"Example 2: TSP with actual city coordinates\"\"\"\n    print_header(\"Example 2: TSP with City Coordinates\")\n    \n    # Define cities with (x, y) coordinates\n    city_coords = {\n        0: (0, 0),    # City A\n        1: (3, 4),    # City B  \n        2: (6, 1),    # City C\n        3: (2, 6)     # City D\n    }\n    \n    cities = list(city_coords.values())\n    \n    print(\"Cities with coordinates:\")\n    for i, (x, y) in enumerate(cities):\n        print(f\"  City {i}: ({x}, {y})\")\n    \n    # Display distance matrix\n    print(\"\\nDistance Matrix:\")\n    distances = calculate_euclidean_distance_matrix(cities)\n    print(\"     \", end=\"\")\n    for j in range(len(cities)):\n        print(f\"{j:8}\", end=\"\")\n    print()\n    \n    for i in range(len(cities)):\n        print(f\"{i:3}: \", end=\"\")\n        for j in range(len(cities)):\n            print(f\"{distances[(i,j)]:8.2f}\", end=\"\")\n        print()\n    \n    # Solve TSP\n    start_time = time.time()\n    best_path, best_distance = tsp_with_coordinates(cities)\n    end_time = time.time()\n    \n    print_result(best_path, best_distance, end_time - start_time)\n\n\ndef example_3_performance():\n    \"\"\"Example 3: Performance comparison with different city counts\"\"\"\n    print_header(\"Example 3: Performance Analysis\")\n    \n    print(\"Analyzing TSP performance for different numbers of cities...\")\n    print(\"Note: Time complexity is O(n!) - grows VERY quickly!\")\n    \n    for n_cities in [3, 4, 5, 6]:\n        print(f\"\\n--- {n_cities} Cities ---\")\n        \n        # Create simple city list\n        cities = list(range(n_cities))\n        \n        # Time the execution\n        start_time = time.time()\n        best_path, best_distance = tsp_brute_force(cities)\n        end_time = time.time()\n        \n        execution_time = end_time - start_time\n        \n        # Calculate theoretical number of permutations\n        import math\n        permutations = math.factorial(n_cities - 1)  # (n-1)! since we fix starting city\n        \n        print(f\"Possible routes: {permutations}\")\n        print(f\"Best path: {' → '.join(map(str, best_path))}\")\n        print(f\"Distance: {best_distance}\")\n        print(f\"Time: {execution_time:.4f} seconds\")\n        \n        if n_cities &gt;= 6:\n            print(\"Warning: 7+ cities will take significantly longer!\")\n\n\ndef interactive_mode():\n    \"\"\"Interactive mode for custom TSP problems\"\"\"\n    print_header(\"Interactive TSP Solver\")\n    \n    try:\n        n_cities = int(input(\"\\nHow many cities? (recommended: 3-6): \"))\n        \n        if n_cities &gt; 8:\n            response = input(\"Warning: This may take a very long time. Continue? (y/n): \")\n            if response.lower() != 'y':\n                return\n        \n        print(f\"\\nEnter coordinates for {n_cities} cities:\")\n        cities = []\n        for i in range(n_cities):\n            while True:\n                try:\n                    coords = input(f\"City {i} (x,y): \").split(',')\n                    x, y = float(coords[0].strip()), float(coords[1].strip())\n                    cities.append((x, y))\n                    break\n                except (ValueError, IndexError):\n                    print(\"Please enter coordinates as: x,y (e.g., 1.5,2.0)\")\n        \n        print(f\"\\nSolving TSP for {n_cities} cities...\")\n        start_time = time.time()\n        best_path, best_distance = tsp_with_coordinates(cities)\n        end_time = time.time()\n        \n        print_result(best_path, best_distance, end_time - start_time)\n        \n    except ValueError:\n        print(\"Invalid input. Please enter a number.\")\n    except KeyboardInterrupt:\n        print(\"\\nOperation cancelled.\")\n\n\ndef main():\n    \"\"\"Main driver function\"\"\"\n    print_header(\"Travelling Salesman Problem (TSP) Solver\")\n    print(\"Demonstrating brute force algorithm\")\n    print(\"Author: CS101 Course\")\n    \n    # Run examples\n    example_1_simple()\n    example_2_coordinates()\n    example_3_performance()\n    \n    # Interactive mode\n    while True:\n        print(\"\\n\" + \"-\"*40)\n        print(\"Options:\")\n        print(\"1. Run interactive TSP solver\")\n        print(\"2. Exit\")\n        \n        try:\n            choice = input(\"\\nEnter your choice (1-2): \").strip()\n            \n            if choice == '1':\n                interactive_mode()\n            elif choice == '2':\n                print(\"\\nThank you for using the TSP solver!\")\n                break\n            else:\n                print(\"Please enter 1 or 2.\")\n                \n        except KeyboardInterrupt:\n            print(\"\\n\\nGoodbye!\")\n            break\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#output",
    "href": "materials/10_5_travellingSalesman.html#output",
    "title": "The Travelling Salesman Problem",
    "section": "Output",
    "text": "Output\npython3 examples.py\n\n\n\n\n\n\nNote\n\n\n🔧 TSP Solver - Usage Example\n========================================\n\n1️⃣  Using built-in distance matrix:\n   Input: [0, 1, 2, 3]\n   Best path: [0, 1, 2, 3, 0]\n   Distance: 90\n   Time: 0.0001s\n\n2️⃣  Using custom city coordinates:\n   Coordinates: [(0, 0), (1, 3), (4, 1), (2, 4)]\n   Best path: [0, 1, 3, 2, 0]\n   Distance: 12.31\n   Time: 0.0001s\n\n3️⃣  Performance for different city counts:\n   3 cities:      2 routes, 0.0000s\n   4 cities:      6 routes, 0.0000s\n   5 cities:     24 routes, 0.0001s\n   6 cities:    120 routes, 0.0007s\n   7 cities:    720 routes, 0.0041s\n\n🎯 Solving a specific problem:\n   Visiting 5 offices in a city\n   Offices: ['HQ', 'Branch A', 'Branch B', 'Branch C', 'Branch D']\n   Best route: HQ → Branch B → Branch D → Branch A → Branch C → HQ\n   Total distance: 16.03 km\n   Solve time: 0.0001 seconds\n\n✨ Want more examples? Run 'python3 main.py' for interactive mode!"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#tsp-is-everywhere",
    "href": "materials/10_5_travellingSalesman.html#tsp-is-everywhere",
    "title": "The Travelling Salesman Problem",
    "section": "TSP is Everywhere! 🌍",
    "text": "TSP is Everywhere! 🌍\n\n\nThe Travelling Salesman Problem appears in countless real-world scenarios, often disguised as other optimization challenges.\n\n\n\nLogistics & Transportation 🚛\n# Delivery route optimization\ndelivery_stops = [\n    \"Warehouse\",      # Start/end point\n    \"123 Main St\",    # Customer 1\n    \"456 Oak Ave\",    # Customer 2  \n    \"789 Pine Rd\",    # Customer 3\n    \"321 Elm St\"      # Customer 4\n]\n\n# TSP finds shortest route visiting all stops\noptimal_route = tsp_solver(delivery_stops)\nprint(f\"Optimal delivery route: {optimal_route}\")\n\n# Real impact:\n# - UPS saves $50M+ annually with route optimization\n# - FedEx reduces fuel consumption by 10%\n# - Amazon uses TSP for same-day delivery\nSchool Bus Routing 🚌 * Visit all bus stops efficiently * Minimize travel time for students * Reduce fuel costs and emissions\n\nManufacturing & Technology 🔧\n# Circuit board drilling optimization\ndrill_points = [\n    (10, 20),   # Hole 1 coordinates\n    (30, 15),   # Hole 2 coordinates\n    (25, 35),   # Hole 3 coordinates\n    (40, 25)    # Hole 4 coordinates\n]\n\n# TSP minimizes drill head movement\noptimal_drilling = tsp_solver(drill_points)\n# Result: Faster manufacturing, less wear on equipment\nDNA Sequencing 🧬 * Arrange genetic fragments in correct order * Minimize overlapping regions * Critical for medical research\nVideo Game AI 🎮 * NPCs planning efficient patrol routes * Resource gathering optimization * Strategy game unit movement"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#tsp-environmental-impacts-the-green-side-of-tsp",
    "href": "materials/10_5_travellingSalesman.html#tsp-environmental-impacts-the-green-side-of-tsp",
    "title": "The Travelling Salesman Problem",
    "section": "TSP Environmental Impacts: The Green Side of TSP",
    "text": "TSP Environmental Impacts: The Green Side of TSP\n\n\n\n\n\n1. Positive Environmental Effects ✅ - TSP optimization reduces fuel consumption and lowers emissions - Decreases overall traffic congestion - Minimizes unnecessary vehicle miles traveled\n2. The Consumption Paradox ⚠️ - Does efficient delivery encourage more online shopping? - Could TSP optimization actually increase total environmental impact? - Are we solving the right problem or enabling overconsumption?\n3. Future Transportation Challenges 🔋 - How should TSP algorithms adapt for electric delivery vehicles? - What about charging station stops and battery range limits? - How do we optimize for renewable energy usage timing?\n\n\n\n\n\n\n\n\n\nThink: What is an Eco-Friendly TSP Design\n\n\nIf you could design a TSP system, what factors besides distance would you optimize for?\nConsider these green factors: - Carbon footprint per route segment - Real-time traffic patterns to reduce idling - Air quality levels in different neighborhoods - Time-of-day energy grid efficiency\nResearch Task: Find one company using TSP for environmental benefits. What measurable impact have they achieved?"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#summary-tsp---the-beautiful-impossible-problem",
    "href": "materials/10_5_travellingSalesman.html#summary-tsp---the-beautiful-impossible-problem",
    "title": "The Travelling Salesman Problem",
    "section": "Summary: TSP - The Beautiful Impossible Problem",
    "text": "Summary: TSP - The Beautiful Impossible Problem\nThe Travelling Salesman Problem teaches us about the beauty and challenges of computer science! 🎯\n\n\nWhat We Now Know 🧠📚\n\n🗺️ Real-world relevance: TSP is everywhere\n📈 Computational complexity: Problems grow!\n\n🧠 Creative solutions: When brute force fails, get creative\n💰 Economic impact: Good algorithms save energy\n🌍 Environmental benefits: Efficiency is good \n\n\nWhat We Also Know! 🧠🌟\n\nThe Big Lesson: Sometimes “good enough” solutions (heuristics) are better than perfect solutions that take forever! 🧠\nBrute_force: “Try everything - works for small problems”,\nHeuristics: “Use smart shortcuts - good for most cases”,\nApproximation: “Get close to optimal - practical for real world”,\nMachine_learning: “Learn from patterns to solve problems - modern AI approach”"
  },
  {
    "objectID": "materials/10_5_travellingSalesman.html#and-also-good-to-know-too",
    "href": "materials/10_5_travellingSalesman.html#and-also-good-to-know-too",
    "title": "The Travelling Salesman Problem",
    "section": "And, Also Good to Know Too!",
    "text": "And, Also Good to Know Too!\n\n\n\n\n\n\n\n\nImportant\n\n\nRemember: 🤔\n\nNot all problems have efficient exact solutions\nCreativity beats raw computational power\nReal-world constraints matter more than textbook perfection\nTechnology should serve people and planet\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nQuestions to Explore:🌟\n\nHow do we know when a “good enough” solution is actually good enough?\nWhat happens when we combine multiple optimization techniques?\nHow is AI changing the way we solve impossible problems?"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#what-are-literals",
    "href": "materials/3_i_introToPython_solutions.html#what-are-literals",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "What are literals?",
    "text": "What are literals?\nLiterals are fixed values in your code. They can be numbers, strings, booleans, etc.\n\n\n\n\n\n\nNote\n\n\nExamples: - 42 (integer) - 3.14 (float) - 'hello' (string) - True, False (boolean)"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#python-code-sample",
    "href": "materials/3_i_introToPython_solutions.html#python-code-sample",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Python Code Sample",
    "text": "Python Code Sample\nage = 18\npi = 3.14159\ngreeting = \"Hello, world!\"\nis_active = True"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#interesting-application",
    "href": "materials/3_i_introToPython_solutions.html#interesting-application",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Interesting Application",
    "text": "Interesting Application\nUse literals to set default values in games, apps, or data analysis scripts!"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#challenge-1-literal-mix-up",
    "href": "materials/3_i_introToPython_solutions.html#challenge-1-literal-mix-up",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 1: Literal Mix-Up",
    "text": "Challenge 1: Literal Mix-Up\nWrite code that uses at least three different types of literals (integer, float, string, boolean) and prints them in a single sentence.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#challenge-2-variable-math",
    "href": "materials/3_i_introToPython_solutions.html#challenge-2-variable-math",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 2: Variable Math",
    "text": "Challenge 2: Variable Math\nCreate two variables, perform addition, subtraction, multiplication, and division, and print the results with clear labels.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#challenge-3-loop-conditional-fun",
    "href": "materials/3_i_introToPython_solutions.html#challenge-3-loop-conditional-fun",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 3: Loop & Conditional Fun",
    "text": "Challenge 3: Loop & Conditional Fun\nWrite a loop that prints numbers from 1 to 10. For each number, print whether it is a multiple of 3 or not.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#challenge-4-squaring-game",
    "href": "materials/3_i_introToPython_solutions.html#challenge-4-squaring-game",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 4: Squaring Game",
    "text": "Challenge 4: Squaring Game\nWrite a function that takes a number and returns both its square and its cube. Print the results for the number 5.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#challenge-5-string-slicing-mystery",
    "href": "materials/3_i_introToPython_solutions.html#challenge-5-string-slicing-mystery",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 5: String Slicing Mystery",
    "text": "Challenge 5: String Slicing Mystery\nGiven the string mystery = \"QuartoPythonRocks!\", print:\n\nThe first 6 characters\nThe last 5 characters\nEvery third character\n\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#solution-1-literal-mix-up",
    "href": "materials/3_i_introToPython_solutions.html#solution-1-literal-mix-up",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Solution 1: Literal Mix-Up",
    "text": "Solution 1: Literal Mix-Up\n\ninteger = 7\nfloat_num = 2.5\ntext = \"apples\"\nis_fresh = True\nprint(f\"I bought {integer} {text}, each cost {float_num} dollars. Fresh? {is_fresh}\")\n\nThis code uses integer, float, string, and boolean literals in a sentence."
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#solution-2-variable-math",
    "href": "materials/3_i_introToPython_solutions.html#solution-2-variable-math",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Solution 2: Variable Math",
    "text": "Solution 2: Variable Math\n\nx = 12\ny = 4\nprint(f\"Addition: {x + y}\")\nprint(f\"Subtraction: {x - y}\")\nprint(f\"Multiplication: {x * y}\")\nprint(f\"Division: {x / y}\")\n\nThis code performs math operations and prints results with labels."
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#solution-3-loop-conditional-fun",
    "href": "materials/3_i_introToPython_solutions.html#solution-3-loop-conditional-fun",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Solution 3: Loop & Conditional Fun",
    "text": "Solution 3: Loop & Conditional Fun\n\nfor n in range(1, 11):\n    if n % 3 == 0:\n        print(f\"{n} is a multiple of 3\")\n    else:\n        print(f\"{n} is not a multiple of 3\")\n\nThis code loops through numbers and checks for multiples of 3."
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#solution-4-squaring-game",
    "href": "materials/3_i_introToPython_solutions.html#solution-4-squaring-game",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Solution 4: Squaring Game",
    "text": "Solution 4: Squaring Game\n\ndef square_and_cube(num):\n    \"\"\"Returns the square and cube of num.\"\"\"\n    return num ** 2, num ** 3\n\nsq, cu = square_and_cube(5)\nprint(f\"Square: {sq}, Cube: {cu}\")\n\nThis function returns both the square and cube of a number."
  },
  {
    "objectID": "materials/3_i_introToPython_solutions.html#solution-5-string-slicing-mystery",
    "href": "materials/3_i_introToPython_solutions.html#solution-5-string-slicing-mystery",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Solution 5: String Slicing Mystery",
    "text": "Solution 5: String Slicing Mystery\n\nmystery = \"QuartoPythonRocks!\"\nprint(mystery[:6])      # First 6 characters\nprint(mystery[-5:])     # Last 5 characters\nprint(mystery[::3])     # Every third character\n\nThis code slices the string in three different ways."
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#where-are-we-in-the-scope-of-complexity",
    "href": "materials/10_4_big_o_exponential_o2n.html#where-are-we-in-the-scope-of-complexity",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Where Are We in the Scope of Complexity?",
    "text": "Where Are We in the Scope of Complexity?"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#interactive-o2n-fibonacci-demo",
    "href": "materials/10_4_big_o_exponential_o2n.html#interactive-o2n-fibonacci-demo",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Interactive O(2^n) Fibonacci Demo",
    "text": "Interactive O(2^n) Fibonacci Demo\n\n\n    Naive Fibonacci - O(2^n) Recursive Explosion\n    \n        \n            Fibonacci(3)\n            Fibonacci(5)\n            Fibonacci(7)\n            Fibonacci(9)\n            Fibonacci(10) - Slow!\n            Fibonacci(12) - Very Slow!\n        \n        Calculate Fibonacci\n        Show O(n) Solution\n        Reset\n    \n    \n        \n    \n    \n        Calculating: Ready to calculate!\n        Function Calls: 0 | Depth: 0 | Result: -\n        Status: Choose a Fibonacci number to calculate"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#interactive-demo-subset-generation-explosion",
    "href": "materials/10_4_big_o_exponential_o2n.html#interactive-demo-subset-generation-explosion",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Interactive Demo: Subset Generation Explosion! 💥",
    "text": "Interactive Demo: Subset Generation Explosion! 💥\n\n\n    Subset Generation - O(2^n) Combinatorial Explosion  🎯\n    \n        Enter items (separated by commas):\n        \n        \n        Generate All Subsets\n        Clear\n    \n    \n        Items: 4 | Expected Subsets: 16 | Generated: 0\n        Status: Ready to generate subsets"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#interactive-demo-password-strength-analyzer",
    "href": "materials/10_4_big_o_exponential_o2n.html#interactive-demo-password-strength-analyzer",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Interactive Demo: Password Strength Analyzer! 🔐",
    "text": "Interactive Demo: Password Strength Analyzer! 🔐\n\n\n    \n      Exponential Security Growth! 🛡️ \n    \n        \n            Password Length:\n            \n            8 characters\n        \n        \n             Lowercase (a-z)\n             Uppercase (A-Z)\n             Numbers (0-9)\n             Symbols (!@#$%^&*)\n        \n        Analyze Strength\n    \n    \n        \n            Character Set Size: 62\n            Total Combinations: 218,340,105,584,896\n            Time to Crack (brute force): ~3,467 years"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#password-strength-analysis-in-python",
    "href": "materials/10_4_big_o_exponential_o2n.html#password-strength-analysis-in-python",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Password Strength Analysis in Python 💻",
    "text": "Password Strength Analysis in Python 💻\n    # How many possible passwords?\n    def count_passwords(length, alphabet_size):\n        return alphabet_size ** length\n\n    # Test different password complexities\n    lengths = [4, 6, 8, 10, 12]\n    for length in lengths:\n        # lowercase letters only (26 characters)\n        simple = count_passwords(length, 26)\n        # letters + digits + symbols (94 characters)\n        complex_pwd = count_passwords(length, 94)\n        print(f\"{length} chars: {simple:,} vs {complex_pwd:,}\")\n\n\n\n\n\n\nInvestigation Questions 🤔\n\n\n\n🔢 4-digit PIN vs 8-character password: How much stronger is longer?\n⚡ Symbol Power: Why do security experts love special characters?\n📈 Exponential Growth: Can you spot the pattern as length increases?\n🎯 Real-World Impact: How do hackers exploit weak passwords?"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#interactive-demo-binary-tree-path-counter",
    "href": "materials/10_4_big_o_exponential_o2n.html#interactive-demo-binary-tree-path-counter",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Interactive Demo: Binary Tree Path Counter! 🌳",
    "text": "Interactive Demo: Binary Tree Path Counter! 🌳\n\n\n    Binary Decision Tree - O(2^n) Path Explosion\n    \n        Tree Depth:\n        \n        4 levels\n        \n        Generate Tree\n        Count All Paths\n        Reset\n    \n    \n        Tree Depth: 4 | Expected Paths: 16 | Found Paths: 0\n        Status: Ready to generate tree"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#by-the-way",
    "href": "materials/10_4_big_o_exponential_o2n.html#by-the-way",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "By The Way, … 🧪",
    "text": "By The Way, … 🧪\n\n\n\nQ: Is there a shorter way to produce the Fibonacci sequence?\nA: Absolutely! Use Binet’s formula.\n\n\n\nimport math\n\ndef fibonacci_binet(n):\n    \"\"\"\n    Calculates the nth Fibonacci number using Binet's formula.\n    Args:\n        n: The index of the Fibonacci number to calculate (non-negative integer).\n    Returns:\n        The nth Fibonacci number as an integer.\n    \"\"\"\n    if n &lt; 0:\n        raise ValueError(\"Input 'n' must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n\n    # Binet's formula\n    fn = (phi**n - psi**n) / math.sqrt(5)\n\n    # Round to the nearest integer as Binet's formula can produce\n    # slight floating-point inaccuracies for large n.\n    return int(round(fn))\n\n### Execute the code here\nfor i in range(11):\n    print(f\"Fibonacci({i}) = {fibonacci_binet(i)}\")\n\n# Test with a larger number\nn_large = 20\nprint(f\"\\n Larger:\\nFibonacci({n_large}) = {fibonacci_binet(n_large)}\")\n\n\n\nImportant\n\n\nQ: What is the complexity of this algorithm?"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#partner-investigation-the-exponential-explosion",
    "href": "materials/10_4_big_o_exponential_o2n.html#partner-investigation-the-exponential-explosion",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Partner Investigation: The Exponential Explosion!",
    "text": "Partner Investigation: The Exponential Explosion!\nRun these samples of code with a partner. Discuss outcomes and respond to questions at the end of the source code.\n\n\n\n\n\n\nPartner Activity 👥\n\n\n\n⚠️ WARNING: These experiments can take a VERY long time! Partner coordination is essential.\n\n\n\n\n\nExperiment 1: Fibonacci Explosion Investigation\n\"\"\"\nEXPONENTIAL COMPLEXITY ANALYSIS - Fibonacci Performance Tracking\n================================================================\n\nEducational Purpose:\nThis program provides hands-on experience with exponential time complexity O(2^n)\nthrough a carefully instrumented naive Fibonacci implementation. Students observe\nhow function calls grow exponentially, creating an intuitive understanding of why\ncertain algorithms become computationally intractable as input size increases.\n\nKey Learning Objectives:\n1. Experience exponential growth patterns firsthand through performance tracking\n2. Understand the relationship between algorithm structure and time complexity\n3. Develop intuition for computational limits and practical algorithm constraints\n4. Learn safe experimentation practices with potentially expensive algorithms\n5. Motivate the need for algorithmic optimization techniques\n\nWhat This Program Demonstrates:\n- Naive Recursive Fibonacci: O(2^n) time complexity with detailed call tracking\n- Performance metrics: function call counts, recursion depth, execution time\n- Safety protocols: controlled testing environment with automatic limits\n- Educational scaffolding: partner-based learning with guided analysis questions\n\nTarget Audience: CS 101 students learning about algorithm complexity analysis\nCompanion to: complex_2.py (optimization comparison) and interactive presentations\nAuthor: Course Materials for Algorithm Analysis Unit  \nDate: Fall 2025\n\"\"\"\n\n# Import required modules for timing and system recursion limits\nimport time\nimport sys\n\ndef fib_naive_with_tracking(n, depth=0, memo=None):\n    \"\"\"\n    Naive recursive Fibonacci implementation with performance tracking.\n\n    This function demonstrates O(2^n) exponential time complexity by:\n    - Making two recursive calls for each non-base case\n    - Tracking the total number of function calls made\n    - Tracking the maximum recursion depth reached\n    \n    Args:\n        n (int): The Fibonacci number to calculate\n        depth (int): Current recursion depth (for tracking purposes)\n        memo (dict): Dictionary to track performance metrics\n        \n    Returns:\n        tuple: (fibonacci_result, performance_stats)\n    \"\"\"\n    # Initialize tracking dictionary on first call\n    if memo is None:\n        memo = {'calls': 0, 'max_depth': 0}\n    \n    # Count this function call and update maximum depth reached\n    memo['calls'] += 1\n    memo['max_depth'] = max(memo['max_depth'], depth)\n    \n    # Base case: F(0) = 0, F(1) = 1\n    if n &lt;= 1:\n        return n, memo\n    \n    # Recursive case: F(n) = F(n-1) + F(n-2)\n    # This creates the exponential explosion - each call makes TWO more calls\n    left_result, memo = fib_naive_with_tracking(n-1, depth+1, memo)\n    right_result, memo = fib_naive_with_tracking(n-2, depth+1, memo)\n    \n    # Return the sum of the two recursive results plus performance data\n    return left_result + right_result, memo\n\n    # SAFETY PROTOCOL - Partner coordination essential!\n    # Partner A: Test [5, 10, 15]\n    # Partner B: Test [20, 25] ONLY (DO NOT go higher without permission!)\n\ndef safe_fibonacci_test(test_values, max_time=30):\n    \"\"\"\n    Safely test Fibonacci calculations with performance monitoring.\n    \n    This function provides a controlled environment for testing the exponential \n    Fibonacci algorithm by:\n    - Setting time limits to prevent infinite waiting\n    - Adjusting recursion limits to prevent stack overflow\n    - Collecting and displaying performance metrics\n    - Stopping execution if calculations take too long\n    \n    Args:\n        test_values (list): List of Fibonacci numbers to calculate\n        max_time (int): Maximum seconds allowed per calculation\n        \n    Returns:\n        list: Results containing performance data for each test\n    \"\"\"\n    results = []  # Store performance results for analysis\n    \n    # Test each Fibonacci number in the provided list\n    for n in test_values:\n        print(f\"\\nTesting Fibonacci({n})...\")\n        \n        # Record start time to measure execution duration\n        start = time.time()\n        \n        try:\n            # Prevent stack overflow by increasing recursion limit\n            # Exponential algorithms can create very deep recursion\n            old_limit = sys.getrecursionlimit()\n            sys.setrecursionlimit(max(1000, n * 100))  # Scale with input size\n            \n            # Execute the Fibonacci calculation with tracking\n            result, stats = fib_naive_with_tracking(n)\n            duration = time.time() - start\n            \n            # Restore original recursion limit\n            sys.setrecursionlimit(old_limit)\n            \n            # Safety check: Stop if calculation takes too long\n            # This prevents students from waiting indefinitely for large inputs\n            if duration &gt; max_time:\n                print(f\"⚠️ STOPPED: Taking too long ({duration:.2f}s)\")\n                break\n            \n            # Store performance data for analysis\n            results.append({\n                'n': n,                           # Input value\n                'result': result,                 # Fibonacci result\n                'calls': stats['calls'],          # Total function calls (shows 2^n growth)\n                'max_depth': stats['max_depth'],  # Maximum recursion depth\n                'time': duration                  # Execution time in seconds\n            })\n            \n            # Display results to show exponential growth pattern\n            print(f\"Result: {result}\")\n            print(f\"Function calls: {stats['calls']:,}\")  # Comma-separated for readability\n            print(f\"Time: {duration:.4f} seconds\")\n            \n        except RecursionError:\n            # Handle case where recursion goes too deep\n            print(f\"⚠️ RECURSION LIMIT EXCEEDED for n={n}\")\n            break\n    \n    return results\n\n# ===================================================================\n# MAIN EXECUTION SECTION - Educational Assignment for Partner Learning\n# ===================================================================\n\n\"\"\"\nThis section provides a structured learning experience about exponential complexity.\nStudents work in pairs with different test values to observe O(2^n) growth patterns.\n\nThe assignment is designed to be:\n1. Safe - preventing system crashes with controlled inputs\n2. Educational - showing clear exponential growth patterns  \n3. Collaborative - partners compare results to understand scaling\n\"\"\"\n\n# YOUR ASSIGNMENT (choose based on partner role):\n# These values are carefully chosen to demonstrate exponential growth\n# while keeping execution times reasonable for classroom use\n\nmy_test_values = [5, 10, 15]  # Partner A - safe values that complete quickly\n# my_test_values = [20, 25]     # Partner B - be VERY careful! These take much longer\n\n# Execute the performance test with your chosen values\n# This will show you exactly how O(2^n) algorithms behave in practice\nresults = safe_fibonacci_test(my_test_values)\n\n# ===================================================================\n# ANALYSIS FRAMEWORK - Questions to Guide Student Understanding\n# ===================================================================\n\n# After running your tests, discuss these questions with your partner:\n# 1. How did function calls grow with each increase in n?\n#    (Look for the pattern: roughly doubling with each increment)\n# 2. Can you predict the pattern?\n#    (Try to predict calls for n+1 based on your observed data)\n# 3. Why does this get so slow so quickly?\n#    (Connect the exponential call growth to exponential time complexity)\n# 4. What would happen with larger inputs?\n#    (Extrapolate from your data - why do we need iterative approaches?)\n\n\"\"\"\nExpected Learning Outcomes:\n- Visceral understanding of exponential growth rates\n- Appreciation for algorithm efficiency importance\n- Motivation to learn optimized algorithms (dynamic programming, memoization)\n- Understanding of why certain problems become computationally intractable\n\"\"\"\n\nExperiment 2: Optimization Race Challenge\n\"\"\"\nALGORITHM OPTIMIZATION DEMONSTRATION - Fibonacci Performance Comparison\n========================================================================\n\nEducational Purpose:\nThis program demonstrates the dramatic performance differences between three\napproaches to computing Fibonacci numbers, showing students why algorithm\noptimization matters in real-world programming.\n\nKey Learning Objectives:\n1. Experience the practical impact of Big O complexity\n2. Understand how memoization transforms exponential to linear time\n3. Compare recursive vs iterative solutions\n4. Witness exponential algorithms becoming computationally intractable\n\nThree Approaches Compared:\n- Naive Recursive: O(2^n) - exponential time, exponential space\n- Memoized Recursive: O(n) - linear time, linear space  \n- Iterative: O(n) - linear time, constant space\n\nTarget Audience: CS 101 students learning about algorithm complexity\nAuthor: Course Materials for Algorithm Analysis Unit\nDate: Fall 2025\n\"\"\"\n\nfrom functools import lru_cache  # Python's built-in memoization decorator\nimport time                      # For precise performance timing\n\n# ===================================================================\n# THREE FIBONACCI IMPLEMENTATIONS - Different Complexity Classes\n# ===================================================================\ndef fib_exponential(n):\n    \"\"\"\n    NAIVE RECURSIVE FIBONACCI - O(2^n) Time Complexity\n    \n    This is the \"textbook\" recursive implementation that directly follows\n    the mathematical definition: F(n) = F(n-1) + F(n-2)\n    \n    Why It's Exponential:\n    - Each call spawns two more calls (binary tree of recursion)\n    - Massive redundant calculation (F(5) calculated multiple times)\n    - Total calls ≈ 2^n, making it impractical for n &gt; 35\n    \n    Educational Value: Shows students why naive approaches can be disastrous\n    \n    Args:\n        n (int): The position in Fibonacci sequence to calculate\n        \n    Returns:\n        int: The nth Fibonacci number\n        \n    Time Complexity: O(2^n) - exponential growth\n    Space Complexity: O(n) - recursion stack depth\n    \"\"\"\n    # Base cases: F(0) = 0, F(1) = 1\n    if n &lt;= 1:\n        return n\n    \n    # Recursive case: F(n) = F(n-1) + F(n-2)\n    # WARNING: This creates exponential redundancy!\n    return fib_exponential(n-1) + fib_exponential(n-2)\n\n@lru_cache(maxsize=None)  # Python decorator for automatic memoization\ndef fib_memoized(n):\n    \"\"\"\n    MEMOIZED RECURSIVE FIBONACCI - O(n) Time Complexity\n    \n    Same recursive structure as naive version, but with caching!\n    The @lru_cache decorator automatically stores results, eliminating\n    redundant calculations that made the naive version exponential.\n    \n    How Memoization Works:\n    - First call to F(k): calculated and stored in cache\n    - Subsequent calls to F(k): returned instantly from cache\n    - Transforms exponential tree into linear sequence\n    \n    Educational Value: Shows power of caching/dynamic programming\n    \n    Args:\n        n (int): The position in Fibonacci sequence to calculate\n        \n    Returns:\n        int: The nth Fibonacci number\n        \n    Time Complexity: O(n) - each F(k) calculated only once\n    Space Complexity: O(n) - cache storage + recursion stack\n    \"\"\"\n    # Base cases: F(0) = 0, F(1) = 1\n    if n &lt;= 1:\n        return n\n    \n    # Recursive case with automatic memoization\n    # The @lru_cache decorator handles caching transparently\n    return fib_memoized(n-1) + fib_memoized(n-2)\n\ndef fib_iterative(n):\n    \"\"\"\n    ITERATIVE FIBONACCI - O(n) Time, O(1) Space\n    \n    Bottom-up approach that builds the sequence from F(0) to F(n).\n    No recursion needed - just a simple loop with two variables.\n    \n    Why It's Optimal:\n    - Linear time: exactly n-1 iterations for F(n)\n    - Constant space: only stores current and previous values\n    - No function call overhead or stack risk\n    - Most practical approach for large n\n    \n    Educational Value: Shows how iterative thinking can optimize recursive problems\n    \n    Args:\n        n (int): The position in Fibonacci sequence to calculate\n        \n    Returns:\n        int: The nth Fibonacci number\n        \n    Time Complexity: O(n) - single loop from 2 to n\n    Space Complexity: O(1) - only two variables needed\n    \"\"\"\n    # Handle base cases directly\n    if n &lt;= 1:\n        return n\n    \n    # Initialize: a = F(0), b = F(1)\n    a, b = 0, 1\n    \n    # Build sequence iteratively: F(2), F(3), ..., F(n)\n    for _ in range(2, n + 1):\n        # Calculate next Fibonacci number and shift variables\n        # This elegant swap calculates F(i) = F(i-1) + F(i-2)\n        a, b = b, a + b\n    \n    return b  # b now contains F(n)\n\ndef optimization_race(n_values):\n    \"\"\"\n    PERFORMANCE COMPARISON ENGINE - Algorithm Racing Framework\n    \n    This function conducts a systematic performance comparison of all three\n    Fibonacci implementations, providing students with concrete evidence of\n    how algorithm choice affects real-world performance.\n    \n    Educational Design Features:\n    - Automatic safety checks (skips exponential for large n)\n    - Precise timing measurements using time.time()\n    - Clear performance reporting with speedup calculations\n    - Fair testing (cache clearing between runs)\n    - Robust exception handling for edge cases\n    \n    Args:\n        n_values (list): Fibonacci numbers to test (e.g., [10, 20, 30])\n        \n    Returns:\n        None (prints results directly for classroom demonstration)\n        \n    Raises:\n        ValueError: If n_values contains invalid inputs\n        TypeError: If n_values is not iterable\n    \"\"\"\n    # Input validation to prevent errors\n    try:\n        # Check if n_values is iterable\n        iter(n_values)\n    except TypeError:\n        raise TypeError(\"n_values must be an iterable (list, tuple, etc.)\")\n    \n    # Validate each value in the input\n    valid_values = []\n    for n in n_values:\n        try:\n            n = int(n)  # Convert to integer if possible\n            if n &lt; 0:\n                print(f\"⚠️  WARNING: Skipping negative value {n} (Fibonacci undefined for negative numbers)\")\n                continue\n            if n &gt; 1000:\n                print(f\"⚠️  WARNING: Skipping extremely large value {n} (potential memory/time issues)\")\n                continue\n            valid_values.append(n)\n        except (ValueError, TypeError):\n            print(f\"⚠️  WARNING: Skipping invalid value {n} (must be a non-negative integer)\")\n            continue\n    \n    if not valid_values:\n        print(\"❌ ERROR: No valid values to test!\")\n        return\n    print(\"🏁 Fibonacci Optimization Race!\")\n    print(\"=\" * 50)\n    print(\"Testing three approaches: Exponential vs Memoized vs Iterative\")\n    print(f\"Valid test values: {valid_values}\")\n    \n    for n in valid_values:\n        print(f\"\\n🧮 Computing Fibonacci({n}):\")\n        \n        # ===== EXPONENTIAL APPROACH - O(2^n) =====\n        # Safety check: only test exponential for manageable values\n        # Beyond n=35, exponential becomes impractically slow\n        if n &lt;= 30:\n            try:\n                start = time.time()  # Start timing\n                result_exp = fib_exponential(n)\n                exp_time = time.time() - start  # Calculate duration\n                print(f\"  📈 Exponential O(2^n): {exp_time:.6f}s\")\n            except RecursionError:\n                print(f\"  📈 Exponential O(2^n): FAILED (recursion limit exceeded)\")\n                exp_time = float('inf')\n                result_exp = None\n            except OverflowError:\n                print(f\"  📈 Exponential O(2^n): FAILED (number too large)\")\n                exp_time = float('inf')\n                result_exp = None\n            except Exception as e:\n                print(f\"  📈 Exponential O(2^n): ERROR ({type(e).__name__})\")\n                exp_time = float('inf')\n                result_exp = None\n        else:\n            print(f\"  📈 Exponential O(2^n): SKIPPED (too slow!)\")\n            exp_time = float('inf')  # Mark as infinite time for comparisons\n            result_exp = None\n        \n        # ===== MEMOIZED APPROACH - O(n) =====\n        # Clear any previous cache to ensure fair timing comparison\n        try:\n            fib_memoized.cache_clear()  # Reset memoization cache\n            start = time.time()\n            result_memo = fib_memoized(n)\n            memo_time = time.time() - start\n            print(f\"  🧠 Memoized O(n):      {memo_time:.6f}s\")\n        except RecursionError:\n            print(f\"  🧠 Memoized O(n):      FAILED (recursion limit exceeded)\")\n            memo_time = float('inf')\n            result_memo = None\n        except OverflowError:\n            print(f\"  🧠 Memoized O(n):      FAILED (number too large)\") \n            memo_time = float('inf')\n            result_memo = None\n        except Exception as e:\n            print(f\"  🧠 Memoized O(n):      ERROR ({type(e).__name__})\")\n            memo_time = float('inf')\n            result_memo = None\n        \n        # ===== ITERATIVE APPROACH - O(n) =====\n        try:\n            start = time.time()\n            result_iter = fib_iterative(n)\n            iter_time = time.time() - start\n            print(f\"  🔄 Iterative O(n):     {iter_time:.6f}s\")\n        except OverflowError:\n            print(f\"  🔄 Iterative O(n):     FAILED (number too large)\")\n            iter_time = float('inf')\n            result_iter = None\n        except Exception as e:\n            print(f\"  🔄 Iterative O(n):     ERROR ({type(e).__name__})\")\n            iter_time = float('inf')\n            result_iter = None\n        \n        # ===== PERFORMANCE ANALYSIS =====\n        # Calculate and display speedup ratios if exponential was testable\n        # This shows students the dramatic impact of optimization\n        if exp_time != float('inf'):\n            try:\n                # Calculate speedup ratios with division by zero protection\n                if memo_time &gt; 0:\n                    memo_speedup = exp_time / memo_time\n                    print(f\"  🚀 Memoized speedup: {memo_speedup:.0f}x faster!\")\n                else:\n                    print(f\"  🚀 Memoized speedup: EXTREMELY FAST (sub-microsecond)\")\n                \n                if iter_time &gt; 0:\n                    iter_speedup = exp_time / iter_time  \n                    print(f\"  🚀 Iterative speedup: {iter_speedup:.0f}x faster!\")\n                else:\n                    print(f\"  🚀 Iterative speedup: EXTREMELY FAST (sub-microsecond)\")\n                    \n            except ZeroDivisionError:\n                # Fallback protection in case of unexpected zero division\n                print(f\"  🚀 Speedup calculation: EXTREMELY FAST (division by zero avoided)\")\n                print(f\"  📊 Optimized versions completed in negligible time!\")\n            \n            # Verify all methods produce the same result (when all succeeded)\n            try:\n                # Only verify if all results are available and not None\n                if all(result is not None for result in [result_exp, result_memo, result_iter]):\n                    assert result_exp == result_memo == result_iter, \"Results don't match!\"\n                    print(f\"  ✅ All methods produced identical results: {result_iter}\")\n                else:\n                    # Some calculations failed, show what we have\n                    available_results = []\n                    if result_memo is not None:\n                        available_results.append(f\"Memoized: {result_memo}\")\n                    if result_iter is not None:\n                        available_results.append(f\"Iterative: {result_iter}\")\n                    if result_exp is not None:\n                        available_results.append(f\"Exponential: {result_exp}\")\n                    \n                    if available_results:\n                        print(f\"  📊 Available results: {', '.join(available_results)}\")\n                        # Verify the ones we have match\n                        valid_results = [r for r in [result_exp, result_memo, result_iter] if r is not None]\n                        if len(valid_results) &gt; 1 and len(set(valid_results)) == 1:\n                            print(f\"  ✅ Available results match!\")\n                        elif len(valid_results) &gt; 1:\n                            print(f\"  ❌ WARNING: Available results don't match!\")\n            except AssertionError as e:\n                print(f\"  ❌ ERROR: {e}\")\n                print(f\"     Exponential: {result_exp if result_exp is not None else 'FAILED'}\")\n                print(f\"     Memoized: {result_memo if result_memo is not None else 'FAILED'}\")\n                print(f\"     Iterative: {result_iter if result_iter is not None else 'FAILED'}\")\n        else:\n            # For large n, exponential is too slow to test\n            print(f\"  ⚡ Exponential would take HOURS/DAYS for n={n}\")\n            print(f\"  ⚡ Optimization makes impossible problems solvable!\")\n\n# ===================================================================\n# MAIN EXECUTION - Structured Partner Learning Experience\n# ===================================================================\n\n\"\"\"\nCOLLABORATIVE ASSIGNMENT STRUCTURE:\nStudents work in pairs with different test cases to observe how algorithm\nchoice affects performance across different problem sizes.\n\nPartner A: Tests smaller values where all approaches are feasible\nPartner B: Tests larger values where exponential becomes impossible\n\nThis design helps students experience the \"complexity cliff\" - the point\nwhere poor algorithms become computationally intractable.\n\"\"\"\n\n# CHOOSE YOUR PARTNER ROLE:\n# Uncomment the appropriate line based on your assignment\n\nmy_values = [10, 20, 30]     # Partner A: All approaches testable\n# my_values = [35, 40, 50]   # Partner B: Exponential becomes impossible!\n\nprint(\"🎯 RUNNING OPTIMIZATION COMPARISON...\")\nprint(\"Your test values:\", my_values)\nprint()\n\n# Execute the performance comparison\noptimization_race(my_values)\n\n# ===================================================================\n# ANALYSIS FRAMEWORK - Post-Experiment Discussion Questions\n# ===================================================================\n\nprint(\"\\n\" + \"=\"*60)\nprint(\"📚 DISCUSSION QUESTIONS FOR PARTNERS:\")\nprint(\"=\"*60)\nprint()\nprint(\"After reviewing your results, discuss these questions:\")\nprint()\nprint(\"1. 🤔 TIPPING POINT: At what value of n does exponential become unusable?\")\nprint(\"   (Partner A vs B will have different experiences)\")\nprint()\nprint(\"2. 🚀 SPEEDUP MAGNITUDE: How dramatic is the speedup from optimization?\")\nprint(\"   (Look at the 'X times faster' numbers)\")\nprint()\nprint(\"3. 🧠 MEMOIZATION MAGIC: Why does memoization work so well here?\")\nprint(\"   (Think about redundant calculations in the exponential version)\")\nprint()\nprint(\"4. 💡 REAL-WORLD IMPACT: What does this teach us about algorithm choice?\")\nprint(\"   (Consider: debugging vs production, small vs large datasets)\")\nprint()\nprint(\"5. 🔄 SPACE VS TIME: Compare memoized vs iterative - which is better?\")\nprint(\"   (Consider memory usage and practical constraints)\")\n\n\"\"\"\nExpected Learning Outcomes:\n- Visceral understanding of exponential vs linear complexity\n- Appreciation for the power of dynamic programming/memoization\n- Recognition that algorithm choice can make impossible problems solvable\n- Understanding of trade-offs between different optimization approaches\n- Motivation to learn more advanced algorithmic techniques\n\"\"\""
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#final-challenge-algorithm-detective",
    "href": "materials/10_4_big_o_exponential_o2n.html#final-challenge-algorithm-detective",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Final Challenge: Algorithm Detective! 🕵️‍♂️",
    "text": "Final Challenge: Algorithm Detective! 🕵️‍♂️\n\n\n\n\n\n\nCan You Identify These Complexities Part 1? 🧩\n\n\nMystery Algorithms: Put Your Skills to the Test! 🤔 * Test your new Big-O analysis skills with these code snippets! * Look for loops, recursion, and data access patterns!\n\n\n\n# Algorithm A\ndef mystery_a(arr):\n    return arr[len(arr) // 2]\n# Algorithm B  \ndef mystery_b(arr):\n    total = 0\n    for item in arr:\n        total += item\n    return total / len(arr)"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#final-challenge-continued",
    "href": "materials/10_4_big_o_exponential_o2n.html#final-challenge-continued",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "Final Challenge: Continued! 🕵️‍♂️",
    "text": "Final Challenge: Continued! 🕵️‍♂️\n\n\n\n\n\n\nCan You Identify These Complexities Part II? 🧩\n\n\n\n\n\n\n# Algorithm C\ndef mystery_c(arr, target):\n    left, right = 0, len(arr) - 1\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n# Algorithm D\ndef mystery_d(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] &gt; arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr"
  },
  {
    "objectID": "materials/10_4_big_o_exponential_o2n.html#the-answers-how-did-you-do",
    "href": "materials/10_4_big_o_exponential_o2n.html#the-answers-how-did-you-do",
    "title": "O(2^n) - EXPONENTIAL TIME",
    "section": "The Answers: How Did You Do? ✅",
    "text": "The Answers: How Did You Do? ✅\n\n\n\n\n\n\n🎉 Algorithm Analysis Revealed!\n\n\nCheck your detective work against these solutions:\n\n\n\n    # Answers:\n    # Algorithm A: O(1) - Direct array access by index\n    # Algorithm B: O(n) - Single loop through all elements\n    # Algorithm C: O(log n) - Binary search (halving each step)\n    # Algorithm D: O(n²) - Nested loops (bubble sort)\n    # How did you do?!\n✅🎉 ✅🎉 ✅🎉 ✅🎉"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html",
    "href": "materials/7_midterm_study_sheet.html",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "",
    "text": "This study guide covers all the essential Python concepts you need to know for the midterm exam in our course. During lab time on Thursday 23th October 2025. The exam will be 70 minutes long, closed-book, and will test your understanding of Python fundamentals and concepts taken from the Materials pages in our course (see URL; https://cmpsc101fall2025datastructures.github.io/site/materials/0_materials.html. In addition, this midterm will cover chapters 1,2,3,4 and 5 of our textbook; Introduction to Computation and Programming Using Python by John V. Guttag.\n\n\nWhat will the midterm look like? The below list provides a a general idea of what to expect.\n\nCode Output Questions: You will be given Python code and asked what it prints\nMultiple Choice: Select the best answer from given options\n\nTrue/False with Explanation: State whether something is true or false and explain why\nFill-in-the-Blank: Complete code to achieve a specific result\nShort Answer: Explain concepts or differences between approaches\nGuttag’s textbook: Chapters 1,2,3,4 and 5\n\n\n\n\nHow can you prepare for this midterm? Your instructor has assembled a non-exhaustive short list of some of the best ways to prepare for the midterm.\n\nPractice writing code by hand - You will not have a computer during the exam\nTrace through code step by step - Follow the execution mentally\nKnow the exact output format - Pay attention to spacing, quotes, brackets\nUnderstand concepts, don’t just memorize - Know why things work the way they do\nReview common errors - Understanding what goes wrong helps you get it right"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#exam-format",
    "href": "materials/7_midterm_study_sheet.html#exam-format",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "",
    "text": "What will the midterm look like? The below list provides a a general idea of what to expect.\n\nCode Output Questions: You will be given Python code and asked what it prints\nMultiple Choice: Select the best answer from given options\n\nTrue/False with Explanation: State whether something is true or false and explain why\nFill-in-the-Blank: Complete code to achieve a specific result\nShort Answer: Explain concepts or differences between approaches\nGuttag’s textbook: Chapters 1,2,3,4 and 5"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#study-tips",
    "href": "materials/7_midterm_study_sheet.html#study-tips",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "",
    "text": "How can you prepare for this midterm? Your instructor has assembled a non-exhaustive short list of some of the best ways to prepare for the midterm.\n\nPractice writing code by hand - You will not have a computer during the exam\nTrace through code step by step - Follow the execution mentally\nKnow the exact output format - Pay attention to spacing, quotes, brackets\nUnderstand concepts, don’t just memorize - Know why things work the way they do\nReview common errors - Understanding what goes wrong helps you get it right"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#python-literals-and-data-types",
    "href": "materials/7_midterm_study_sheet.html#python-literals-and-data-types",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.1 1. Python Literals and Data Types",
    "text": "2.1 1. Python Literals and Data Types\n\n2.1.1 What You Need to Know\n\nLiterals are fixed values written directly in code\nData types: int, float, str, bool\nType conversion: int(), float(), str(), bool()\n\n\n\n2.1.2 Key Points\n# Valid literals\n42          # integer\n3.14        # float  \n\"hello\"     # string\n'world'     # string (single quotes also work)\nTrue        # boolean\nFalse       # boolean\n\n# Invalid literals\n3.14.5      # Two decimal points\nTrue.       # Period after boolean\n\n\n2.1.3 Practice Questions\nPractice 1: Which of these are valid Python literals?\na) 100    b) 2.5.7    c) \"Python\"    d) True    e) 'coding'\nPractice 2: What data type is each of these?\nx = 25\ny = 3.14\nz = \"Hello\"\nw = True"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#variables-and-operators",
    "href": "materials/7_midterm_study_sheet.html#variables-and-operators",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.2 2. Variables and Operators",
    "text": "2.2 2. Variables and Operators\n\n2.2.1 What You Need to Know\n\nAssignment operator: = (assigns value to variable)\nArithmetic operators: +, -, *, /, ** (power), % (modulus)\nComparison operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=\nLogical operators: and, or, not\n\n\n\n2.2.2 Key Points\n# Assignment vs Equality\nx = 5       # Assignment (single =)\nx == 5      # Comparison (double ==)\n\n# Order of operations (PEMDAS)\nresult = 2 + 3 * 4      # Result is 14, not 20\nresult = (2 + 3) * 4    # Result is 20\n\n# Modulus operator\n7 % 3       # Result is 1 (remainder)\n8 % 2       # Result is 0 (no remainder)\n\n\n2.2.3 Practice Questions\nPractice 3: What will this code output?\na = 10\nb = 3\nprint(a + b)\nprint(a ** b)\nprint(a % b)\nPractice 4: What will this expression evaluate to?\nx = 8\nresult = x &gt; 5 and x &lt; 15"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#conditionals-ifelifelse",
    "href": "materials/7_midterm_study_sheet.html#conditionals-ifelifelse",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.3 3. Conditionals (if/elif/else)",
    "text": "2.3 3. Conditionals (if/elif/else)\n\n2.3.1 What You Need to Know\n\nif statements execute code when condition is True\nelif (else if) provides additional conditions to check\nelse runs when no conditions are True\nIndentation matters - Use consistent spacing (usually 4 spaces)\n\n\n\n2.3.2 Key Points\n# Basic structure\nif condition1:\n    # Code runs if condition1 is True\nelif condition2:\n    # Code runs if condition2 is True (and condition1 was False)\nelse:\n    # Code runs if all conditions were False\n\n# Logical operators in conditions\nif x &gt; 0 and x &lt; 10:        # Both must be true\nif x &lt; 0 or x &gt; 100:        # Either can be true\nif not x == 0:              # Same as x != 0\n\n\n2.3.3 Practice Questions\nPractice 5: What will this code print if score = 85?\nif score &gt;= 90:\n    print(\"A\")\nelif score &gt;= 80:\n    print(\"B\")\nelif score &gt;= 70:\n    print(\"C\")\nelse:\n    print(\"F\")\nPractice 6: Complete this code to check if a number is even or odd:\nnumber = 7\nif __________:\n    print(\"Even\")\nelse:\n    print(\"Odd\")"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#loops-for-and-while",
    "href": "materials/7_midterm_study_sheet.html#loops-for-and-while",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.4 4. Loops (for and while)",
    "text": "2.4 4. Loops (for and while)\n\n2.4.1 What You Need to Know\n\nfor loops iterate over sequences (ranges, lists, strings)\nwhile loops continue as long as condition is True\nrange() function: range(stop), range(start, stop), range(start, stop, step)\n\n\n\n2.4.2 Key Points\n# For loops with range\nfor i in range(5):          # 0, 1, 2, 3, 4\nfor i in range(2, 8):       # 2, 3, 4, 5, 6, 7\nfor i in range(1, 10, 2):   # 1, 3, 5, 7, 9\n\n# While loops\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1              # Same as count = count + 1\n\n\n2.4.3 Practice Questions\nPractice 7: What will this for loop print?\nfor i in range(2, 7, 2):\n    print(i)\nPractice 8: Complete this while loop to print numbers 5 down to 1:\nnum = 5\nwhile __________:\n    print(num)\n    __________"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#strings-and-string-operations",
    "href": "materials/7_midterm_study_sheet.html#strings-and-string-operations",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.5 5. Strings and String Operations",
    "text": "2.5 5. Strings and String Operations\n\n2.5.1 What You Need to Know\n\nString indexing: string[0] is first character, string[-1] is last\nString slicing: string[start:end:step]\nString methods: .lower(), .upper(), .replace(), .split(), .strip()\nF-strings: f\"Hello {name}\"\n\n\n\n2.5.2 Key Points\ntext = \"Python\"\n# Indexing (starts at 0)\ntext[0]     # 'P'\ntext[-1]    # 'n' (last character)\n\n# Slicing\ntext[1:4]   # 'yth' (characters 1, 2, 3)\ntext[:3]    # 'Pyt' (first 3 characters)\ntext[2:]    # 'thon' (from position 2 to end)\ntext[::2]   # 'Pto' (every 2nd character)\n\n# F-strings\nname = \"Alice\"\nage = 20\nprint(f\"{name} is {age} years old\")\n\n\n2.5.3 Practice Questions\nPractice 9: Given word = \"Programming\", what do these expressions return?\na) word[3:7]\nb) word[-4:]\nc) word[::3]\nPractice 10: What will this string method output?\nsentence = \"Hello World\"\nprint(sentence.replace(\"World\", \"Python\").upper())"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#lists",
    "href": "materials/7_midterm_study_sheet.html#lists",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.6 6. Lists",
    "text": "2.6 6. Lists\n\n2.6.1 What You Need to Know\n\nLists are mutable (can be changed after creation)\nList indexing and slicing works like strings\nList methods: .append(), .insert(), .remove(), .pop(), .copy()\nList cloning vs list referencing\n\n\n\n2.6.2 Key Points\n# Creating and modifying lists\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"date\")               # Add to end\nfruits.insert(1, \"blueberry\")       # Insert at position 1\nfruits.remove(\"banana\")             # Remove by value\nlast = fruits.pop()                 # Remove and return last item\n\n# Cloning vs Referencing\nlist1 = [1, 2, 3]\nlist2 = list1           # Reference (same list!)\nlist3 = list1.copy()    # Clone (independent copy)\n\n# List comprehensions\nsquares = [x**2 for x in range(5)]     # [0, 1, 4, 9, 16]\nevens = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]\n\n\n2.6.3 Practice Questions\nPractice 11: What will this code output?\nnumbers = [1, 2, 3]\nnumbers.append(4)\nnumbers.insert(0, 0)\nprint(numbers)\nPractice 12: What’s the difference between these two operations?\noriginal = [1, 2, 3]\ncopy_a = original\ncopy_b = original.copy()\noriginal.append(4)"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#tuples",
    "href": "materials/7_midterm_study_sheet.html#tuples",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.7 7. Tuples",
    "text": "2.7 7. Tuples\n\n2.7.1 What You Need to Know\n\nTuples are immutable (cannot be changed after creation)\nUse parentheses instead of square brackets\nTuple unpacking: x, y, z = (1, 2, 3)\nGood for coordinates, RGB values, or any fixed data\n\n\n\n2.7.2 Key Points\n# Creating tuples\npoint = (10, 20)\nrgb = (255, 128, 0)\ninfo = (\"Alice\", 20, \"CS\")\n\n# Accessing elements (like lists)\nx = point[0]        # 10\nname = info[0]      # \"Alice\"\n\n# Tuple unpacking\nx, y = point        # x=10, y=20\nname, age, major = info\n\n\n2.7.3 Practice Questions\nPractice 13: What will this code output?\ndata = (5, 10, 15, 20)\na, b, c, d = data\nprint(a + c)"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#dictionaries",
    "href": "materials/7_midterm_study_sheet.html#dictionaries",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.8 8. Dictionaries",
    "text": "2.8 8. Dictionaries\n\n2.8.1 What You Need to Know\n\nKey-value pairs: {\"key\": \"value\"}\nAccessing values: dict[\"key\"]\nAdding/modifying: dict[\"new_key\"] = \"value\"\nDictionary methods: .keys(), .values(), .items()\n\n\n\n2.8.2 Key Points\n# Creating and using dictionaries\nstudent = {\"name\": \"Bob\", \"age\": 19, \"grade\": 85}\n\n# Accessing and modifying\nname = student[\"name\"]          # \"Bob\"\nstudent[\"age\"] = 20             # Modify existing\nstudent[\"gpa\"] = 3.5            # Add new key-value pair\n\n# Iterating through dictionaries\nfor key, value in student.items():\n    print(f\"{key}: {value}\")\n\n\n2.8.3 Practice Questions\nPractice 14: What will this code output?\nscores = {\"Alice\": 85, \"Bob\": 92, \"Carol\": 78}\nscores[\"Alice\"] = 87\nprint(len(scores))\nprint(scores[\"Bob\"])"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#sets",
    "href": "materials/7_midterm_study_sheet.html#sets",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "2.9 9. Sets",
    "text": "2.9 9. Sets\n\n2.9.1 What You Need to Know\n\nSets contain unique elements (no duplicates)\nSet operations: union (|), intersection (&), difference (-)\nUse curly braces: {1, 2, 3}\n\n\n\n2.9.2 Key Points\n# Creating sets\nnumbers = {3, 1, 4, 1, 5}       # Becomes {1, 3, 4, 5}\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Set operations\nintersection = set1 & set2      # {3, 4}\nunion = set1 | set2             # {1, 2, 3, 4, 5, 6}\ndifference = set1 - set2        # {1, 2}\n\n\n2.9.3 Practice Questions\nPractice 15: What will this set operation return?\nA = {1, 2, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\nresult = A & B"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#exhaustive-enumeration",
    "href": "materials/7_midterm_study_sheet.html#exhaustive-enumeration",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "3.1 Exhaustive Enumeration",
    "text": "3.1 Exhaustive Enumeration\n\nSystematic checking of all possibilities\nUsed for finding perfect squares, cubes, etc.\nLimitation: Only works for integer solutions"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#newtons-method",
    "href": "materials/7_midterm_study_sheet.html#newtons-method",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "3.2 Newton’s Method",
    "text": "3.2 Newton’s Method\n\nIterative approximation technique\nFinds approximate roots of equations\nAdvantage: Very fast convergence\nQuadratic convergence: Error roughly squares each iteration"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#code-tracing-practice",
    "href": "materials/7_midterm_study_sheet.html#code-tracing-practice",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "4.1 Code Tracing Practice",
    "text": "4.1 Code Tracing Practice\nProblem 1: What is the complete output?\nfor i in range(3):\n    for j in range(2):\n        print(f\"({i},{j})\")\nProblem 2: What values do these variables have at the end?\nx = 5\ny = 10\nx, y = y, x + 3\nProblem 3: What will this nested condition print?\nscore = 85\nif score &gt;= 80:\n    if score &gt;= 90:\n        print(\"Excellent\")\n    else:\n        print(\"Good\")\nelse:\n    print(\"Needs improvement\")"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#syntax-errors",
    "href": "materials/7_midterm_study_sheet.html#syntax-errors",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "5.1 Syntax Errors",
    "text": "5.1 Syntax Errors\n\nForgetting colons after if, for, while, def statements\nInconsistent indentation - Python is very strict about this\nUsing = instead of == for comparisons"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#logic-errors",
    "href": "materials/7_midterm_study_sheet.html#logic-errors",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "5.2 Logic Errors",
    "text": "5.2 Logic Errors\n\nOff-by-one errors in ranges and indexing\nConfusing assignment and comparison operators\nNot handling edge cases (empty lists, zero values, etc.)"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#stringlist-confusion",
    "href": "materials/7_midterm_study_sheet.html#stringlist-confusion",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "5.3 String/List Confusion",
    "text": "5.3 String/List Confusion\n\nStrings are immutable, lists are mutable\nString slicing returns a string, not individual characters\nList methods like append() modify the original list"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#before-the-exam",
    "href": "materials/7_midterm_study_sheet.html#before-the-exam",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "6.1 Before the Exam",
    "text": "6.1 Before the Exam\n\nReview all code examples in this study guide\nPractice writing code by hand (no computer!)\nWork through all practice problems\nUnderstand the difference between similar concepts (lists vs tuples, = vs ==)\nGet a good night’s sleep"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#during-the-exam",
    "href": "materials/7_midterm_study_sheet.html#during-the-exam",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "6.2 During the Exam",
    "text": "6.2 During the Exam\n\nRead each question carefully\nTrace through code step by step\nDouble-check your answers\nManage your time (about 3 minutes per question)\nIf stuck, move on and come back"
  },
  {
    "objectID": "materials/7_midterm_study_sheet.html#key-formulas-to-remember",
    "href": "materials/7_midterm_study_sheet.html#key-formulas-to-remember",
    "title": "CS101 Fall 2025 :: Midterm Preparation Guide",
    "section": "6.3 Key Formulas to Remember",
    "text": "6.3 Key Formulas to Remember\n\nRange function: range(start, stop, step)\nString slicing: string[start:end:step]\nList comprehension: [expression for item in iterable if condition]\nF-string format: f\"Text {variable} more text\"\n\n\nGood luck on your midterm! Remember, understanding the concepts is more important than memorizing syntax. Focus on why things work the way they do, and you will be fine! 🐍✨"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#what-makes-heap-sorting-olog-n",
    "href": "materials/10_3_heap_sorting_slides.html#what-makes-heap-sorting-olog-n",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "What Makes Heap Sorting O(log n)?",
    "text": "What Makes Heap Sorting O(log n)?\n\n\n\n\n\n\nThe “Partial Ordering” Strategy 🔄\n\n\nHeaps use smart tree structure to avoid full sorting while maintaining priority access.\n\n\n\n\n\nBinary Min-Heap Property 🌳\n# Heap maintains this invariant:\n# Parent ≤ Children (always!)\n\n#       1 (Heart Attack)\n#      / \\\n#     3   2 (Severe Bleeding)  \n#    / \\ / \\\n#   8  5 7  ?\n\n# Root = minimum priority = highest urgency\n# Height = log₂(n) = maximum steps needed\nKey Properties: - Parent ≤ Children: Every parent node ≤ its children - Complete binary tree: Fills left to right, level by level - Root = Minimum: Smallest element always at top\n\nArray Representation 📊\n# Heap stored as compact array\nIndex:  0  1  2  3  4  5  6\nValue: [1, 3, 2, 8, 5, 7, ?]\n\n# Navigation formulas (no pointers needed!)\ndef get_parent(i):     return (i-1)//2\ndef get_left_child(i): return 2*i + 1  \ndef get_right_child(i): return 2*i + 2\n\n# Why this works:\n# - Complete tree fills left-to-right\n# - Array index maps perfectly to tree position\n# - O(1) parent/child access\nThe Array Advantage: - Space efficient: No pointer overhead - Cache friendly: Elements stored contiguously\n- O(1) navigation: Simple index arithmetic"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#heap-operations---the-olog-n-magic",
    "href": "materials/10_3_heap_sorting_slides.html#heap-operations---the-olog-n-magic",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Heap Operations - The O(log n) Magic!",
    "text": "Heap Operations - The O(log n) Magic!\n\n\n\n\n\n\nHeap Insertion - “Bubble Up” Strategy 📈\n\n\nAdding elements maintains heap property through smart upward movement!\n\n\n\n\n\nVisual Tree Structure 🌳\n       1 (Heart Attack)\n      / \\\n     3   2 (Severe Bleeding)\n    / \\ / \\\n   8  5 7  ?\nKey Insight: Not fully sorted, but minimum always accessible in O(1)!\nThe Heap Promise: - Always know the most urgent patient - Insert new patients efficiently - Remove urgent patients efficiently\n\nHow heappush() Works ⬆️\n# Adding \"Stroke\" (Priority 1):\n\n# Step 1: Insert at end of array\n[1, 3, 2, 8, 5, 7] → [1, 3, 2, 8, 5, 7, 1]\n\n# Step 2: \"Bubble Up\" - Compare with parent\n# 1 &lt; 2 (parent) → Swap!\n[1, 3, 1, 8, 5, 7, 2]\n\n# Step 3: Continue until heap property restored\n# Maximum swaps: log₂(n) levels\n# Time Complexity: O(log n)\n\ndef heappush_explained(heap, value):\n    heap.append(value)        # O(1) - add to end\n    bubble_up(heap, len(heap)-1)  # O(log n) - fix order\nWhy O(log n)? - Tree height = log₂(n) - Bubble up at most one path - Path length ≤ tree height"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#heap-removal---the-bubble-down-strategy",
    "href": "materials/10_3_heap_sorting_slides.html#heap-removal---the-bubble-down-strategy",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Heap Removal - The “Bubble Down” Strategy",
    "text": "Heap Removal - The “Bubble Down” Strategy\n\n\n\n\n\n\nHeap Removal - “Bubble Down” Strategy 📉\n\n\nRemoving the highest priority element maintains heap property through smart downward movement!\n\n\n\n\n\nHow heappop() Works ⬇️\n# Removing highest priority patient:\n\n# Step 1: Remove root (minimum element)\nRemove: 1 (Heart Attack)\nRemaining: [?, 3, 1, 8, 5, 7, 2]\n\n# Step 2: Move last element to root\n[2, 3, 1, 8, 5, 7]\n\n# Step 3: \"Bubble Down\" - Compare with children\n# Choose smaller child and swap if needed\n# 2 &gt; 1 (smaller child) → Swap!\n\ndef heappop_explained(heap):\n    min_val = heap[0]         # O(1) - get minimum\n    heap[0] = heap.pop()      # O(1) - move last to root\n    bubble_down(heap, 0)      # O(log n) - fix order\n    return min_val\n\nThe Bubble Down Process 🔽\n# Visual bubble down process:\n#     2              1\n#    / \\    →       / \\\n#   3   1          3   2\n#  / \\ /          / \\ \n# 8  5 7         8  5 7\n\n# Step-by-step:\n# 1. Compare 2 with children (3, 1)\n# 2. 1 is smaller → swap 2 and 1\n# 3. Continue until heap property restored\n\n# Maximum swaps: log₂(n) levels\n# Time Complexity: O(log n)\nWhy O(log n)? - Tree height = log₂(n) - Bubble down at most one path\n- Path length ≤ tree height - Each comparison is O(1)"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#heap-vs-other-approaches---performance-showdown",
    "href": "materials/10_3_heap_sorting_slides.html#heap-vs-other-approaches---performance-showdown",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Heap vs Other Approaches - Performance Showdown!",
    "text": "Heap vs Other Approaches - Performance Showdown!\nPerformance Comparison 📊: Champion-like Qualities!\n\n\nEfficiency Comparison ⚡\n\n\n\nMethod\nInsert\nRemove Min\nTotal (n ops)\n\n\n\n\nHeap\nO(log n)\nO(log n)\nO(n log n)\n\n\nUnsorted List\nO(1)\nO(n)\nO(n²)\n\n\nSorted List\nO(n)\nO(1)\nO(n²)\n\n\nRe-sort each time\nO(n log n)\nO(1)\nO(n² log n)\n\n\n\nThe Heap Sweet Spot:\n\nBalanced insert/remove performance\nDramatically better than naive approaches\nScales beautifully with priority data\nNo need for full sorting\n\nHeap wins! 🏆\n\nWhen Heaps Shine ✨\n# Emergency room priority queue\n# Even with thousands of patients!\n\n# Real-time priority management\nimport heapq\n\n# Simulation: 1000 patients arriving\npatients = []\nfor i in range(1000):\n    priority = random.randint(1, 10)\n    patient = f\"Patient_{i}\"\n    heapq.heappush(patients, (priority, patient))  # O(log n)\n\n# Always serve highest priority first\nwhile patients:\n    priority, patient = heapq.heappop(patients)  # O(log n)\n    print(f\"Treating: {patient} (Priority {priority})\")\n\n# Total time: O(n log n) for n operations\n# Compare with O(n²) for sorting each time!\n\n# The secret: Partial ordering pays dividends!"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#python-heap-implementation---the-efficient-choice",
    "href": "materials/10_3_heap_sorting_slides.html#python-heap-implementation---the-efficient-choice",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Python Heap Implementation - The Efficient Choice!",
    "text": "Python Heap Implementation - The Efficient Choice!\n\n\n\n\n\n\nExperience the O(log n) Magic! 🧑‍💻\n\n\nSee how Python’s heapq module demonstrates perfect priority ordering.\n\n\n\n\n\nEmergency Room Demo 🏥\nimport heapq\nimport time\n\n# Simulate a hospital emergency room\n# Priority queue: lower number = higher priority\nemergency_room = []\n\n# Add patients with priorities\npatients = [\n    (1, \"Heart Attack\"),    # Highest priority\n    (5, \"Broken Arm\"),\n    (2, \"Severe Bleeding\"),\n    (8, \"Routine Checkup\"), # Lowest priority\n    (3, \"Chest Pain\"),\n    (7, \"Headache\"),\n    (1, \"Stroke\"),          # Also highest priority\n]\n\nprint(\"Adding patients to emergency queue:\")\nfor priority, condition in patients:\n    heapq.heappush(emergency_room, (priority, condition))  # O(log n)\n    print(f\"Added: {condition} (Priority {priority})\")\n\nprint(\"\\nTreating patients in priority order:\")\nwhile emergency_room:\n    priority, condition = heapq.heappop(emergency_room)  # O(log n)\n    print(f\"Treating: {condition} (Priority {priority})\")\n\n# Each operation is O(log n)\n# Total time: O(n log n) for n operations\n# Much better than sorting repeatedly: O(n² log n)!\n\nOutput Example 📋\nAdding patients to emergency queue:\nAdded: Heart Attack (Priority 1)\nAdded: Broken Arm (Priority 5)\nAdded: Severe Bleeding (Priority 2)\nAdded: Routine Checkup (Priority 8)\nAdded: Chest Pain (Priority 3)\nAdded: Headache (Priority 7)\nAdded: Stroke (Priority 1)\n\nTreating patients in priority order:\nTreating: Heart Attack (Priority 1)\nTreating: Stroke (Priority 1)\nTreating: Severe Bleeding (Priority 2)\nTreating: Chest Pain (Priority 3)\nTreating: Broken Arm (Priority 5)\nTreating: Headache (Priority 7)\nTreating: Routine Checkup (Priority 8)\nPerfect priority ordering without full sorting! ✅\nPython’s heapq Advantage: - Highly optimized C implementation - Minimal memory overhead - Simple API design - Built-in to standard library"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#key-insights-how-heap-sorts-search-space",
    "href": "materials/10_3_heap_sorting_slides.html#key-insights-how-heap-sorts-search-space",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Key Insights: How Heap Sorts Search Space",
    "text": "Key Insights: How Heap Sorts Search Space\n\n\n\n\n\n\nHeap’s Sorting Philosophy 🧠\n\n\nHeaps achieve O(log n) through structural invariants rather than full sorting!\n\n\n\n\n\nPartial Ordering Strategy 📊\n\nNot fully sorted like array\nMaintains heap invariant: parent ≤ children\nLazy sorting: Only ensures minimum is accessible\nSmart organization: Structure enables fast access\n\nThe Key Insight:\n\nFull sorting is O(n log n) once\nHeap operations are O(log n) always\nPerfect for dynamic priority management\n\n\nEfficient Operations ⚡\n\nO(log n) insertions: Bubble up one path\nO(log n) deletions: Bubble down one path\nO(1) minimum access: Always at root\nSpace efficient: Array-based, no pointers\n\nPath-Based Efficiency:\n\nTree height limits operation cost\nEach operation follows one root-to-leaf path\nPath length = tree height = O(log n)\nStructure inherently limits complexity!"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#real-world-heap-applications",
    "href": "materials/10_3_heap_sorting_slides.html#real-world-heap-applications",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Real-World Heap Applications",
    "text": "Real-World Heap Applications\n\n\n\n\n\n\nWhere You Use Heaps Every Day! 🌍\n\n\nHeap-based priority queues power many systems you interact with daily.\n\n\n\n\n\nSystem-Level Applications 💻\n# Operating system task scheduling\n# CPU scheduler uses priority heaps\nclass TaskScheduler:\n    def __init__(self):\n        self.tasks = []  # Min-heap by priority\n    \n    def add_task(self, priority, task):\n        heapq.heappush(self.tasks, (priority, task))  # O(log n)\n    \n    def get_next_task(self):\n        return heapq.heappop(self.tasks)[1]  # O(log n)\n\n# Network packet routing\n# Routers prioritize urgent packets first\n\n# Graphics rendering\n# Z-buffer algorithms use priority queues\n\n# Database query optimization\n# Query planners use heaps for join ordering\n\nAlgorithm Applications 🧮\n# Dijkstra's shortest path algorithm\n# Google Maps, GPS navigation\ndef dijkstra_shortest_path(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]  # Priority queue: (distance, node)\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)  # O(log n)\n        \n        for neighbor, weight in graph[current]:\n            distance = current_dist + weight\n            if distance &lt; distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))  # O(log n)\n\n# Huffman coding (file compression)\n# Event simulation systems\n# A* pathfinding in games\n# Machine learning (beam search)\n\nAny scenario needing efficient priority-based access leverages heaps!"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#summary-heap-based-priority-queues---the-smart-organizer",
    "href": "materials/10_3_heap_sorting_slides.html#summary-heap-based-priority-queues---the-smart-organizer",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Summary: Heap-Based Priority Queues - The Smart Organizer!",
    "text": "Summary: Heap-Based Priority Queues - The Smart Organizer!\n\n\n\n\n\n\nKey Takeaways 🎯\n\n\nHeap-based priority queues achieve O(log n) through smart partial ordering!\n\n\n\n\n\nWhat Makes Heaps Special\n\n🏥 Perfect for priorities - always know the most urgent\n🌳 Smart tree structure - height limits operation cost\n⚖️ Balanced performance - O(log n) insert AND remove\n🚀 Incredible scaling - millions of items, ~20 operations max\n\nPython Heap Champions:\n\nEmergency room triage: heapq module\nTask scheduling: priority queues\nPathfinding: Dijkstra’s algorithm\nSystem optimization: balanced performance\n\n\nProgramming Wisdom 💭\n# When to choose heaps:\n\n# For priority-based processing\nimport heapq\nheapq.heappush(tasks, (priority, task))    # O(log n)\nnext_task = heapq.heappop(tasks)           # O(log n)\n\n# For \"top-k\" problems  \n# Find k largest/smallest items efficiently\n\n# For dynamic ordering with frequent updates\n# Better than re-sorting: O(log n) vs O(n log n)\n\n# Remember the trade-off:\n# - O(1): Hash tables, direct access\n# - O(log n): Heaps, trees - organized data  \n# - O(n): Linear search - no organization needed\n\n# Choose heaps when you need efficient priority access!"
  },
  {
    "objectID": "materials/10_3_heap_sorting_slides.html#concluding-thoughts",
    "href": "materials/10_3_heap_sorting_slides.html#concluding-thoughts",
    "title": "Heap-Based Priority Queue: Sorting the Search Space",
    "section": "Concluding Thoughts",
    "text": "Concluding Thoughts\n\n\n\n\n\n\nImportant\n\n\nKey Takeaway: Heaps sort the search space through partial ordering and structural invariants, achieving O(log n) efficiency without full sorting!\nThe magic is in the tree height - it inherently limits the number of operations needed! 🌳\n\n\n\n\n🚀 Ready to implement your own priority systems with O(log n) efficiency! ⚡"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#introduction",
    "href": "materials/6_energy_analysis_slides.html#introduction",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Introduction",
    "text": "Introduction\n\n\n\n\n\n\nResearch Question\n\n\nHow much computational energy does Newton’s method consume when generalized to find any nth root?\n\n\n\n\nNewton’s method is a powerful algorithm for finding roots\nWe’ve generalized it from square roots to any nth root\nWhy does energy matter?\n\n🔋 Battery life in mobile devices\n🌱 Server costs and carbon footprint\n⚡ Real-time system constraints\n📱 IoT and edge computing limitations"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#the-general-algorithm",
    "href": "materials/6_energy_analysis_slides.html#the-general-algorithm",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "The General Algorithm",
    "text": "The General Algorithm\n\ndef newtons_nth_root(n: int, value: float, guess: float = 1.0):\n    \"\"\"Find the nth root of a value using Newton's method\"\"\"\n    tolerance = 0.0001\n    \n    while abs(guess**n - value) &gt; tolerance:\n        # Newton's formula: y_new = y - f(y)/f'(y)\n        # For f(y) = y^n - value:\n        guess_new = guess - (guess**n - value) / (n * guess**(n-1))\n        guess = guess_new\n    \n    return guess\n\n \n\n\n\n\n\n\nMathematical Foundation\n\n\nQuadratic convergence means errors roughly square each iteration!\nThis exponential error reduction is the key to Newton’s energy efficiency."
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#energy-measurement-setup",
    "href": "materials/6_energy_analysis_slides.html#energy-measurement-setup",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Energy Measurement Setup",
    "text": "Energy Measurement Setup\n\n\n\n\nEnergy Tracking Strategy\n\nCount arithmetic operations per iteration\nMeasure wall-clock computation time\n\nTrack convergence behavior\nCompare across different root degrees"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#live-demo-energy-analysis",
    "href": "materials/6_energy_analysis_slides.html#live-demo-energy-analysis",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Live Demo: Energy Analysis",
    "text": "Live Demo: Energy Analysis\n\nimport time\n\ndef newtons_nth_root(n: int, value: float, guess: float = 1.0, verbose: bool = True) -&gt; tuple:\n    \"\"\"Find the nth root of a value using Newton's method with performance analysis.\"\"\"\n    if n &lt;= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if value &lt; 0 and n % 2 == 0:\n        raise ValueError(\"Cannot find even root of negative number\")\n    \n    tolerance = 0.0001\n    iterations = 0\n    operations_count = 0\n    start_time = time.time()\n    \n    while abs(guess**n - value) &gt; tolerance:\n        iterations += 1\n        \n        if verbose:\n            print(f\"Iter {iterations}: guess = {guess:.4f}, error = {abs(guess**n - value):.6f}\")\n        \n        operations_this_iteration = (n-1) + (n-2) + 3 + 2\n        operations_count += operations_this_iteration\n        \n        guess_new = guess - (guess**n - value) / (n * guess**(n-1))\n        guess = guess_new\n    \n    computation_time = time.time() - start_time\n    \n    if verbose:\n        print(f\"✓ Converged in {iterations} iterations\")\n        print(f\"✓ Total operations: {operations_count}\")\n        print(f\"✓ Time: {computation_time:.6f} seconds\")\n    \n    return guess, iterations, computation_time, operations_count"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#results-energy-analysis",
    "href": "materials/6_energy_analysis_slides.html#results-energy-analysis",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Results: Energy Analysis",
    "text": "Results: Energy Analysis\n\n\n\n\n\n\nLive Demonstration\n\n\nWatch Newton’s method converge in real-time with energy tracking!\n\n\n\n\n# Quick demo: Square root of 16\nresult, iters, time_taken, ops = newtons_nth_root(2, 16, verbose=True)\nprint(f\"Result: {result:.6f}\")\n\n\n\nIter 1: guess = 1.0000, error = 15.000000\nIter 2: guess = 8.5000, error = 56.250000\nIter 3: guess = 5.1912, error = 10.948313\nIter 4: guess = 4.1367, error = 1.111995\nIter 5: guess = 4.0023, error = 0.018065\n✓ Converged in 5 iterations\n✓ Total operations: 30\n✓ Time: 0.000352 seconds\nResult: 4.000001\n\n\n\n\n\n\n\n\nKey Observation\n\n\nNotice how quickly it converges - only 2-3 iterations for most calculations!"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#energy-scaling-summary",
    "href": "materials/6_energy_analysis_slides.html#energy-scaling-summary",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Energy Scaling Summary",
    "text": "Energy Scaling Summary\n\n\nInteractive Energy Scaling Summary:\n============================================================\nn= 2:  5 iters,  30 ops,   6.0 ops/iter,  0.008ms\nn= 3:  7 iters,  56 ops,   8.0 ops/iter,  0.006ms\nn= 4: 11 iters, 110 ops,  10.0 ops/iter,  0.007ms\nn= 5: 10 iters, 120 ops,  12.0 ops/iter,  0.006ms\nn= 6: 14 iters, 196 ops,  14.0 ops/iter,  0.009ms\nn= 8: 26 iters, 468 ops,  18.0 ops/iter,  0.017ms\nn=10: 42 iters, 924 ops,  22.0 ops/iter,  0.025ms\n\n💡 Key Insights from Interactive Plot:\n   - Linear scaling: Operations ∝ Root Degree\n   - Consistent iterations: Usually 2-4 for perfect powers\n   - Predictable performance: Energy cost is very manageable!\n\n\n\n\n\n\n\n\nEnergy Efficiency Breakthrough!\n\n\nLinear scaling with root degree means predictable energy costs regardless of calculation complexity!"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#key-energy-findings",
    "href": "materials/6_energy_analysis_slides.html#key-energy-findings",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Key Energy Findings",
    "text": "Key Energy Findings\n\n\nExcellent Scaling Properties\n\nTime Complexity: O(log(precision))\nOperations per iteration: O(n)\nTotal Energy: O(n × log(precision))\nIndependent of input magnitude!\n\n\nConvergence Characteristics\n\nQuadratic convergence rate\nPerfect powers converge faster\nPredictable iteration counts\nMinimal memory usage O(1)\n\n\n\n\n\n\n\n\n🏆 Bottom Line\n\n\nNewton’s method is remarkably energy-efficient due to its quadratic convergence!\nPerfect for: Mobile apps, IoT devices, real-time systems, and green computing initiatives."
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#energy-vs-other-methods",
    "href": "materials/6_energy_analysis_slides.html#energy-vs-other-methods",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Energy vs Other Methods",
    "text": "Energy vs Other Methods\n\n\n\n\n\n\n\n\nMethod\nTime Complexity\nEnergy Dependency\n\n\n\n\nNewton’s Method\nO(n × log(precision))\nIndependent of input size\n\n\nBinary Search\nO(log(value) × log(precision))\nDepends on input magnitude\n\n\nTrial & Error\nO(value^(1/n))\nExponential in input\n\n\nLinear Methods\nO(precision)\nPoor convergence\n\n\n\n\n\n\n\n\n\n🏆 Clear Winner: Newton’s Method!\n\n\nIndependent of input size - this is huge for scalability!"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#practical-energy-implications",
    "href": "materials/6_energy_analysis_slides.html#practical-energy-implications",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Practical Energy Implications",
    "text": "Practical Energy Implications\n\n🔋 Mobile Devices: Fast convergence = longer battery life\n🌱 Data Centers: Predictable costs, lower carbon footprint\n⚡ Real-time Systems: Bounded computation time\n📟 IoT Devices: Suitable for resource-constrained environments\n🔬 Scientific Computing: Efficient for high-precision calculations\n\n\n\n\n\n\n\nEnergy Optimization Tips\n\n\n\nUse good initial guesses to reduce iterations\nAdjust tolerance based on precision needs\nCache results for repeated calculations\nConsider hardware-specific optimizations"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#mathematical-energy-theory",
    "href": "materials/6_energy_analysis_slides.html#mathematical-energy-theory",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Mathematical Energy Theory",
    "text": "Mathematical Energy Theory\nConvergence Formula\n\\[\\text{Error}_{n+1} \\approx \\frac{(\\text{Error}_n)^2}{2 \\cdot f'(\\text{root})}\\]\nEnergy Cost Model\n\\[\\text{Energy} \\propto \\text{Iterations} \\times \\text{Operations per Iteration} \\times \\text{Hardware Efficiency}\\]\n\\[\\text{Energy} \\propto \\log(\\text{precision}) \\times n \\times \\text{constant}\\]\n\n\n\n\n\n\n🧮 Key Mathematical Insight\n\n\nLogarithmic dependence on precision makes it incredibly efficient!\nDouble the precision? Only one more iteration needed!"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#performance-comparison-setup",
    "href": "materials/6_energy_analysis_slides.html#performance-comparison-setup",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Performance Comparison: Setup",
    "text": "Performance Comparison: Setup\n\n# Enhanced comparison: Perfect vs Non-Perfect Powers\ncomparison_data = []\n\n# Extended comparison set\ncomparisons = [\n    ((2, 16, \"√16 (perfect)\"), (2, 15, \"√15 (non-perfect)\")),\n    ((2, 25, \"√25 (perfect)\"), (2, 24, \"√24 (non-perfect)\")),\n    ((3, 27, \"∛27 (perfect)\"), (3, 26, \"∛26 (non-perfect)\")),\n    ((3, 64, \"∛64 (perfect)\"), (3, 63, \"∛63 (non-perfect)\")),\n    ((4, 81, \"⁴√81 (perfect)\"), (4, 80, \"⁴√80 (non-perfect)\")),\n    ((5, 32, \"⁵√32 (perfect)\"), (5, 31, \"⁵√31 (non-perfect)\")),\n]\n\nfor (n1, v1, desc1), (n2, v2, desc2) in comparisons:\n    _, iters1, time1, ops1 = newtons_nth_root(n1, v1, verbose=False)\n    _, iters2, time2, ops2 = newtons_nth_root(n2, v2, verbose=False)\n    \n    comparison_data.extend([\n        {'root_degree': n1, 'type': 'Perfect Power', 'description': desc1, \n         'iterations': iters1, 'operations': ops1, 'time_ms': time1*1000},\n        {'root_degree': n2, 'type': 'Non-Perfect', 'description': desc2, \n         'iterations': iters2, 'operations': ops2, 'time_ms': time2*1000}\n    ])\n\ncomp_df = pd.DataFrame(comparison_data)"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#conclusion-why-newtons-method-wins",
    "href": "materials/6_energy_analysis_slides.html#conclusion-why-newtons-method-wins",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Conclusion: Why Newton’s Method Wins",
    "text": "Conclusion: Why Newton’s Method Wins\n\nQuadratic Convergence: Errors square each iteration\nPredictable Energy Cost: O(n × log(precision))\nScale Independence: Input magnitude doesn’t matter\nHardware Friendly: Simple arithmetic operations\nMemory Efficient: Constant space complexity\nUniversally Applicable: Any nth root with same efficiency"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#questions-discussion",
    "href": "materials/6_energy_analysis_slides.html#questions-discussion",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Questions & Discussion",
    "text": "Questions & Discussion\n\nHow might energy considerations influence algorithm choice in your projects?\n\n\nTry it yourself!\n# Experiment with different roots and values\nresult = newtons_nth_root(7, 128, verbose=True)"
  },
  {
    "objectID": "materials/6_energy_analysis_slides.html#appendix-complete-implementation",
    "href": "materials/6_energy_analysis_slides.html#appendix-complete-implementation",
    "title": "Chapter 4: Computational Energy Analysis of Newton’s Method",
    "section": "Appendix: Complete Implementation",
    "text": "Appendix: Complete Implementation\n\n\nShow complete instrumented function\ndef newtons_nth_root_complete(n: int, value: float, guess: float = 1.0, verbose: bool = True) -&gt; tuple:\n    \"\"\"\n    Complete instrumented version with full energy analysis\n    \"\"\"\n    if n &lt;= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if value &lt; 0 and n % 2 == 0:\n        raise ValueError(\"Cannot find even root of negative number\")\n    \n    tolerance = 0.0001\n    iterations = 0\n    operations_count = 0\n    start_time = time.time()\n    \n    while abs(guess**n - value) &gt; tolerance:\n        iterations += 1\n        \n        if verbose:\n            print(f\"Iteration {iterations}: n = {n}, value = {value}, guess = {guess}\")\n            print(f\"   abs(guess^n - value) = {abs(guess**n - value)}\")\n        \n        # Detailed operation counting\n        operations_this_iteration = (n-1) + (n-2) + 3 + 2\n        operations_count += operations_this_iteration\n        \n        guess_new = guess - (guess**n - value) / (n * guess**(n-1))\n        \n        if verbose:\n            print(f\"   new_guess = {guess_new}\")\n            print(f\"   Operations this iteration: {operations_this_iteration}\")\n        \n        guess = guess_new\n    \n    computation_time = time.time() - start_time\n    \n    if verbose:\n        print(f\"Convergence in {iterations} iterations\")\n        print(f\"Total operations: {operations_count}\")\n        print(f\"Computation time: {computation_time:.6f} seconds\")\n    \n    return guess, iterations, computation_time, operations_count"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#what-are-literals-again",
    "href": "materials/3_ii_introToPython_solutions.html#what-are-literals-again",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "What are literals, Again??",
    "text": "What are literals, Again??\nLet’s Return to Literals (e.g., numbers, strings, booleans, etc.) and work with them in interesting ways using print().\n\n\n\n\n\n\nNote\n\n\nIn Python, print statements with an f prefix before the opening quotation mark denote f-strings, also known as formatted string literals. F-strings provide a concise and readable way to embed expressions inside string literals for formatting output."
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#python-code-sample-with-f-strings",
    "href": "materials/3_ii_introToPython_solutions.html#python-code-sample-with-f-strings",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Python Code Sample with F-strings",
    "text": "Python Code Sample with F-strings\n\n\n\n\n\n\nNote\n\n\nCuriously, both of the below print statements print out the same results, but the code is not the same …\n\n\n\nfirstName = \"Robert\"\nlastName = \"Paulson\"\nprint(f\"His name is: {firstName} {lastName}!\") # f for auto formatting\nprint(\"His name is:\",firstName, lastName,\"!\") # original structure\n\nOutput:\nHis name is: Robert Paulson!\nHis name is: Robert Paulson ! # A space appears?!"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#operators",
    "href": "materials/3_ii_introToPython_solutions.html#operators",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Operators",
    "text": "Operators\nOperators let you do math, compare values, and more!\n\n\n\n\n\n\nImportant\n\n\nExamples:\n\nArithmetic: +, -, *, /, ** (power)\nComparison: ==, !=, &lt;, &gt;\nAssignment: =, +=, -="
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#python-code-sample",
    "href": "materials/3_ii_introToPython_solutions.html#python-code-sample",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Python Code Sample",
    "text": "Python Code Sample\nx = 5\ny = 2\nsum = x + y\nproduct = x * y\nis_equal = (x == y)\nx += 1"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#interesting-application",
    "href": "materials/3_ii_introToPython_solutions.html#interesting-application",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Interesting Application",
    "text": "Interesting Application\nVariables and operators are the backbone of calculators, games, and simulations!"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#loops",
    "href": "materials/3_ii_introToPython_solutions.html#loops",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Loops",
    "text": "Loops\nLoops repeat actions. Use for and while loops."
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#conditionals",
    "href": "materials/3_ii_introToPython_solutions.html#conditionals",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Conditionals",
    "text": "Conditionals\nConditionals let your code make decisions using if, elif, and else.\n\nExamples:\nfor i in range(5):\n    print(i)\n\ncount = 0\nwhile count &lt; 3:\n    print(\"Counting:\", count)\n    count += 1 \n    # Do not forget to increment \n    # the counter, or you will create an infinite loop!\n\n    if x &gt; y:\n        print(\"x is greater!\")\n    elif x == y:\n        print(\"x equals y!\")\n    else:\n        print(\"x is less!\")"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#sort-of-interesting-application",
    "href": "materials/3_ii_introToPython_solutions.html#sort-of-interesting-application",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Sort of Interesting Application",
    "text": "Sort of Interesting Application\nLoops and conditionals can be used to determine positive, negative numbers, or zeros. Neat-O!\n\nExamples:\nnum = 10\nif num &gt; 0:\n    print(\"Positive number\")\nelif num == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n\n\nOutput:\nPositive"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#nested-conditionals",
    "href": "materials/3_ii_introToPython_solutions.html#nested-conditionals",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Nested Conditionals",
    "text": "Nested Conditionals\nYou can nest loops, one inside the other.\n\nExamples:\nnum = 15\nif num &gt;= 0:\n    if num == 0:\n        print(\"Zero\")\n    else:\n        print(\"Positive number\")\nelse:\n    print(\"Negative number\")\n\n\nOutput:\nPositive"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#logical-operator",
    "href": "materials/3_ii_introToPython_solutions.html#logical-operator",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Logical Operator",
    "text": "Logical Operator\nLogical operators use True and False to determine outcomes.\n\nExamples:\na = 10\nb = 20\nif a &gt; 5 and b &gt; 15:\n    print(\"Both conditions are true\")\nif a &gt; 5 or b &lt; 15:\n    print(\"At least one condition is true\")\nif not a &lt; 5:\n    print(\"a is not less than 5\")\n\n\nOutput:\nBoth conditions are true At least one condition is true a is not less than 5"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#string-manipulation",
    "href": "materials/3_ii_introToPython_solutions.html#string-manipulation",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "String Manipulation",
    "text": "String Manipulation\nWe now look at how we can manipulate strings\n\nExamples:\ntext = \"Hello, World!\"\nprint(text.lower())  # hello, world!\nprint(text.upper())  # HELLO, WORLD!\nprint(text.replace(\"World\", \"Python\"))  # Hello, Python!\nprint(text.split(\", \"))  # ['Hello', 'World!']\nprint(text.strip(\"!\"))  # Hello, World"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#lists",
    "href": "materials/3_ii_introToPython_solutions.html#lists",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Lists",
    "text": "Lists\n\nA list is a fundamental data structure in Python used to store an ordered collection of items.\nLists maintain the order of elements, with each item accessible by its index (starting from 0).\nLists are mutable, so their contents can be changed after creation (items can be added, removed, or modified).\nLists can hold items of different data types, including other lists.\nLists are created using square brackets, with elements separated by commas."
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#demo-of-lists",
    "href": "materials/3_ii_introToPython_solutions.html#demo-of-lists",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Demo of Lists",
    "text": "Demo of Lists\n\nExamples:\nmy_list = [1, 2, 3, 4, 5] # definition\nprint(my_list[0])  # Access first element\nmy_list.append(6)  # Add an element to the end\nprint(my_list)  # [1, 2, 3, 4, 5, 6]\nmy_list.remove(3)  # Remove element with value 3\nprint(my_list)  # [1, 2, 4, 5, 6]\nprint(len(my_list))  # Length of the list\n\nOutput:\n1\n[1, 2, 3, 4, 5, 6]\n[1, 2, 4, 5, 6]\n5"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#dictionaries",
    "href": "materials/3_ii_introToPython_solutions.html#dictionaries",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary is a built-in data structure in Python used to store key-value pairs.\nDictionaries are unordered collections (as of Python 3.6+, they maintain insertion order), where each value is accessed using its unique key.\nDictionaries are mutable, so their contents can be changed after creation (items can be added, removed, or modified).\nKeys in a dictionary must be unique and immutable (such as strings, numbers, or tuples), while values can be of any data type.\nDictionaries are created using curly braces {}, with key-value pairs separated by commas and a colon between each key and value."
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#demo-of-dictionaries",
    "href": "materials/3_ii_introToPython_solutions.html#demo-of-dictionaries",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Demo of Dictionaries",
    "text": "Demo of Dictionaries\n\nExamples:\nmy_dict = {\"name\": \"Alice\", \"age\": 25, \"is_student\": True}  # definition\nprint(my_dict[\"name\"])  # Access value by key\nmy_dict[\"age\"] = 26  # Modify value\nmy_dict[\"city\"] = \"New York\"  # Add new key-value pair\nprint(my_dict)  # {'name': 'Alice', 'age': 26, 'is_student': True, 'city': 'New York'}\ndel my_dict[\"is_student\"]  # Remove a key-value pair\nprint(my_dict)  # {'name': 'Alice', 'age': 26, 'city': 'New York'}\nprint(len(my_dict))  # Number of key-value pairs\n\nOutput:\nAlice\n{‘name’: ‘Alice’, ‘age’: 26, ‘is_student’: True, ‘city’: ‘New York’}\n{‘name’: ‘Alice’, ‘age’: 26, ‘city’: ‘New York’}\n3"
  },
  {
    "objectID": "materials/3_ii_introToPython_solutions.html#coding-challenges",
    "href": "materials/3_ii_introToPython_solutions.html#coding-challenges",
    "title": "Chapter 2: Python Programming: Concepts II",
    "section": "Coding Challenges",
    "text": "Coding Challenges\n1. Variables and Operators\nChallenge:\nCreate two variables, a and b, assign them integer values, and print their sum, difference, product, and quotient.\n\nSolution:\na = 10\nb = 5\nprint(\"Sum:\", a + b)\nprint(\"Difference:\", a - b)\nprint(\"Product:\", a * b)\nprint(\"Quotient:\", a / b)"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#tuples-the-unchangeable-twins",
    "href": "materials/7_python_fundamentals_slides.html#tuples-the-unchangeable-twins",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Tuples: The Unchangeable Twins 👯‍♀️",
    "text": "Tuples: The Unchangeable Twins 👯‍♀️\n\n\n\nDefinition\n\n\nTuples are ordered collections of items that are immutable (cannot be changed after creation). Think of them as containers that are sealed shut!\n\n\n\n\n\n\nTypical Use Case: Storing coordinates, RGB color values, or any data that shouldn’t change\n\n\n🔒📦✨"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#tuples-code-example",
    "href": "materials/7_python_fundamentals_slides.html#tuples-code-example",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Tuples: Code Example",
    "text": "Tuples: Code Example\n\n\n\nExample\n\n\n# Creating tuples\ncoordinates = (10, 20)\nrgb_color = (255, 128, 0)  # Orange color\nstudent_info = (\"Alice\", 20, \"Computer Science\")\n\n# Accessing elements\nprint(f\"X coordinate: {coordinates[0]}\")  # Output: 10\nprint(f\"Student name: {student_info[0]}\")  # Output: Alice\n\n\n\n\nWhy this works: Tuples use parentheses and are perfect when you need data that won’t change, like a point on a map!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#tuples-concatenation-indexing-and-slicing",
    "href": "materials/7_python_fundamentals_slides.html#tuples-concatenation-indexing-and-slicing",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Tuples: Concatenation, indexing, and slicing",
    "text": "Tuples: Concatenation, indexing, and slicing\n\n\n\nExample\n\n\n# Like strings, tuples can be concatenated, indexed, and sliced.\nt1 = (1, \"two\", 3)\nt2 = (t1, 3.25) # Note, we include t1 here!\nprint(f\" t2 --&gt; {t2}\")\nprint(f\" (t1 + t2) --&gt; {(t1 + t2)}\")\nprint(f\" (t1 + t2)[3] --&gt;  {(t1 + t2)[3]}\")\nprint(f\" (t1 + t2)[2:5] --&gt; {(t1 + t2)[2:5]}\")\n\n\n t2 --&gt; ((1, 'two', 3), 3.25)\n (t1 + t2) --&gt; (1, 'two', 3, (1, 'two', 3), 3.25)\n (t1 + t2)[3] --&gt;  (1, 'two', 3)\n (t1 + t2)[2:5] --&gt; (3, (1, 'two', 3), 3.25)"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#ranges-code-example",
    "href": "materials/7_python_fundamentals_slides.html#ranges-code-example",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Ranges: Code Example",
    "text": "Ranges: Code Example\n\n\n\nExample: Different range patterns\n\n\nnumbers = range(5)              # 0, 1, 2, 3, 4\nevens = range(2, 11, 2)         # 2, 4, 6, 8, 10\ncountdown = range(10, 0, -1)    # 10, 9, 8, ..., 1\n\n# Using range() in for-loops\nfor i in range(3):\n    print(f\"Round {i + 1}!\")\n\nfor i in countdown: print(i)\n\n\n\n\nWhy this works: Ranges are memory-efficient and perfect for creating predictable number sequences!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#lists-code-example",
    "href": "materials/7_python_fundamentals_slides.html#lists-code-example",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Lists: Code Example",
    "text": "Lists: Code Example\n\n\n\nExample\n\n\n# Creating and modifying lists\nfruits = [\"apple\", \"banana\", \"orange\"]\nprint(f\"Original: {fruits}\")\n\n# Adding items\nfruits.append(\"grape\")\nfruits.insert(1, \"mango\")\nprint(f\"After adding: {fruits}\")\n\n\n\n\nWhy this works: Lists are flexible containers that can grow, shrink, and change - perfect for dynamic data!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#list-cloning-the-wrong-way",
    "href": "materials/7_python_fundamentals_slides.html#list-cloning-the-wrong-way",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "List Cloning: The Wrong Way ❌",
    "text": "List Cloning: The Wrong Way ❌\n\n\n\nDangerous Example\n\n\noriginal = [1, 2, 3, 4, 5]\n\n# Wrong way (creates reference, not copy)\nnot_a_copy = original\nnot_a_copy.append(6)\nprint(f\"Original changed too! {original}\")  \n# Output: [1, 2, 3, 4, 5, 6] - Oops!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#list-cloning-the-right-way",
    "href": "materials/7_python_fundamentals_slides.html#list-cloning-the-right-way",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "List Cloning: The Right Way ✅",
    "text": "List Cloning: The Right Way ✅\n\n\n\nSafe Examples\n\n\noriginal = [1, 2, 3, 4, 5]\n\n# Right ways to clone\ncopy1 = original.copy()\ncopy2 = original[:]\ncopy3 = list(original)\n\ncopy1.append(7)\nprint(f\"Original safe: {original}\")    # [1, 2, 3, 4, 5]\nprint(f\"Copy modified: {copy1}\")       # [1, 2, 3, 4, 5, 7]\n\n\n\n\nWhy this works: Proper cloning creates independent lists, preventing unwanted side effects!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#lists-another-cloning-example",
    "href": "materials/7_python_fundamentals_slides.html#lists-another-cloning-example",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Lists: Another Cloning Example",
    "text": "Lists: Another Cloning Example\n\n\n\nClones\n\n\nL1 = [1,2,3]\nprint(f\"L1 --&gt; {L1}\")\nL2 = L1\nprint(f\" L2 is copy of L1 --&gt; {L2}\")\n\nL1.append(\"100\") # Modify L1\nprint(f\"L1 with appended value--&gt; {L1}\")\nprint(f\" L2 is copy of L1 --&gt; {L2}\")\nL2.append(\"2000\") # Modify L2\nprint(f\"Appending to L2 modifies L1 = {L2}\")\n\n\nL1 --&gt; [1, 2, 3]\n L2 is copy of L1 --&gt; [1, 2, 3]\nL1 with appended value--&gt; [1, 2, 3, '100']\n L2 is copy of L1 --&gt; [1, 2, 3, '100']\nAppending to L2 modifies L1 = [1, 2, 3, '100', '2000']"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#list-comprehensions-traditional-vs-modern",
    "href": "materials/7_python_fundamentals_slides.html#list-comprehensions-traditional-vs-modern",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "List Comprehensions: Traditional vs Modern",
    "text": "List Comprehensions: Traditional vs Modern\n\n\n\nComparison\n\n\n# Traditional way\nsquares = []\nfor x in range(10):\n    squares.append(x**2)\n\n# List comprehension way - much cleaner!\nsquares = [x**2 for x in range(10)]\nprint(squares)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#list-comprehensions-with-conditions",
    "href": "materials/7_python_fundamentals_slides.html#list-comprehensions-with-conditions",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "List Comprehensions: With Conditions",
    "text": "List Comprehensions: With Conditions\n\n\n\nAdvanced Examples\n\n\n# With conditions\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\nprint(even_squares)  # [0, 4, 16, 36, 64]\n\n# String processing\nwords = [\"hello\", \"world\", \"python\", \"rocks\"]\ncaps = [word.upper() for word in words if len(word) &gt; 4]\nprint(caps)  # ['HELLO', 'WORLD', 'PYTHON', 'ROCKS']\n\n\n\n\nWhy this works: List comprehensions are Pythonic, readable, and often faster than traditional loops!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#lists-to-make-tuples",
    "href": "materials/7_python_fundamentals_slides.html#lists-to-make-tuples",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Lists to Make Tuples",
    "text": "Lists to Make Tuples\n\n\n\nCartesian Formatting\n\n\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b']\n\n# Create a list of tuples combining elements from list1 and list2\ncombined_list = [(x, y) for x in list1 for y in list2]\nprint(combined_list)\n\n\n[(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b'), (3, 'a'), (3, 'b')]"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#nested-lists-code-example",
    "href": "materials/7_python_fundamentals_slides.html#nested-lists-code-example",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Nested Lists: Code Example",
    "text": "Nested Lists: Code Example\n\n\n\nExample\n\n\n# Creating nested lists\nshopping_lists = [\n    [\"apples\", \"bananas\", \"oranges\"],      # Fruits\n    [\"carrots\", \"broccoli\", \"spinach\"],    # Vegetables\n    [\"chicken\", \"beef\", \"fish\"]            # Proteins\n]\n\n# Accessing nested elements\nprint(f\"First fruit: {shopping_lists[0][0]}\")      # apples\nprint(f\"Second vegetable: {shopping_lists[1][1]}\")  # broccoli\n\n\n\n\nWhy this works: Nested lists let us organize related data in logical groups, like folders in a filing cabinet!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#d-lists-tic-tac-toe-example",
    "href": "materials/7_python_fundamentals_slides.html#d-lists-tic-tac-toe-example",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "2D Lists: Tic-Tac-Toe Example",
    "text": "2D Lists: Tic-Tac-Toe Example\n\n\n\nExample\n\n\n# Creating a 3x3 tic-tac-toe board\nboard = [\n    [' ', ' ', ' '],\n    [' ', ' ', ' '],\n    [' ', ' ', ' ']\n]\n# Making moves\nboard[0][0] = 'X'  # Top-left\nboard[1][1] = 'O'  # Center\nboard[2][2] = 'X'  # Bottom-right\n\n\n\n\nWhy this works: 2D lists give us row[column] access, perfect for grid-based data and games!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#higher-order-map-and-filter",
    "href": "materials/7_python_fundamentals_slides.html#higher-order-map-and-filter",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Higher-Order: map() and filter()",
    "text": "Higher-Order: map() and filter()\n\n\n\nExample\n\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# map() - apply function to all elements\nsquares = list(map(lambda x: x**2, numbers))\nprint(f\"Squares: {squares}\")  \n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n# filter() - keep elements that meet condition\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(f\"Evens: {evens}\")  # [2, 4, 6, 8, 10]\n\n\n\n\nWhy this works: Higher-order functions let us process entire collections efficiently with functional programming!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#higher-order-functions-1",
    "href": "materials/7_python_fundamentals_slides.html#higher-order-functions-1",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Higher Order Functions",
    "text": "Higher Order Functions\n\n\n\nFunction As Parameters\n\n\nAdd print statements to see what is happening in the code.\ndef apply_to_each(L,f):\n    \"\"\" Assume L is a list, F is a function\n    Mutats L by replacing each element, e, of L by f(e)\"\"\"\n    for i in range(len(L)):\n        print(f\" position : {i}L[i] is now : {L[i]}\")\n        L[i] = f(L[i])\n\nL = [1, -2, 3.33, -5]\nprint(f\"1. L = {L}\")\nprint(\"Apply ABS() to each element of L\")\napply_to_each(L,abs)\nprint(f\"2. L = {L}\")\napply_to_each(L,int)\nprint(f\"3. L = {L}\")\napply_to_each(L,float)\nprint(f\"4. L = {L}\")\nprint(f\"Apply squaring to each element of L : {L}\")\napply_to_each(L, lambda x: x**2)\nprint(f\"5. L = {L}\")\n\n\n1. L = [1, -2, 3.33, -5]\nApply ABS() to each element of L\n position : 0L[i] is now : 1\n position : 1L[i] is now : -2\n position : 2L[i] is now : 3.33\n position : 3L[i] is now : -5\n2. L = [1, 2, 3.33, 5]\n position : 0L[i] is now : 1\n position : 1L[i] is now : 2\n position : 2L[i] is now : 3.33\n position : 3L[i] is now : 5\n3. L = [1, 2, 3, 5]\n position : 0L[i] is now : 1\n position : 1L[i] is now : 2\n position : 2L[i] is now : 3\n position : 3L[i] is now : 5\n4. L = [1.0, 2.0, 3.0, 5.0]\nApply squaring to each element of L : [1.0, 2.0, 3.0, 5.0]\n position : 0L[i] is now : 1.0\n position : 1L[i] is now : 2.0\n position : 2L[i] is now : 3.0\n position : 3L[i] is now : 5.0\n5. L = [1.0, 4.0, 9.0, 25.0]\n\n\n\n\n\n\nThe function apply_to_each() is called higher-order because it has an argument that is itself a function."
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#sequence-types-common-operations",
    "href": "materials/7_python_fundamentals_slides.html#sequence-types-common-operations",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Sequence Types: Common Operations",
    "text": "Sequence Types: Common Operations\n\n\n\nExample\n\n\n# Common operations across sequence types\ntext = \"Hello\"\nnumbers_tuple = (1, 2, 3, 4, 5)\nnumbers_range = range(1, 6)\nnumbers_list = [1, 2, 3, 4, 5]\n\n# Indexing works on all\nprint(f\"String[0]: {text[0]}\")           # H\nprint(f\"Tuple[1]: {numbers_tuple[1]}\")   # 2\nprint(f\"List[2]: {numbers_list[2]}\")     # 3"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#sequence-types-key-differences",
    "href": "materials/7_python_fundamentals_slides.html#sequence-types-key-differences",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Sequence Types: Key Differences",
    "text": "Sequence Types: Key Differences\n\n\n\nMutability Matters!\n\n\n# Slicing works on all\nprint(f\"String slice: {text[1:4]}\")      # ell\nprint(f\"List slice: {numbers_list[1:4]}\") # [2, 3, 4]\n\n# But mutability differs!\n# text[0] = 'h'        # Error! Strings are immutable\n# numbers_tuple[0] = 0  # Error! Tuples are immutable\nnumbers_list[0] = 0    # Works! Lists are mutable\n\n\n\n\nWhy this works: All sequences share similar operations, but mutability determines which operations are allowed!"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#sets-creating-and-basic-operations",
    "href": "materials/7_python_fundamentals_slides.html#sets-creating-and-basic-operations",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Sets: Creating and Basic Operations",
    "text": "Sets: Creating and Basic Operations\n\n\n\nExample\n\n\n# Creating sets\ncolors1 = {\"red\", \"green\", \"blue\", \"red\"}  # Duplicate \"red\" ignored\ncolors2 = {\"blue\", \"yellow\", \"purple\"}\nnumbers = set([1, 2, 2, 3, 3, 3, 4])      # From list\n\nprint(f\"Colors1: {colors1}\")  # {'red', 'green', 'blue'}\nprint(f\"Numbers: {numbers}\")  # {1, 2, 3, 4}\n\ncolors1.add(\"purple\")\nprint(f\"Add purple to Colors1: {colors1}\")  # {'red', 'green', 'blue', 'purple'}\ncolors1.add(\"purple\")\nprint(f\"Add purple to Colors1 (again): {colors1}\")  # {'red', 'green', 'blue', 'purple'}\nOutput:\n\n\nColors1: {'green', 'red', 'blue'}\nNumbers: {1, 2, 3, 4}\nAdd purple to Colors1: {'green', 'red', 'blue', 'purple'}\nAdd purple to Colors1 (again): {'green', 'red', 'blue', 'purple'}"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides.html#sets-mathematical-operations",
    "href": "materials/7_python_fundamentals_slides.html#sets-mathematical-operations",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Sets: Mathematical Operations",
    "text": "Sets: Mathematical Operations\n\n\n\nSet Operations\n\n\n# Creating sets\ncolors1 = {\"red\", \"green\", \"blue\", \"red\"}  # Duplicate \"red\" ignored\ncolors2 = {\"blue\", \"yellow\", \"purple\"}\n# Set operations\ncommon = colors1 & colors2          # Intersection\nall_colors = colors1 | colors2      # Union\nunique_to_1 = colors1 - colors2     # Difference\n\nprint(f\"Common colors: {common}\")       # {'blue'}\nprint(f\"All colors: {all_colors}\")     \n# {'red', 'green', 'blue', 'yellow', 'purple'}\n\n# Fast membership testing\nprint(\"red\" in colors1)  # True - very fast!\nOutput:\n\n\nCommon colors: {'blue'}\nAll colors: {'green', 'red', 'blue', 'yellow', 'purple'}\nTrue\n\n\n\n\n\n\nWhy this works: Sets automatically handle uniqueness and provide super-fast lookups and mathematical operations!"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#what-is-o1---constant-time",
    "href": "materials/10_1_big_o_constant_o1.html#what-is-o1---constant-time",
    "title": "O(1) - CONSTANT TIME",
    "section": "What is O(1) - Constant Time?",
    "text": "What is O(1) - Constant Time?\n\n\n\n\n\n\nThe Superpower of Algorithms ⚡\n\n\nO(1) means the algorithm takes the same amount of time no matter how much data you give it!\nReal-World Analogy: * Like a valet parking service - you hand over your ticket and get your car back instantly * Whether there are 10 cars or 10,000 cars in the lot, it takes the same time! * The valet has a direct system to find your exact car\n\n\n\n\n\nPerformance Guarantee 📊\n\n10 items → 1 step\n100 items → 1 step\n\n1,000,000 items → 1 step\nSame speed forever!\n\n\nKey Insight 🔑\nThe algorithm has a “shortcut” that goes directly to the answer without checking other data!\nMagic Question:\n“Can I get the answer without looking at most of the data?”"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#what-makes-o1-so-fast",
    "href": "materials/10_1_big_o_constant_o1.html#what-makes-o1-so-fast",
    "title": "O(1) - CONSTANT TIME",
    "section": "What Makes O(1) So Fast?",
    "text": "What Makes O(1) So Fast?\n\nThe Secret Ingredients 🎯\nO(1) algorithms use smart data organization and direct access patterns\n\n\n\nHash Tables (Dictionaries/Sets)\n# Python dictionary uses hash function\nstudent_grades = {\n    \"Alice\": 95,\n    \"Bob\": 87,\n    \"Charlie\": 92\n}\n\n# Hash function calculates EXACTLY where \n# \"Alice\" is stored in memory\ngrade = student_grades[\"Alice\"]  # O(1)!\nHow it works:\n\nHash function: \"Alice\" → memory location 147\nGo directly to location 147\nGet the value (95)\nDone! No searching needed!\n\n\nArray Indexing\n# Arrays store data in consecutive memory\nscores = [95, 87, 92, 78, 85]\n#         0   1   2   3   4\n\n# Computer calculates: \n# Address = start_address + (index × item_size)\nfirst_score = scores[0]    # O(1)\nthird_score = scores[2]    # O(1)\nMathematical Magic:\n\nMemory address = Base + (2 × 4 bytes) = Direct jump!\nNo need to check scores[0] or scores[1]\nJump straight to the answer!"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#interactive-o1-dictionary-demo",
    "href": "materials/10_1_big_o_constant_o1.html#interactive-o1-dictionary-demo",
    "title": "O(1) - CONSTANT TIME",
    "section": "Interactive O(1) Dictionary Demo",
    "text": "Interactive O(1) Dictionary Demo\n\n\n\n\n\n\nSee O(1) in Action! 🎮\n\n\nTry looking up different students’ grades. Notice how it’s always instant, no matter which student you choose!\n\n\n\n\n    Student Grade Lookup - O(1) Dictionary Access\n    \n                \n            Choose a student...\n            Alice\n            Bob\n            Charlie\n            Diana\n            Eve\n            Frank\n            Grace\n            Henry\n        \n        Look Up Grade\n        Add New Student\n        Reset\n    \n    \n        \n    \n    \n        Hash Table Size: 8 slots\n        Operations: 0\n        Result: Ready to lookup grades!"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#python-o1-examples---the-fast-ones",
    "href": "materials/10_1_big_o_constant_o1.html#python-o1-examples---the-fast-ones",
    "title": "O(1) - CONSTANT TIME",
    "section": "Python O(1) Examples - The Fast Ones!",
    "text": "Python O(1) Examples - The Fast Ones!\n\n\nDictionary Operations 🗂️\n# Creating a gradebook\ngradebook = {\n    \"Alice\": 95,\n    \"Bob\": 87,\n    \"Charlie\": 92,\n    \"Diana\": 88\n}\n\n# All of these are O(1) - instant!\nalice_grade = gradebook[\"Alice\"]      # Lookup: O(1)\ngradebook[\"Eve\"] = 90                 # Insert: O(1)\ngradebook[\"Bob\"] = 89                 # Update: O(1)\ndel gradebook[\"Charlie\"]              # Delete: O(1)\n\n# Check if student exists\nif \"Diana\" in gradebook:              # Membership: O(1)\n    print(\"Diana is in the class!\")\n\nprint(f\"Class size: {len(gradebook)}\")  # Length: O(1)\n\nList Operations (by index) 📋\n# Student scores list\nscores = [95, 87, 92, 78, 85, 91, 88]\n\n# These are O(1) - direct access\nfirst_score = scores[0]               # Get first: O(1)\nlast_score = scores[-1]               # Get last: O(1)\nmiddle_score = scores[3]              # Get by index: O(1)\n\nprint(f\" Scores BEFORE update = {scores}\")\n\nscores[2] = 94                        # Update by index: O(1)\n                                      # overwrite previous value\nprint(f\" Scores AFTER update = {scores}\")\n                                      \n# Stack operations (end of list)\nscores.append(96)                     # Add to end: O(1)\nfinal_score = scores.pop()            # Remove from end: O(1)\n\nprint(f\"Total scores: {len(scores)}\") # Length: O(1)\n\n\n\n\n\n\n\nImportant Note ⚠️\n\n\nNot all list operations are O(1)!\n\nscores.insert(0, 100) is O(n) - inserting at beginning\nscores.remove(87) is O(n) - searching for value\n87 in scores is O(n) - searching through list"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#partner-activity-o1-experiments",
    "href": "materials/10_1_big_o_constant_o1.html#partner-activity-o1-experiments",
    "title": "O(1) - CONSTANT TIME",
    "section": "Partner Activity: O(1) Experiments! 👥",
    "text": "Partner Activity: O(1) Experiments! 👥\n\n\n\nInstructions: Find a partner and complete these experiments together. Discuss your observations!\n\n\n\n\n\n\nExperiment 1: Dictionary vs List Race\nimport time\nimport random\n\n# Create test data with your partner\ndef create_test_data(size):\n    data = [f\"student_{i}\" for i in range(size)]\n    data_dict = {name: f\"grade_{i}\" for i, name in enumerate(data)}\n    return data, data_dict\n\n# Partner A: Test small dataset (100 items)\n# Partner B: Test large dataset (10,000 items)\nsizes = [100, 10000]  # Choose one each\n\nfor size in sizes:\n    data_list, data_dict = create_test_data(size)\n    target = f\"student_{size-1}\"  # Last item (worst case)\n    \n    # Time list search (O(n))\n    start = time.time()\n    found = target in data_list\n    list_time = time.time() - start\n    \n    # Time dict search (O(1))\n    start = time.time()\n    found = target in data_dict\n    dict_time = time.time() - start\n    \n    print(f\"Size {size}:\")\n    print(f\"  List search: {list_time:.6f} seconds\")\n    print(f\"  Dict search: {dict_time:.6f} seconds\")\n    # zero division precaution: add 0.001 to denominator\n    print(f\"  Dict is {list_time/(dict_time+0.001):.0f}x faster!\")\nDiscussion Questions:\n\nWhat happened to the performance difference as data size increased?\nWhy doesn’t dictionary search time change much?\n\n\nExperiment 2: Hash Table Investigation\n# Build a student grade system together\nstudent_grades = {}\n\n# Partner A: Add students with IDs 1-1000\n# Partner B: Add students with IDs 1001-2000\ndef add_students(start_id, end_id, grades_dict):\n    import time\n    start = time.time()\n    \n    for i in range(start_id, end_id + 1):\n        grades_dict[f\"student_{i}\"] = random.randint(70, 100)\n    \n    end = time.time()\n    return end - start\n\n# Time your additions\npartner_a_time = add_students(1, 1000, student_grades)\npartner_b_time = add_students(1001, 2000, student_grades)\n\n# Now test random lookups\ndef test_lookups(grades_dict, num_tests=100):\n    import time\n    start = time.time()\n    \n    for _ in range(num_tests):\n        random_id = random.randint(1, 2000)\n        grade = grades_dict.get(f\"student_{random_id}\", \"Not found\")\n    \n    return time.time() - start\n\nlookup_time = test_lookups(student_grades)\nprint(f\"Adding 1000 students: ~{partner_a_time:.4f} seconds each\")\nprint(f\"100 lookups in {len(student_grades)} students: {lookup_time:.6f} seconds\")\nPartner Discussion:\n\nDid adding more students slow down individual lookups?\nHow would this compare with a simple list of 2000 students?"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#o1-scenario-analysis-group-discussion-prompts",
    "href": "materials/10_1_big_o_constant_o1.html#o1-scenario-analysis-group-discussion-prompts",
    "title": "O(1) - CONSTANT TIME",
    "section": "O(1) Scenario Analysis: Group Discussion Prompts",
    "text": "O(1) Scenario Analysis: Group Discussion Prompts\n\n\n\n\n\n\nClass Discussion Questions 🤔\n\n\nWork in groups of 3-4. Discuss these scenarios and be ready to share insights!\n\n\n\n\n\n\n\n\n\nImportant\n\n\nDiscuss with your group:\n\nSocial Media Apps: When you open Instagram/TikTok, your profile loads instantly regardless of how many users the app has. What O(1) operations make this possible?\nOnline Shopping: Amazon can instantly tell you if an item is in stock, even with millions of products. How might they achieve O(1) inventory checks?\nVideo Games: In a multiplayer game with thousands of players, you can instantly see your own stats. What data structure enables O(1) player data retrieval?\nSchool Systems: Your student portal shows your GPA instantly, even though the school has thousands of students. What makes this O(1)?\n\nGroup Challenge: Design a simple system for one of these scenarios using Python dictionaries. How would you organize the data for O(1) access?"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#o1-scenario-analysis-critical-thinking",
    "href": "materials/10_1_big_o_constant_o1.html#o1-scenario-analysis-critical-thinking",
    "title": "O(1) - CONSTANT TIME",
    "section": "O(1) Scenario Analysis: Critical Thinking",
    "text": "O(1) Scenario Analysis: Critical Thinking\n\n\n\n\n\n\nClass Discussion Questions 🤔\n\n\nWork in groups of 3-4. Discuss these scenarios and be ready to share insights!\n\n\n\n\n\n\n\n\n\nImportant\n\n\nDiscuss with your group:\n\nTrade-off Analysis: O(1) operations often require extra memory (like hash tables). When is this trade-off worth it? When might it not be?\nFailure Cases: Can you think of situations where a dictionary lookup might NOT be O(1)? (Hint: Think about hash collisions)\nDesign Decisions: You’re building an app that needs to store user preferences. Would you use a list or dictionary? Why? How would your choice affect performance with 1 user vs 1 million users?\nPerformance Prediction: If a dictionary lookup takes 0.001 seconds with 1,000 items, how long should it take with 1,000,000 items? Why?"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#your-turn-practice-o1-operations",
    "href": "materials/10_1_big_o_constant_o1.html#your-turn-practice-o1-operations",
    "title": "O(1) - CONSTANT TIME",
    "section": "Your Turn: Practice O(1) Operations!",
    "text": "Your Turn: Practice O(1) Operations!\n\n\n\n\n\n\nIndividual Coding Exercises 🧑‍💻\n\n\nAfter your group discussions, try these hands-on exercises to solidify your understanding.\n\n\n\n\n\nExercise 1: Phone Book\n# Create your own phone book\nphone_book = {}\n\n# Add contacts (O(1) each)\nphone_book[\"Mom\"] = \"555-0123\"\nphone_book[\"Pizza Place\"] = \"555-PIZZA\"\nphone_book[\"Best Friend\"] = \"555-9999\"\n\n# Look up numbers instantly\nprint(f\"Mom's number: {phone_book['Mom']}\")\n\n# Your task: Add 5 more contacts and \n# time how long it takes to look them up!\n\nimport time\nstart = time.time()\n# Add your lookups here\nend = time.time()\nprint(f\"Lookup time: {end - start} seconds\")\n\nExercise 2: Student Checker\n# Create sets for different classes\nmath_class = {\"Alice\", \"Bob\", \"Charlie\"}\nscience_class = {\"Bob\", \"Diana\", \"Eve\"}\nhistory_class = {\"Alice\", \"Eve\", \"Frank\"}\n\n# Check enrollment instantly (O(1))\nstudent = \"Alice\"\nenrolled_classes = []\n\n# Check to see whether item is in dictionary\n# add subject name to new list if student is enrolled\n\nif student in math_class:\n    enrolled_classes.append(\"Math\")\nif student in science_class:\n    enrolled_classes.append(\"Science\")  \nif student in history_class:\n    enrolled_classes.append(\"History\")\n\nprint(f\"{student} is in: {enrolled_classes}\")\n\n# Your task: Check enrollment for all students\n# and see how fast it is!"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#when-not-to-use-o1-approaches",
    "href": "materials/10_1_big_o_constant_o1.html#when-not-to-use-o1-approaches",
    "title": "O(1) - CONSTANT TIME",
    "section": "When NOT to Use O(1) Approaches",
    "text": "When NOT to Use O(1) Approaches\n\n\n\n\n\n\nO(1) Has Limitations! ⚠️\n\n\nWhile O(1) is amazing, it’s not always possible or practical.\n\n\n\n\n\nWhen O(1) Won’t Work\n# These operations CANNOT be O(1):\n\nscores = [95, 87, 92, 78, 85]\n\n# Finding maximum - must check all values\nmax_score = max(scores)           # O(n) - no shortcut!\n\n# Counting specific values\ncount_90s = scores.count(90)      # O(n) - must check all\n\n# Finding an item in unsorted list\nposition = scores.index(92)       # O(n) - no direct path\n\n# Sorting data\nscores.sort()                     # O(n log n) - complex!\nWhy?\nNo way to know the answer without examining the data!\n\nTrade-offs to Consider\n# Memory vs Speed Trade-off\nstudents = [\"Alice\", \"Bob\", \"Charlie\", \"Diana\"]\n\n# Option 1: List (less memory, slower search)\nif \"Bob\" in students:             # O(n) - slow search\n    print(\"Found Bob!\")\n\n# Option 2: Set (more memory, faster search)  \n# Note: Sets contain only unique items.\n# Although time and energy is required to complete \n# operations involved with creating sets ...\n\nstudent_set = set(students)       # Uses more memory\nif \"Bob\" in student_set:          # O(1) - fast search!\n    print(\"Found Bob!\")\n\n# Choice depends on:\n# - How often do you search?\n# - How much memory do you have?\n# - How large is your data?"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#comparing-o1-to-other-complexities",
    "href": "materials/10_1_big_o_constant_o1.html#comparing-o1-to-other-complexities",
    "title": "O(1) - CONSTANT TIME",
    "section": "Comparing O(1) to Other Complexities",
    "text": "Comparing O(1) to Other Complexities\n\n\n\n\n\n\nSee the Dramatic Difference! 📊\n\n\nLet’s compare O(1) to other complexities with real numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Size\nO(1)\nO(log n)\nO(n)\nO(n²)\nReal-World Impact\n\n\n\n\n10 items\n1 step\n~3 steps\n10 steps\n100 steps\nAll feel instant\n\n\n100 items\n1 step\n~7 steps\n100 steps\n10,000 steps\nO(1) still instant\n\n\n1,000 items\n1 step\n~10 steps\n1,000 steps\n1,000,000 steps\nOnly O(1) stays fast\n\n\n1,000,000 items\n1 step\n~20 steps\n1,000,000 steps\n1,000,000,000,000 steps\nO(1) is superhuman!\n\n\n\n\n\n\n\n\n\nThe O(1) Advantage 🚀\n\n\nDictionary lookup with 1 million entries = Same speed as with 10 entries!\nThis is why Google can search billions of web pages instantly - they use hash tables and other O(1) techniques!"
  },
  {
    "objectID": "materials/10_1_big_o_constant_o1.html#summary-o1---the-algorithm-superhero",
    "href": "materials/10_1_big_o_constant_o1.html#summary-o1---the-algorithm-superhero",
    "title": "O(1) - CONSTANT TIME",
    "section": "Summary: O(1) - The Algorithm Superhero!",
    "text": "Summary: O(1) - The Algorithm Superhero!\n\n\n\n\n\n\nKey Takeaways 🎯\n\n\nO(1) - Constant Time is the gold standard of algorithm efficiency!\n\n\n\n\n\nWhat Makes O(1) Special\n\n🔥 Always the same speed - no matter how much data\n🎯 Direct access patterns - no searching required\n\n💡 Smart data structures - hash tables, arrays\n⚡ Real-world applications - Google search, databases, caches\n\nPython O(1) Champions:\n\nDictionary operations: dict[key], dict[key] = value\nSet operations: item in set, set.add(item)\nList indexing: list[0], list[-1]\nStack operations: list.append(), list.pop()\n\n\nProgramming Wisdom 💭\n# Choose your data structure wisely!\n\n# For frequent lookups\nuse_dict = {\"key\": \"value\"}        # O(1) lookup\n# not_list = [\"key\", \"value\"]      # O(n) lookup\n\n# For membership testing  \nuse_set = {1, 2, 3, 4, 5}         # O(1) testing\n# not_list = [1, 2, 3, 4, 5]      # O(n) testing\n\n# For indexed access\nuse_list = [1, 2, 3, 4, 5]        # O(1) by index\n# Perfect for stacks and queues\nRemember: O(1) is not always possible, but when it is, it’s magical! 🪄"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#get-ready-for-the-lambda-functions",
    "href": "materials/8_lambdaFunctions_i.html#get-ready-for-the-lambda-functions",
    "title": "Chapter 5: Lambda Functions",
    "section": "Get Ready for the Lambda Functions!",
    "text": "Get Ready for the Lambda Functions!"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#any-limitations-to-lambda-functions",
    "href": "materials/8_lambdaFunctions_i.html#any-limitations-to-lambda-functions",
    "title": "Chapter 5: Lambda Functions",
    "section": "Any Limitations to Lambda Functions?",
    "text": "Any Limitations to Lambda Functions?\n\n\n\n\n\n\nImportant\n\n\nLimitations:\n\nLambda functions are restricted to a single expression.\nThey cannot contain statements like assignments, if-else, or for loops within their definition.\nThey are primarily used for simple, short operations.\nFor more complex logic, a named function is more appropriate;\n\ndef myFunction():"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-functions-the-basics",
    "href": "materials/8_lambdaFunctions_i.html#lambda-functions-the-basics",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda Functions: The Basics",
    "text": "Lambda Functions: The Basics\n\n\n\nBasic Syntax\n\n\n# Lambda syntax: lambda arguments: expression\n\n# Regular function\ndef square(x):\n    return x * x\n\n# Lambda equivalent\nsquare_lambda = lambda x: x * x\n\n# Using both\nprint(square(5))        # Output: 25\nprint(square_lambda(5)) # Output: 25\n\n\n\n\nKey Point: Lambda functions are expressions, not statements - they return a value immediately!"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-functions-multiple-arguments",
    "href": "materials/8_lambdaFunctions_i.html#lambda-functions-multiple-arguments",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda Functions: Multiple Arguments",
    "text": "Lambda Functions: Multiple Arguments\n\n\n\nMore Examples\n\n\n# Multiple arguments\nadd = lambda x, y: x + y\nmultiply = lambda x, y, z: x * y * z\n\n# With default arguments\ngreet = lambda name=\"World\": f\"Hello, {name}!\"\n\nprint(add(3, 5))           # Output: 8\nprint(multiply(2, 3, 4))   # Output: 24\nprint(greet())             # Output: Hello, World!\nprint(greet(\"Alice\"))      # Output: Hello, Alice!\n\n\n\n\nWhy this works: Lambda functions can handle multiple parameters just like regular functions!"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#quick-challenge-1-2-minutes",
    "href": "materials/8_lambdaFunctions_i.html#quick-challenge-1-2-minutes",
    "title": "Chapter 5: Lambda Functions",
    "section": "🤝 Quick Challenge #1 (2 minutes)",
    "text": "🤝 Quick Challenge #1 (2 minutes)\n\n\n\nYour Turn: Basic Lambda Practice\n\n\nChallenge: Create lambda functions for these operations:\n\nA lambda that calculates the area of a circle: π * r²\nA lambda that converts Fahrenheit to Celsius: (f - 32) * 5/9\nA lambda that finds the maximum max() of three numbers\nA lambda that finds the minimum min() of three numbers\n\nStarter Code:\nimport math\n\n# Your lambda functions here\ncircle_area = lambda r: # Complete this\nfahrenheit_to_celsius = lambda f: # Complete this  \nmax_three = lambda a, b, c: # Complete this\nmin_three = lambda a, b, c: # Complete this\n\n# Test your functions\nprint(circle_area(5))\nprint(fahrenheit_to_celsius(68))\nprint(max_three(10, 20, 15))\nprint(min_three(10, 20, 15))"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#challenge-1-solutions",
    "href": "materials/8_lambdaFunctions_i.html#challenge-1-solutions",
    "title": "Chapter 5: Lambda Functions",
    "section": "Challenge #1 Solutions",
    "text": "Challenge #1 Solutions\n\n\n\nSolutions\n\n\nimport math\n\n# Solution 1: Circle area\ncircle_area = lambda r: math.pi * r * r\n\n# Solution 2: Fahrenheit to Celsius\nfahrenheit_to_celsius = lambda f: (f - 32) * 5/9\n\n# Solution 3: Maximum of three numbers\nmax_three = lambda a, b, c: max(a, max(b, c))\n# Alternative: max_three = lambda a, b, c: max(a, b, c)\n\n# Solution 4: Minimum of three numbers (in a list)\nmyVals = [10, 20, 15]\nmin_three = lambda thisValue: min(thisValue)\nprint(myVals)\nprint(min_three(myVals))\n\n# Test results\nprint(f\"Circle area (r=5): {circle_area(5):.2f}\")      # 78.54\nprint(f\"68°F in Celsius: {fahrenheit_to_celsius(68)}\")  # 20.0\nprint(f\"Max of 10,20,15: {max_three(10, 20, 15)}\")     # 20\nprint(f\"Min of 10,20,15: {min_three(10, 20, 15)}\")     # 10"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#meet-your-new-best-friends",
    "href": "materials/8_lambdaFunctions_i.html#meet-your-new-best-friends",
    "title": "Chapter 5: Lambda Functions",
    "section": "Meet Your New Best Friends! 👋",
    "text": "Meet Your New Best Friends! 👋\n\n\n\nEssential Built-in Functions\n\n\n🗺️ map(function, iterable)\nApplies a function to every item in a list/iterable\nThink: “Transform every item”\n🔍 filter(function, iterable)\nKeeps only items where function returns True\nThink: “Keep only items that pass the test”\n📊 sorted(iterable, key=function)\nReturns a new sorted list using function for comparison\nThink: “Arrange items by custom criteria”\n📋 list(iterable)\nConverts any iterable (map/filter results) into a list\nThink: “Make it a proper list I can print/use”\n\n\n\n\n\n\nPro Tip: map() and filter() return special objects - use list() to see the actual results!\n\n\n🎭✨🎪"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-vs-regular-comparison",
    "href": "materials/8_lambdaFunctions_i.html#lambda-vs-regular-comparison",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda vs Regular: Comparison",
    "text": "Lambda vs Regular: Comparison\n\n\n\nSide-by-Side Comparison\n\n\n# ✅ Good use of lambda - simple, clear\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\n\n# ❌ Bad use of lambda - too complex\ncomplex_lambda = lambda x: x**2 if x &gt; 0 else -x**2 if x &lt; 0 else 0\n\n# ✅ Better as regular function\ndef process_number(x):\n    if x &gt; 0:\n        return x**2\n    elif x &lt; 0:\n        return -x**2\n    else:\n        return 0\n\n\n\n\nRemember: Lambda functions should be simple and readable!"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-with-map",
    "href": "materials/8_lambdaFunctions_i.html#lambda-with-map",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda with map()",
    "text": "Lambda with map()\n\n\n\nTransform All Elements\n\n\n# Transform all elements in a list\nnumbers = [1, 2, 3, 4, 5]\nnames = [\"alice\", \"bob\", \"charlie\"]\n\n# Square all numbers\nsquared = list(map(lambda x: x**2, numbers))\nprint(f\"Squared: {squared}\")  # [1, 4, 9, 16, 25]\n\n# Capitalize all names\ncapitalized = list(map(lambda name: name.title(), names))\nprint(f\"Capitalized: {capitalized}\")  # ['Alice', 'Bob', 'Charlie']\n\n# Multiple lists\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nsums = list(map(lambda x, y: x + y, nums1, nums2))\nprint(f\"Sums: {sums}\")  # [5, 7, 9]"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-with-filter",
    "href": "materials/8_lambdaFunctions_i.html#lambda-with-filter",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda with filter()",
    "text": "Lambda with filter()\n\n\n\nKeep Only What You Want\n\n\n# Filter elements based on condition\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\n# Keep only even numbers\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(f\"Evens: {evens}\")  # [2, 4, 6, 8, 10]\n\n# Keep only long words\nlong_words = list(filter(lambda word: len(word) &gt; 5, words))\nprint(f\"Long words: {long_words}\")  # ['banana', 'cherry', 'elderberry']\n\n# Keep positive numbers\nmixed = [-3, -1, 0, 2, 5, -7, 9]\npositives = list(filter(lambda x: x &gt; 0, mixed))\nprint(f\"Positives: {positives}\")  # [2, 5, 9]"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-with-sorted",
    "href": "materials/8_lambdaFunctions_i.html#lambda-with-sorted",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda with sorted()",
    "text": "Lambda with sorted()\n\n\n\nCustom Sorting Logic\n\n\n# Sort with custom criteria\nstudents = [\n    {\"name\": \"Alice\", \"grade\": 85},\n    {\"name\": \"Bob\", \"grade\": 92},\n    {\"name\": \"Charlie\", \"grade\": 78},\n    {\"name\": \"Diana\", \"grade\": 96}\n]\n\nwords = [\"banana\", \"pie\", \"Washington\", \"book\"]\n\n# Sort students by grade (descending)\nby_grade = sorted(students, key=lambda student: student[\"grade\"], reverse=True)\nprint(\"Top student:\", by_grade[0][\"name\"])  # Diana\n\n# Sort words by length\nby_length = sorted(words, key=lambda word: len(word))\nprint(f\"By length: {by_length}\")  # ['pie', 'book', 'banana', 'Washington']\n\n# Sort words by last letter\nby_last_letter = sorted(words, key=lambda word: word[-1])\nprint(f\"By last letter: {by_last_letter}\")  # ['banana', 'pie', 'book', 'Washington']"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#quick-challenge-2-3-minutes",
    "href": "materials/8_lambdaFunctions_i.html#quick-challenge-2-3-minutes",
    "title": "Chapter 5: Lambda Functions",
    "section": "🤝 Quick Challenge #2 (3 minutes)",
    "text": "🤝 Quick Challenge #2 (3 minutes)\n\n\n\nYour Turn: Lambda with Built-ins\n\n\nChallenge: Use lambda functions with map(), filter(), and sorted():\n# Given data\ntemperatures_f = [32, 68, 86, 104, 212]  # Fahrenheit\nprices = [10.99, 23.45, 5.67, 45.00, 12.34]\nproducts = [\n    {\"name\": \"laptop\", \"price\": 999.99, \"rating\": 4.5},\n    {\"name\": \"mouse\", \"price\": 25.50, \"rating\": 4.2},\n    {\"name\": \"keyboard\", \"price\": 75.00, \"rating\": 4.8},\n    {\"name\": \"monitor\", \"price\": 299.99, \"rating\": 4.3}\n]\n\n# Your tasks:\n# 1. Convert temperatures to Celsius using map()\n# 2. Find prices under $20 using filter()\n# 3. Sort products by rating (highest first) using sorted()"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#challenge-2-solutions",
    "href": "materials/8_lambdaFunctions_i.html#challenge-2-solutions",
    "title": "Chapter 5: Lambda Functions",
    "section": "Challenge #2 Solutions",
    "text": "Challenge #2 Solutions\n\n\n\nSolutions\n\n\n# 1. Convert temperatures to Celsius\ncelsius = list(map(lambda f: (f - 32) * 5/9, temperatures_f))\nprint(f\"Celsius: {[round(temp, 1) for temp in celsius]}\")\n# [0.0, 20.0, 30.0, 40.0, 100.0]\n\n# 2. Find prices under $20\ncheap_prices = list(filter(lambda price: price &lt; 20, prices))\nprint(f\"Under $20: {cheap_prices}\")  # [10.99, 5.67, 12.34]\n\n# 3. Sort products by rating (highest first)\nby_rating = sorted(products, key=lambda p: p[\"rating\"], reverse=True)\nprint(\"Best rated:\", by_rating[0][\"name\"])  # keyboard\nfor product in by_rating:\n    print(f\"{product['name']}: {product['rating']}\")"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#more-helpful-functions",
    "href": "materials/8_lambdaFunctions_i.html#more-helpful-functions",
    "title": "Chapter 5: Lambda Functions",
    "section": "More Helpful Functions! 🎯",
    "text": "More Helpful Functions! 🎯\n\n\n\nAdditional Built-in Functions\n\n\n➕ sum(iterable)\nAdds up all numbers in a list/iterable\nThink: “Give me the total of all these numbers”\n🔍 len(iterable)\nReturns the count of items in a collection\nThink: “How many items are there?”\n🏆 max(iterable, key=function)\nFinds the largest item (optionally using key function)\nThink: “Which item is the biggest/best?”\n🎲 set(iterable)\nCreates a collection with only unique items\nThink: “Remove all duplicates”\n\n\n\n\n\n\nFun Fact: These functions work great with the results from map() and filter()!\n\n\n🧮🎪🌟"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#real-world-example",
    "href": "materials/8_lambdaFunctions_i.html#real-world-example",
    "title": "Chapter 5: Lambda Functions",
    "section": "Real-World Example",
    "text": "Real-World Example\n\n\n\n\n\n\nNote\n\n\nSales Data Processing\n# Sales data from a CSV or database\nsales_data = [\n    {\"product\": \"Laptop\", \"price\": 999.99, \"quantity\": 2, \"discount\": 0.1},\n    {\"product\": \"Mouse\", \"price\": 25.50, \"quantity\": 5, \"discount\": 0.0},\n    {\"product\": \"Keyboard\", \"price\": 75.00, \"quantity\": 3, \"discount\": 0.05},\n    {\"product\": \"Monitor\", \"price\": 299.99, \"quantity\": 1, \"discount\": 0.15}\n]\n\n# Calculate total revenue with discounts\ntotal_revenue = sum(map(\n    lambda sale: sale[\"price\"] * sale[\"quantity\"] * (1 - sale[\"discount\"]),\n    sales_data\n))\nprint(f\"Total Revenue: ${total_revenue:.2f}\")\n\n# Find high-value sales (over $200 after discount)\nhigh_value = list(filter(\n    lambda sale: sale[\"price\"] * sale[\"quantity\"] * (1 - sale[\"discount\"]) &gt; 200,\n    sales_data\n))\nprint(f\"High-value sales: {len(high_value)}\")\nOutput:\n\n\nTotal Revenue: $2396.22\nHigh-value sales: 3"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#real-world-example-1",
    "href": "materials/8_lambdaFunctions_i.html#real-world-example-1",
    "title": "Chapter 5: Lambda Functions",
    "section": "Real-World Example",
    "text": "Real-World Example\n\n\n\n\n\n\nNote\n\n\nWeb Development\n# User registration data\nusers = [\n    {\"email\": \"alice@email.com\", \"age\": 25, \"active\": True},\n    {\"email\": \"bob@email.com\", \"age\": 17, \"active\": False},\n    {\"email\": \"charlie@email.com\", \"age\": 30, \"active\": True},\n    {\"email\": \"diana@email.com\", \"age\": 16, \"active\": True}\n]\n\n# Get active adult users\nactive_adults = list(filter(\n    lambda user: user[\"active\"] and user[\"age\"] &gt;= 18,\n    users\n))\n\n# Extract just the email addresses\nadult_emails = list(map(lambda user: user[\"email\"], active_adults))\nprint(\"Adult user emails:\", adult_emails)\n\n# Sort users by age\nby_age = sorted(users, key=lambda user: user[\"age\"])\nprint(\"Youngest user:\", by_age[0][\"email\"])\nOutput:\n\n\nAdult user emails: ['alice@email.com', 'charlie@email.com']\nYoungest user: diana@email.com"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#real-world-example-2",
    "href": "materials/8_lambdaFunctions_i.html#real-world-example-2",
    "title": "Chapter 5: Lambda Functions",
    "section": "Real-World Example",
    "text": "Real-World Example\n\n\n\n\n\n\nNote\n\n\nAnalytic Computing\nimport math\n\n# Experimental data points\ndata_points = [\n    {\"x\": 1, \"y\": 2.1, \"error\": 0.1},\n    {\"x\": 2, \"y\": 4.2, \"error\": 0.2},\n    {\"x\": 3, \"y\": 5.8, \"error\": 0.15},\n    {\"x\": 4, \"y\": 8.1, \"error\": 0.25}\n]\n\n# Calculate distances from origin\ndistances = list(map(\n    lambda point: math.sqrt(point[\"x\"]**2 + point[\"y\"]**2),\n    data_points\n))\n\n# Filter points with low error (high precision)\nprecise_points = list(filter(\n    lambda point: point[\"error\"] &lt; 0.2,\n    data_points\n))\n\n# Sort by significance (y/error ratio)\nby_significance = sorted(\n    data_points,\n    key=lambda point: point[\"y\"] / point[\"error\"],\n    reverse=True\n)\nprint(\"Most significant point:\", by_significance[0])\nOutput:\n\n\nMost significant point: {'x': 3, 'y': 5.8, 'error': 0.15}"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#real-world-example-3",
    "href": "materials/8_lambdaFunctions_i.html#real-world-example-3",
    "title": "Chapter 5: Lambda Functions",
    "section": "Real-World Example",
    "text": "Real-World Example\n\n\n\n\n\n\nNote\n\n\nGUI (Button Click) Event Handling\n# Simulating GUI framework (like tkinter)\nclass Button:\n    def __init__(self, text, command=None):\n        self.text = text\n        self.command = command\n    \n    def click(self):\n        if self.command:\n            self.command()\n\n# Creating buttons with lambda commands\nbuttons = [\n    Button(\"Save\", lambda: print(\"File saved!\")),\n    Button(\"Load\", lambda: print(\"File loaded!\")),\n    Button(\"Exit\", lambda: print(\"Goodbye!\"))\n]\n\n# Dynamic button creation with different actions\nfor i in range(3):\n    button = Button(f\"Button {i+1}\", lambda num=i: print(f\"Clicked button {num+1}\"))\n    buttons.append(button)\n\n# Simulate button clicks\nfor button in buttons:\n    button.click()\nOutput:\n\n\nFile saved!\nFile loaded!\nGoodbye!\nClicked button 1\nClicked button 2\nClicked button 3\n\n\n\n\n\n\nNote: We will talk about classes soon! 🐍✨"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#challenge-3-real-world-practice-5-minutes",
    "href": "materials/8_lambdaFunctions_i.html#challenge-3-real-world-practice-5-minutes",
    "title": "Chapter 5: Lambda Functions",
    "section": "🤝 Challenge #3: Real-World Practice (5 minutes)",
    "text": "🤝 Challenge #3: Real-World Practice (5 minutes)\n\n\n\nYour Turn: E-commerce Data Processing\n\n\nYou’re working for an online store. Process this customer data:\ncustomers = [\n    {\"name\": \"Alice\", \"age\": 28, \"purchases\": [45.99, 23.50, 67.25], \"member\": True},\n    {\"name\": \"Bob\", \"age\": 35, \"purchases\": [12.99, 89.00], \"member\": False},\n    {\"name\": \"Charlie\", \"age\": 22, \"purchases\": [156.00, 45.50, 23.25, 78.90], \"member\": True},\n    {\"name\": \"Diana\", \"age\": 45, \"purchases\": [234.50], \"member\": True}\n]\n\n# Your tasks using lambda functions:\n# 1. Calculate total spent by each customer\n# 2. Find VIP customers (members who spent &gt; $100)\n# 3. Sort customers by average purchase amount\n# 4. Get names of customers under 30"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#challenge-3-solutions",
    "href": "materials/8_lambdaFunctions_i.html#challenge-3-solutions",
    "title": "Chapter 5: Lambda Functions",
    "section": "Challenge #3 Solutions",
    "text": "Challenge #3 Solutions\n\n\n\nE-commerce Solutions\n\n\n# 1. Calculate total spent by each customer\ncustomers_with_totals = list(map(\n    lambda c: {**c, \"total_spent\": sum(c[\"purchases\"])},\n    customers\n))\n\n# 2. Find VIP customers (members who spent &gt; $100)\nvip_customers = list(filter(\n    lambda c: c[\"member\"] and sum(c[\"purchases\"]) &gt; 100,\n    customers\n))\nprint(\"VIP customers:\", [c[\"name\"] for c in vip_customers])\n\n# 3. Sort customers by average purchase amount\nby_avg_purchase = sorted(\n    customers,\n    key=lambda c: sum(c[\"purchases\"]) / len(c[\"purchases\"]),\n    reverse=True\n)\nprint(\"Highest avg purchase:\", by_avg_purchase[0][\"name\"])\n\n# 4. Get names of customers under 30\nyoung_customers = list(map(\n    lambda c: c[\"name\"],\n    filter(lambda c: c[\"age\"] &lt; 30, customers)\n))\nprint(\"Young customers:\", young_customers)"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-best-practices-dos-and-donts",
    "href": "materials/8_lambdaFunctions_i.html#lambda-best-practices-dos-and-donts",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda Best Practices: Do’s and Don’ts",
    "text": "Lambda Best Practices: Do’s and Don’ts\n\n\n\nGuidelines\n\n\n✅ DO:\n# Simple, clear operations\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\nevens = list(filter(lambda x: x % 2 == 0, numbers))\n\n# Short data transformations\nusers = [{\"name\": \"Alice\", \"age\": 25}]\nnames = list(map(lambda u: u[\"name\"], users))\n❌ DO NOT:\n# Too complex for lambda\ncomplex_func = lambda x: x**2 if x &gt; 0 else abs(x) if x &lt; 0 else \"zero\"\n\n# Multiple statements (impossible in lambda anyway)\n# This won't work:\n# bad_lambda = lambda x: print(x); return x**2"
  },
  {
    "objectID": "materials/8_lambdaFunctions_i.html#lambda-limitations-and-alternatives",
    "href": "materials/8_lambdaFunctions_i.html#lambda-limitations-and-alternatives",
    "title": "Chapter 5: Lambda Functions",
    "section": "Lambda Limitations and Alternatives",
    "text": "Lambda Limitations and Alternatives\n\n\n\nWhen Lambda Is not Enough\n\n\n# ❌ Lambda cannot do multiple statements\n# Need regular function for this:\ndef process_grade(score):\n    print(f\"Processing score: {score}\")  # Side effect\n    if score &gt;= 90:\n        return \"A\"\n    elif score &gt;= 80:\n        return \"B\"\n    else:\n        return \"C\"\n\n# ✅ Lambda for simple conditions\ngrade_simple = lambda score: \"Pass\" if score &gt;= 60 else \"Fail\"\n\n# ❌ Lambda cannot include assignments\n# Need regular function:\ndef calculate_with_logging(x):\n    result = x**2 + 2*x + 1  # Assignment\n    print(f\"Calculated: {result}\")\n    return result"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#what-are-literals-again",
    "href": "materials/3_ii_introToPython.html#what-are-literals-again",
    "title": "Python Programming: Concepts II",
    "section": "What are literals, Again??",
    "text": "What are literals, Again??\nLet’s Return to Literals (e.g., numbers, strings, booleans, etc.) and work with them in interesting ways using print().\n\n\n\n\n\n\nNote\n\n\nIn Python, print statements with an f prefix before the opening quotation mark denote f-strings, also known as formatted string literals. F-strings provide a concise and readable way to embed expressions inside string literals for formatting output."
  },
  {
    "objectID": "materials/3_ii_introToPython.html#python-code-sample-with-f-strings",
    "href": "materials/3_ii_introToPython.html#python-code-sample-with-f-strings",
    "title": "Python Programming: Concepts II",
    "section": "Python Code Sample with F-strings",
    "text": "Python Code Sample with F-strings\n\n\n\n\n\n\nNote\n\n\nCuriously, both of the below print statements print out the same results, but the code is not the same …\n\n\n\nfirstName = \"Robert\"\nlastName = \"Paulson\"\nprint(f\"His name is: {firstName} {lastName}!\") # f for auto formatting\nprint(\"His name is:\",firstName, lastName,\"!\") # original structure\n\nOutput:\nHis name is: Robert Paulson!\nHis name is: Robert Paulson ! # A space appears?!"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#operators",
    "href": "materials/3_ii_introToPython.html#operators",
    "title": "Python Programming: Concepts II",
    "section": "Operators",
    "text": "Operators\nOperators let you do math, compare values, and more!\n\n\n\n\n\n\nImportant\n\n\nExamples:\n\nArithmetic: +, -, *, /, ** (power)\nComparison: ==, !=, &lt;, &gt;\nAssignment: =, +=, -="
  },
  {
    "objectID": "materials/3_ii_introToPython.html#python-code-sample",
    "href": "materials/3_ii_introToPython.html#python-code-sample",
    "title": "Python Programming: Concepts II",
    "section": "Python Code Sample",
    "text": "Python Code Sample\nx = 5\ny = 2\nsum = x + y\nproduct = x * y\nis_equal = (x == y)\nx += 1"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#interesting-application",
    "href": "materials/3_ii_introToPython.html#interesting-application",
    "title": "Python Programming: Concepts II",
    "section": "Interesting Application",
    "text": "Interesting Application\nVariables and operators are the backbone of calculators, games, and simulations!"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#loops",
    "href": "materials/3_ii_introToPython.html#loops",
    "title": "Python Programming: Concepts II",
    "section": "Loops",
    "text": "Loops\nLoops repeat actions. Use for and while loops."
  },
  {
    "objectID": "materials/3_ii_introToPython.html#conditionals",
    "href": "materials/3_ii_introToPython.html#conditionals",
    "title": "Python Programming: Concepts II",
    "section": "Conditionals",
    "text": "Conditionals\nConditionals let your code make decisions using if, elif, and else.\n\nExamples:\nfor i in range(5):\n    print(i)\n\ncount = 0\nwhile count &lt; 3:\n    print(\"Counting:\", count)\n    count += 1 \n    # Do not forget to increment \n    # the counter, or you will create an infinite loop!\n\n    if x &gt; y:\n        print(\"x is greater!\")\n    elif x == y:\n        print(\"x equals y!\")\n    else:\n        print(\"x is less!\")"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#sort-of-interesting-application",
    "href": "materials/3_ii_introToPython.html#sort-of-interesting-application",
    "title": "Python Programming: Concepts II",
    "section": "Sort of Interesting Application",
    "text": "Sort of Interesting Application\nLoops and conditionals can be used to determine positive, negative numbers, or zeros. Neat-O!\n\nExamples:\nnum = 10\nif num &gt; 0:\n    print(\"Positive number\")\nelif num == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n\n\nOutput:\nPositive"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#nested-conditionals",
    "href": "materials/3_ii_introToPython.html#nested-conditionals",
    "title": "Python Programming: Concepts II",
    "section": "Nested Conditionals",
    "text": "Nested Conditionals\nYou can nest loops, one inside the other.\n\nExamples:\nnum = 15\nif num &gt;= 0:\n    if num == 0:\n        print(\"Zero\")\n    else:\n        print(\"Positive number\")\nelse:\n    print(\"Negative number\")\n\n\nOutput:\nPositive"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#logical-operator",
    "href": "materials/3_ii_introToPython.html#logical-operator",
    "title": "Python Programming: Concepts II",
    "section": "Logical Operator",
    "text": "Logical Operator\nLogical operators use True and False to determine outcomes.\n\nExamples:\na = 10\nb = 20\nif a &gt; 5 and b &gt; 15:\n    print(\"Both conditions are true\")\nif a &gt; 5 or b &lt; 15:\n    print(\"At least one condition is true\")\nif not a &lt; 5:\n    print(\"a is not less than 5\")\n\n\nOutput:\nBoth conditions are true At least one condition is true a is not less than 5"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#string-manipulation",
    "href": "materials/3_ii_introToPython.html#string-manipulation",
    "title": "Python Programming: Concepts II",
    "section": "String Manipulation",
    "text": "String Manipulation\nWe now look at how we can manipulate strings\n\nExamples:\ntext = \"Hello, World!\"\nprint(text.lower())  # hello, world!\nprint(text.upper())  # HELLO, WORLD!\nprint(text.replace(\"World\", \"Python\"))  # Hello, Python!\nprint(text.split(\", \"))  # ['Hello', 'World!']\nprint(text.strip(\"!\"))  # Hello, World"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#lists",
    "href": "materials/3_ii_introToPython.html#lists",
    "title": "Python Programming: Concepts II",
    "section": "Lists",
    "text": "Lists\n\nA list is a fundamental data structure in Python used to store an ordered collection of items.\nLists maintain the order of elements, with each item accessible by its index (starting from 0).\nLists are mutable, so their contents can be changed after creation (items can be added, removed, or modified).\nLists can hold items of different data types, including other lists.\nLists are created using square brackets, with elements separated by commas."
  },
  {
    "objectID": "materials/3_ii_introToPython.html#demo-of-lists",
    "href": "materials/3_ii_introToPython.html#demo-of-lists",
    "title": "Python Programming: Concepts II",
    "section": "Demo of Lists",
    "text": "Demo of Lists\n\nExamples:\nmy_list = [1, 2, 3, 4, 5] # definition\nprint(my_list[0])  # Access first element\nmy_list.append(6)  # Add an element to the end\nprint(my_list)  # [1, 2, 3, 4, 5, 6]\nmy_list.remove(3)  # Remove element with value 3\nprint(my_list)  # [1, 2, 4, 5, 6]\nprint(len(my_list))  # Length of the list\n\nOutput:\n1\n[1, 2, 3, 4, 5, 6]\n[1, 2, 4, 5, 6]\n5"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#dictionaries",
    "href": "materials/3_ii_introToPython.html#dictionaries",
    "title": "Python Programming: Concepts II",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary is a built-in data structure in Python used to store key-value pairs.\nDictionaries are unordered collections (as of Python 3.6+, they maintain insertion order), where each value is accessed using its unique key.\nDictionaries are mutable, so their contents can be changed after creation (items can be added, removed, or modified).\nKeys in a dictionary must be unique and immutable (such as strings, numbers, or tuples), while values can be of any data type.\nDictionaries are created using curly braces {}, with key-value pairs separated by commas and a colon between each key and value."
  },
  {
    "objectID": "materials/3_ii_introToPython.html#demo-of-dictionaries",
    "href": "materials/3_ii_introToPython.html#demo-of-dictionaries",
    "title": "Python Programming: Concepts II",
    "section": "Demo of Dictionaries",
    "text": "Demo of Dictionaries\n\nExamples:\nmy_dict = {\"name\": \"Alice\", \"age\": 25, \"is_student\": True}  # definition\nprint(my_dict[\"name\"])  # Access value by key\nmy_dict[\"age\"] = 26  # Modify value\nmy_dict[\"city\"] = \"New York\"  # Add new key-value pair\nprint(my_dict)  # {'name': 'Alice', 'age': 26, 'is_student': True, 'city': 'New York'}\ndel my_dict[\"is_student\"]  # Remove a key-value pair\nprint(my_dict)  # {'name': 'Alice', 'age': 26, 'city': 'New York'}\nprint(len(my_dict))  # Number of key-value pairs\n\nOutput:\nAlice\n{‘name’: ‘Alice’, ‘age’: 26, ‘is_student’: True, ‘city’: ‘New York’}\n{‘name’: ‘Alice’, ‘age’: 26, ‘city’: ‘New York’}\n3"
  },
  {
    "objectID": "materials/3_ii_introToPython.html#coding-challenges",
    "href": "materials/3_ii_introToPython.html#coding-challenges",
    "title": "Python Programming: Concepts II",
    "section": "Coding Challenges",
    "text": "Coding Challenges\n1. Variables and Operators\nChallenge:\nCreate two variables, a and b, assign them integer values, and print their sum, difference, product, and quotient.\n\nSolution:\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython.html#what-are-literals",
    "href": "materials/3_i_introToPython.html#what-are-literals",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "What are literals?",
    "text": "What are literals?\nLiterals are fixed values in your code. They can be numbers, strings, booleans, etc.\n\n\n\n\n\n\nNote\n\n\nExamples: - 42 (integer) - 3.14 (float) - 'hello' (string) - True, False (boolean)"
  },
  {
    "objectID": "materials/3_i_introToPython.html#python-code-sample",
    "href": "materials/3_i_introToPython.html#python-code-sample",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Python Code Sample",
    "text": "Python Code Sample\nage = 18\npi = 3.14159\ngreeting = \"Hello, world!\"\nis_active = True"
  },
  {
    "objectID": "materials/3_i_introToPython.html#interesting-application",
    "href": "materials/3_i_introToPython.html#interesting-application",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Interesting Application",
    "text": "Interesting Application\nUse literals to set default values in games, apps, or data analysis scripts!"
  },
  {
    "objectID": "materials/3_i_introToPython.html#challenge-1-literal-mix-up",
    "href": "materials/3_i_introToPython.html#challenge-1-literal-mix-up",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 1: Literal Mix-Up",
    "text": "Challenge 1: Literal Mix-Up\nWrite code that uses at least three different types of literals (integer, float, string, boolean) and prints them in a single sentence.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython.html#challenge-2-variable-math",
    "href": "materials/3_i_introToPython.html#challenge-2-variable-math",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 2: Variable Math",
    "text": "Challenge 2: Variable Math\nCreate two variables, perform addition, subtraction, multiplication, and division, and print the results with clear labels.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython.html#challenge-3-loop-conditional-fun",
    "href": "materials/3_i_introToPython.html#challenge-3-loop-conditional-fun",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 3: Loop & Conditional Fun",
    "text": "Challenge 3: Loop & Conditional Fun\nWrite a loop that prints numbers from 1 to 10. For each number, print whether it is a multiple of 3 or not.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython.html#challenge-4-squaring-game",
    "href": "materials/3_i_introToPython.html#challenge-4-squaring-game",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 4: Squaring Game",
    "text": "Challenge 4: Squaring Game\nWrite a function that takes a number and returns both its square and its cube. Print the results for the number 5.\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython.html#challenge-5-string-slicing-mystery",
    "href": "materials/3_i_introToPython.html#challenge-5-string-slicing-mystery",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Challenge 5: String Slicing Mystery",
    "text": "Challenge 5: String Slicing Mystery\nGiven the string mystery = \"QuartoPythonRocks!\", print:\n\nThe first 6 characters\nThe last 5 characters\nEvery third character\n\n\n# TODO"
  },
  {
    "objectID": "materials/3_i_introToPython.html#consider-this",
    "href": "materials/3_i_introToPython.html#consider-this",
    "title": "Chapter 2: Python Programming: Concepts I",
    "section": "Consider This!",
    "text": "Consider This!\nLet’s do these in class!"
  },
  {
    "objectID": "materials/0_materials.html",
    "href": "materials/0_materials.html",
    "title": "Materials",
    "section": "",
    "text": "Here you will find a listing of lesson materials for the course such as slides, assignments, and similar."
  },
  {
    "objectID": "materials/0_materials.html#welcome-weeks",
    "href": "materials/0_materials.html#welcome-weeks",
    "title": "Materials",
    "section": "1. Welcome Weeks",
    "text": "1. Welcome Weeks\n\n\nActivity 01: README.md Due Date: Wednesday 3 Sept 2025 (by the end of class)\nGitHub Classroom Link (Used to setup your workspace and repository for your assignment submission.)"
  },
  {
    "objectID": "materials/0_materials.html#getting-started",
    "href": "materials/0_materials.html#getting-started",
    "title": "Materials",
    "section": "2. Getting Started",
    "text": "2. Getting Started\n\nInstalling necessary software for the course. Python, Visual Studio Code and GitHub.\nRequired Reading: Guttag Chapter 1\nLab 01: Working with the UV package manager to run Python code.\n\nGitHub Classroom Link\nREADME Lab 01 documentation"
  },
  {
    "objectID": "materials/0_materials.html#crash-course-i-python",
    "href": "materials/0_materials.html#crash-course-i-python",
    "title": "Materials",
    "section": "3. Crash Course I: Python",
    "text": "3. Crash Course I: Python\n\nRequired Reading: Guttag Chapter 2\nLiterals, Variables, Conditionals, Strings, etc. \n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nLab 02: Refactoring (Restructuring) a Rock, Paper, Scissors Python game.\n\nGitHub Classroom Link\nREADME Lab 02 documentation\n\nActivity 02: Building a morse code translator in Python and UV\n\nGitHub Classroom Link"
  },
  {
    "objectID": "materials/0_materials.html#crash-course-ii-python",
    "href": "materials/0_materials.html#crash-course-ii-python",
    "title": "Materials",
    "section": "4. Crash Course II: Python",
    "text": "4. Crash Course II: Python\n\nLiterals, Variables, Conditionals, Strings, etc. \n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nActivity 03: Coding using literals, lists and conditionals\n\nGitHub Classroom Link\n\nLab 03: Completing smaller Python programs.\n\nGitHub Classroom Link\n\nGuest Speaker: Form"
  },
  {
    "objectID": "materials/0_materials.html#chapter-2-lists-and-dictionaries",
    "href": "materials/0_materials.html#chapter-2-lists-and-dictionaries",
    "title": "Materials",
    "section": "5. Chapter 2: Lists and Dictionaries",
    "text": "5. Chapter 2: Lists and Dictionaries\n\nReturn to Programming Challenges of Activity 03\n\nREADME\nNote: This time only: Changed Due Date. Now set to 22nd Sept 2025, 11:30pm\n\nLists and Dictionaries at Work\n\nPlayGround demonstrations: Demonstration\nFinish slides from last week (Check the challenges)\n\nHTML Slides\n\n\nLab04: For loops and While Loops\n\nGitHub Classroom link\n\nActivity 04: Fixing code for finding approximations\n\nGitHub Classroom Link"
  },
  {
    "objectID": "materials/0_materials.html#chapter-3-exhaustive-enumeration-and-approximation",
    "href": "materials/0_materials.html#chapter-3-exhaustive-enumeration-and-approximation",
    "title": "Materials",
    "section": "6. Chapter 3: Exhaustive Enumeration and Approximation",
    "text": "6. Chapter 3: Exhaustive Enumeration and Approximation\n\nSome Approximation Techniques in Python\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nA Study of the General nth Root Algorithm\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nLab05: Approximations by the Taylor Series\n\nGitHub Classroom link"
  },
  {
    "objectID": "materials/0_materials.html#chapter-5-structured-types-and-mutability",
    "href": "materials/0_materials.html#chapter-5-structured-types-and-mutability",
    "title": "Materials",
    "section": "7. Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "text": "7. Chapter 5: STRUCTURED TYPES AND MUTABILITY\n\nSome Fundamental Programming in Python\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nMidterm Preparation Guide\n\nMidterm exam: During lab on Thursday, 23rd October 2025\nHTML Slides\nPDF The slide’s material as a pdf."
  },
  {
    "objectID": "materials/0_materials.html#chapter-4-a-return-to-functional-programming",
    "href": "materials/0_materials.html#chapter-4-a-return-to-functional-programming",
    "title": "Materials",
    "section": "8. Chapter 4: A Return to Functional Programming",
    "text": "8. Chapter 4: A Return to Functional Programming\n\nLambda and Higher Order Functions\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nClasses and Decorators Functions\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nLab06: Midterm practice test\n\nGitHub Classroom link"
  },
  {
    "objectID": "materials/0_materials.html#chapter-11-algorithm-complexity-and-big-o",
    "href": "materials/0_materials.html#chapter-11-algorithm-complexity-and-big-o",
    "title": "Materials",
    "section": "9. Chapter 11: Algorithm Complexity and Big-O",
    "text": "9. Chapter 11: Algorithm Complexity and Big-O\n\nActivity 05: Algorithm Performance Analysis through Doubling Experiments\n\nGitHub Classroom Link\n\nAn informal Introduction to Complexity: About Big Big-O\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nActivity 06: Algorithm Performance Analysis through Doubling Experiments\n\nGitHub Classroom Link"
  },
  {
    "objectID": "materials/0_materials.html#chapter-11-continued-o1-ologn-o2n",
    "href": "materials/0_materials.html#chapter-11-continued-o1-ologn-o2n",
    "title": "Materials",
    "section": "10. Chapter 11 (continued): O(1), O(logN), O(2^N)",
    "text": "10. Chapter 11 (continued): O(1), O(logN), O(2^N)\n\nO(1) (Constant Time)\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nO(logN) (Logarithmic Time)\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nO(2^n) (Exponential Time)\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nSupplement Slides: Heap Sorting (Logarithmic Time)\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nTravelling Salesman\n\nHTML Slides\nPDF The slide’s material as a pdf.\n\nActivity 07: Traveling Saleman Problem and Coding\n\nGitHub Classroom Link"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#what-makes-algorithms-olog-n",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#what-makes-algorithms-olog-n",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "What Makes Algorithms O(log n)?",
    "text": "What Makes Algorithms O(log n)?\n\n\n\n\n\n\nThe “Divide and Conquer” Strategy 🔄\n\n\nO(log n) algorithms use smart strategies to avoid checking most of the data.\n\n\n\n\n\nBinary Search - The Classic\ndef binary_search(sorted_array, target):\n    left = 0\n    right = len(sorted_array) - 1\n    steps = 0\n    \n    while left &lt;= right:\n        steps += 1\n        mid = (left + right) // 2\n        \n        if sorted_array[mid] == target:\n            return mid, steps  # Found it!\n        elif sorted_array[mid] &lt; target:\n            left = mid + 1     # Search right half\n        else:\n            right = mid - 1    # Search left half\n    \n    return -1, steps  # Not found\n\n# Example: Find 7 in [1, 3, 5, 7, 9, 11, 13, 15]\n# Step 1: Check middle (7) - Found it!\n# Only 1 step for 8 items!\nsearch_space = [i for i in range(16) if i % 2 ==1]\nvalue_to_find = 7\nprint(f\"Search space = {search_space}\")\nprint(f\"Value to find = {value_to_find}\")\npos, steps = binary_search(search_space,7)\nprint(f\"Position where found = {pos}, steps = {steps}\")\n# Explain the following\n# binary_search([i for i in range(100)],4000)\nWhy O(log n)?\n\nEach step eliminates half the remaining items\nlog₂(n) = number of times you can halve n\nIncredibly efficient!\n\n\nTree Operations\n# Binary Search Tree operations\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef tree_search(root, target):\n    steps = 0\n    current = root\n    \n    while current:\n        steps += 1\n        if current.value == target:\n            return True, steps  # Found!\n        elif target &lt; current.value:\n            current = current.left   # Go left\n        else:\n            current = current.right  # Go right\n    \n    return False, steps  # Not found\n\n# Each step eliminates half the tree!\n# Perfectly balanced tree: O(log n) guaranteed\nThe Tree Advantage:\n\nData is pre-organized for smart searching\nNever need to check more than tree height\nHeight ≈ log₂(n) for balanced trees"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#the-tree-search-in-action",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#the-tree-search-in-action",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "The Tree Search In Action",
    "text": "The Tree Search In Action\n\n\n\n\n\n\nImportant\n\n\nTo use the tree search, a balanced tree first must be created from the data. This may take more time initially, but the search itself is fast. Each additional search will also be time efficient.\n\n\n\n# Binary Search Tree operations\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef tree_search(root, target):\n    steps = 0\n    current = root\n    \n    while current:\n        steps += 1\n        if current.value == target:\n            return True, steps  # Found!\n        elif target &lt; current.value:\n            current = current.left   # Go left\n        else:\n            current = current.right  # Go right\n    \n    return False, steps  # Not found\n\n# Each step eliminates half the tree!\n# Perfectly balanced tree: O(log n) guaranteed\n\ndef insert_node(root, value):\n    \"\"\"Insert a value into the binary search tree\"\"\"\n    if root is None:\n        return TreeNode(value)\n    \n    if value &lt; root.value:\n        root.left = insert_node(root.left, value)\n    else:\n        root.right = insert_node(root.right, value)\n    \n    return root\n\ndef create_balanced_tree(values):\n    \"\"\"Create a balanced BST from a sorted list\"\"\"\n    if not values:\n        return None\n    \n    mid = len(values) // 2\n    root = TreeNode(values[mid])\n    \n    root.left = create_balanced_tree(values[:mid])\n    root.right = create_balanced_tree(values[mid + 1:])\n    \n    return root\n\ndef print_tree_inorder(root):\n    \"\"\"Print tree values in order (for verification)\"\"\"\n    if root:\n        print_tree_inorder(root.left)\n        print(root.value, end=\" \")\n        print_tree_inorder(root.right)\n\n# Demonstration of O(log n) search\nif __name__ == \"__main__\":\n    import math\n    \n    print(\"=== Binary Search Tree O(log n) Demonstration ===\\n\")\n    \n    # Create a balanced tree with values 1-15\n    values = list(range(1, 16))  # [1, 2, 3, ..., 15]\n    root = create_balanced_tree(values)\n    \n    print(\"Created balanced BST with values:\", values)\n    print(\"Tree structure (in-order traversal):\", end=\" \")\n    print_tree_inorder(root)\n    print(\"\\n\")\n    \n    # Test searches for different values\n    test_values = [1, 5, 8, 12, 15, 20]  # Include one that doesn't exist\n    \n    print(\"Search Results:\")\n    print(\"-\" * 50)\n    print(f\"{'Value':&lt;6} {'Found':&lt;7} {'Steps':&lt;6} {'Expected Max Steps'}\")\n    print(\"-\" * 50)\n    \n    n = len(values)\n    expected_max_steps = math.ceil(math.log2(n)) + 1\n    \n    for target in test_values:\n        found, steps = tree_search(root, target)\n        print(f\"{target:&lt;6} {'Yes' if found else 'No':&lt;7} {steps:&lt;6} {expected_max_steps}\")\n    \n    print(\"-\" * 50)\n    print(f\"\\nFor a balanced BST with {n} nodes:\")\n    print(f\"Maximum expected steps: {expected_max_steps} (≈ log₂({n}) + 1)\")\n    print(f\"This demonstrates O(log n) time complexity!\")\n    \n    # Demonstrate with larger tree\n    print(\"\\n=== Larger Tree Demonstration ===\")\n    large_values = list(range(1, 1001))  # 1000 values\n    large_root = create_balanced_tree(large_values)\n    \n    # Test a few searches\n    large_test_values = [1, 500, 999, 1500]  # Include one that doesn't exist\n    n_large = len(large_values)\n    expected_max_large = math.ceil(math.log2(n_large)) + 1\n    \n    print(f\"\\nTesting with {n_large} nodes:\")\n    print(f\"{'Value':&lt;6} {'Found':&lt;7} {'Steps':&lt;6} {'Expected Max Steps'}\")\n    print(\"-\" * 50)\n    \n    for target in large_test_values:\n        found, steps = tree_search(large_root, target)\n        print(f\"{target:&lt;6} {'Yes' if found else 'No':&lt;7} {steps:&lt;6} {expected_max_large}\")\n    \n    print(\"-\" * 50)\n    print(f\"Maximum expected steps for {n_large} nodes: {expected_max_large} (≈ log₂({n_large}) + 1)\")\n    print(\"Notice how the steps remain very small even with 1000 nodes!\")"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#interactive-olog-n-binary-search-demo",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#interactive-olog-n-binary-search-demo",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "Interactive O(log n) Binary Search Demo",
    "text": "Interactive O(log n) Binary Search Demo\n\n\n\n\n\n\nWatch the Halving Magic! 🎮\n\n\nSee how binary search eliminates half the possibilities with each step. Try finding different numbers!\n\n\n\n\n    Binary Search - O(log n) Divide and Conquer\n    \n        \n            Choose number to find...\n            5\n            12\n            25\n            34\n            47\n            63\n            78\n            89\n            99 (not in array)\n        \n        Start Binary Search\n        Speed: Normal\n        Reset\n    \n    \n        \n    \n    \n        Sorted Array: [2, 5, 12, 18, 25, 34, 47, 56, 63, 71, 78, 85, 89, 94]\n        Steps: 0 | Comparisons: 0 | Remaining Items: 14\n        Status: Ready to search!"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#python-olog-n-examples---the-efficient-ones",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#python-olog-n-examples---the-efficient-ones",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "Python O(log n) Examples - The Efficient Ones!",
    "text": "Python O(log n) Examples - The Efficient Ones!\n\n\nBinary Search Implementation 🔍\nimport bisect  # Python's binary search module\n\n# Manual binary search\ndef binary_search_manual(arr, target):\n    left, right = 0, len(arr) - 1\n    steps = 0\n    \n    while left &lt;= right:\n        steps += 1\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return mid, steps\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1, steps\n\n# Using Python's bisect module (optimized)\ndef binary_search_builtin(arr, target):\n    pos = bisect.bisect_left(arr, target)\n    if pos &lt; len(arr) and arr[pos] == target:\n        return pos\n    return -1\n\n# Performance comparison\nnumbers = list(range(0, 100000, 7))  # 0, 7, 14, 21, ...\ntarget = 9961\n\n# Manual version\nposition, steps = binary_search_manual(numbers, target)\nprint(f\"Manual: Found at {position} in {steps} steps\")\n\n# Built-in version (also O(log n))\nposition = binary_search_builtin(numbers, target)\nprint(f\"Built-in: Found at {position}\")\n\nHeap Operations 🏔️\nimport heapq\n\n# Min-heap operations - all O(log n)\nheap = []\n\n# Insert elements - O(log n) each\nfor value in [64, 34, 25, 12, 22, 11, 90]:\n    heapq.heappush(heap, value)    # O(log n)\n    print(f\"Inserted {value}, heap: {heap}\")\n\n# Extract minimum - O(log n)\nwhile heap:\n    min_value = heapq.heappop(heap)  # O(log n)\n    print(f\"Removed {min_value}, remaining: {heap}\")\n\n# Why O(log n)?\n# Heap is a binary tree structure\n# Height = log₂(n)\n# Insert/delete only travel up/down one path\n# Path length = tree height = O(log n)\n\n# Priority queue example\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n    \n    def push(self, item, priority):\n        heapq.heappush(self.heap, (priority, item))  # O(log n)\n    \n    def pop(self):\n        return heapq.heappop(self.heap)[1]  # O(log n)\n\n\n\n\n\n\n\nPro Tip 💡\n\n\nPython’s bisect module provides highly optimized O(log n) operations for sorted lists!"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#olog-n-vs-other-complexities",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#olog-n-vs-other-complexities",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "O(log n) vs Other Complexities",
    "text": "O(log n) vs Other Complexities\nPerformance Comparison 📊: Champion-like Qualities!\n\n\n\n\n\n\nData Size\nO(1)\nO(log n)\nO(n)\nO(n²)\n\n\n\n\n10\n1\n3\n10\n100\n\n\n100\n1\n7\n100\n10,000\n\n\n1,000\n1\n10\n1,000\n1,000,000\n\n\n1,000,000\n1\n20\n1,000,000\n1,000,000,000,000\n\n\n1,000,000,000\n1\n30\n1,000,000,000\n∞ (impractical)\n\n\n\nThe O(log n) Sweet Spot:\n\nAlmost as fast as O(1)\nDramatically better than O(n)\nScales beautifully with big data\nRequires organized/sorted data\n\n\nWhen O(log n) Shines✨\nDatabase Lookups!\n# Pseudocode\n\n# Database indexing - O(log n) lookups\n# Even with millions of records!\n\n# File system searches\n# Modern filesystems use B-trees (O(log n))\n\n# Sorted data structures\nsorted_students = [\"Alice\", \"Bob\", \"Charlie\", ...]  # 10,000 students\nimport bisect\n\n# O(log n) - incredibly fast!\nposition = bisect.bisect_left(sorted_students, \"Emma\")\n\n# Compare with O(n) linear search\nposition = sorted_students.index(\"Emma\")  # Much slower!\n\n# Geographic searches (quad-trees)\n# GPS navigation systems\n# Image processing (pyramid algorithms)\n# Game development (spatial partitioning)\n\n# The secret: Smart data organization\n# pays huge dividends in search speed!"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#real-world-olog-n-applications",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#real-world-olog-n-applications",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "Real-World O(log n) Applications",
    "text": "Real-World O(log n) Applications\n\n\n\n\n\n\nWhere You Use O(log n) Every Day! 🌍\n\n\nO(log n) algorithms power many systems you interact with daily.\n\n\n\n\n\nTech You Use Daily 📱\n# Pseudocode\n\n# Database queries with indexes\n# When you search your emails, photos, contacts\nSELECT * FROM emails WHERE subject LIKE '%meeting%'\n# Database uses B-tree index: O(log n)\n\n# Autocomplete systems\ndef autocomplete(prefix, word_list):\n    # Binary search to find start position\n    start = bisect.bisect_left(word_list, prefix)  # O(log n)\n    results = []\n    \n    for i in range(start, len(word_list)):\n        if word_list[i].startswith(prefix):\n            results.append(word_list[i])\n        else:\n            break\n    return results\n\n# Version control systems (Git)\n# Git uses binary search to find bugs\ngit bisect start      # Start binary search\ngit bisect bad        # Current version has bug\ngit bisect good v1.0  # v1.0 was good\n# Git automatically finds the problematic commit!\n\nBehind-the-Scenes Magic 🪄\n# Pseudocode\n\n# Memory management\n# Operating systems use balanced trees\n# to track free memory blocks\n\n# Network routing\n# Internet routers use prefix trees\n# to find optimal paths: O(log n)\n\n# Graphics and gaming\n# Collision detection uses spatial trees\n# Ray tracing uses BVH trees\n\n# Machine learning\n# Decision trees make predictions\n# in O(log n) time\n\n# Example: Simple decision tree\ndef classify_student_performance(hours_studied):\n    if hours_studied &gt;= 10:      # O(1) decision\n        if hours_studied &gt;= 15:  # O(1) decision\n            return \"Excellent\"   # Total: O(log n) depth\n        return \"Good\"\n    else:\n        if hours_studied &gt;= 5:\n            return \"Average\"\n        return \"Needs Improvement\"\n\n# Tree height determines performance\n# Balanced tree = O(log n) predictions"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#partner-activity-the-power-of-divide-and-conquer",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#partner-activity-the-power-of-divide-and-conquer",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "Partner Activity: The Power of Divide and Conquer! 👥",
    "text": "Partner Activity: The Power of Divide and Conquer! 👥\n\nWork with a partner to discover the incredible scaling properties of logarithmic algorithms.\nIncrease and decrease the search space to experiment. To start, look for BEGIN YOUR EXPERIMENTS HERE! in the code.\n\n\n\nExperiment 1: Binary Search Scaling Test\nimport time\nimport bisect\nimport math\n\ndef create_sorted_data(size):\n    # Create sorted data for testing\n    return list(range(0, size * 2, 2))  # [0, 2, 4, 6, 8, ...]\n\ndef binary_search_manual(arr, target):\n    left, right = 0, len(arr) - 1\n    steps = 0\n    \n    while left &lt;= right:\n        steps += 1\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return mid, steps\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1, steps\n\n# Partner A: Test sizes [1000, 2000, 4000]\n# Partner B: Test sizes [8000, 16000, 32000]\ndef test_logarithmic_scaling(sizes):\n    results = []\n    \n    for size in sizes:\n        data = create_sorted_data(size)\n        target = data[-1]  # Search for last element (worst case)\n        \n        # Manual binary search with step counting\n        start = time.time()\n        pos, steps = binary_search_manual(data, target)\n        manual_time = time.time() - start\n        \n        # Built-in binary search\n        start = time.time()\n        builtin_pos = bisect.bisect_left(data, target)\n        builtin_time = time.time() - start\n        \n        theoretical_steps = math.ceil(math.log2(size))\n        \n        results.append({\n            'size': size,\n            'actual_steps': steps,\n            'theoretical_steps': theoretical_steps,\n            'manual_time': manual_time,\n            'builtin_time': builtin_time\n        })\n        \n        print(f\"Size {size:5d}: {steps:2d} steps (theory: {theoretical_steps:2d}), {manual_time:.6f}s\")\n    \n    return results\n\n\n# ----------------------------\n# BEGIN YOUR EXPERIMENTS HERE!\n# Your partner assignment:\nmy_sizes = [1000, 2000, 4000]  # Change based on assignment\nresults = test_logarithmic_scaling(my_sizes)\n\n# Partner Discussion:\n# 1. How close were actual steps to theoretical log₂(n)?\n# 2. What happened to search time as size doubled?\n# 3. Compare with your partner's larger sizes - what pattern emerges?\n\nExperiment 2: Heap vs Linear Priority Queue\nimport heapq\nimport time\nimport random\n\nclass LinearPriorityQueue:\n    \"\"\"Naive O(n) priority queue for comparison\"\"\"\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item, priority):\n        self.items.append((priority, item))\n    \n    def pop(self):\n        if not self.items:\n            return None\n        # Find minimum priority (O(n))\n        min_idx = min(range(len(self.items)), key=lambda i: self.items[i][0])\n        return self.items.pop(min_idx)[1]\n\ndef compare_priority_queues(num_operations):\n    # Generate random tasks with priorities\n    tasks = [(random.randint(1, 100), f\"Task_{i}\") for i in range(num_operations)]\n    \n    # Test heap-based priority queue O(log n)\n    heap_pq = []\n    start = time.time()\n    \n    for priority, task in tasks:\n        heapq.heappush(heap_pq, (priority, task))\n    \n    processed_heap = []\n    while heap_pq:\n        processed_heap.append(heapq.heappop(heap_pq)[1])\n    \n    heap_time = time.time() - start\n    \n    # Test linear priority queue O(n)\n    linear_pq = LinearPriorityQueue()\n    start = time.time()\n    \n    for priority, task in tasks:\n        linear_pq.push(task, priority)\n    \n    processed_linear = []\n    while linear_pq.items:\n        processed_linear.append(linear_pq.pop())\n    \n    linear_time = time.time() - start\n    \n    return heap_time, linear_time\n\n\n# ----------------------------\n# BEGIN YOUR EXPERIMENTS HERE!\n# Partner A: Test with 500 operations\n# Partner B: Test with 2000 operations\nmy_operations = 500  # Change based on assignment\n\nheap_time, linear_time = compare_priority_queues(my_operations)\n\nprint(f\"Operations: {my_operations}\")\nprint(f\"Heap PQ (O(log n)): {heap_time:.4f}s\")\nprint(f\"Linear PQ (O(n)):   {linear_time:.4f}s\")\nprint(f\"Heap is {linear_time/heap_time:.1f}x faster!\")\n\n# Partner Discussion:\n# - How did the performance gap change with more operations?\n# - What would happen with 10,000 operations?"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#group-activity-logarithmic-thinking-challenge",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#group-activity-logarithmic-thinking-challenge",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "Group Activity: Logarithmic Thinking Challenge!",
    "text": "Group Activity: Logarithmic Thinking Challenge!\nGroup Problem-Solving: When to Use O(log n)! 🪶📜𓇢𓆸\n\n\n\nImportant\n\n\nSolve these real-world scenarios using logarithmic thinking! 🌍\nOption 1: Library Book System 📚 You are designing a system for a library with 100,000 books. - Books are sorted by ISBN number - Students need to find books quickly - New books are added daily\nQuestions:🤔 1. How would you implement book lookup? (No code necessary, explain steps) 2. What’s the maximum number of steps to find any book? 3. How would this scale to 1,000,000 books?\nOption 2: Student Grade Ranking 🎯 Your school wants to rank 5,000 students by GPA. - GPAs range from 0.0 to 4.0 - Need to quickly find a student’s rank - Rankings update when grades change\nQuestions:🤔 1. How would you store the data for fast ranking lookup? (No code necessary, explain steps) 2. How many steps to find where a 3.7 GPA ranks? 3. What happens when a student’s GPA changes?"
  },
  {
    "objectID": "materials/10_2_big_o_logarithmic_ologn.html#your-turn-experience-olog-n-power",
    "href": "materials/10_2_big_o_logarithmic_ologn.html#your-turn-experience-olog-n-power",
    "title": "O(log n) - LOGARITHMIC TIME",
    "section": "Your Turn: Experience O(log n) Power!",
    "text": "Your Turn: Experience O(log n) Power!\n\n\n\n\n\n\nIndividual Exploration: Feel the Logarithmic Magic! 🧑‍💻\n\n\nAfter group problem-solving, try these hands-on exercises to experience O(log n) efficiency.\n\n\n\n\n\nExercise 1: Search Race\nimport time\nimport bisect\nimport random\n\n# Create test data\nsize = 100000\nsorted_data = sorted([random.randint(1, 1000000) for _ in range(size)])\ntarget = sorted_data[size // 2]  # Middle element\n\n# Race 1: Linear search O(n)\nstart = time.time()\nlinear_pos = -1\nfor i, value in enumerate(sorted_data):\n    if value == target:\n        linear_pos = i\n        break\nlinear_time = time.time() - start\n\n# Race 2: Binary search O(log n)\nstart = time.time()\nbinary_pos = bisect.bisect_left(sorted_data, target)\nbinary_time = time.time() - start + 0.001 # add error\n\nprint(f\"Linear search (O(n)):  {linear_time:.6f}s\")\nprint(f\"Binary search (O(log n)): {binary_time:.6f}s\")\nprint(f\"Binary search is {linear_time/binary_time:.0f}x faster!\")\n\n# Try with different sizes\n# Notice how binary search stays fast\n# while linear search gets slower\n\nExercise 2: Heap Priority Queue\nimport heapq\nimport time\n\n# Simulate a hospital emergency room\n# Priority queue: lower number = higher priority\nemergency_room = []\n\n# Add patients with priorities\npatients = [\n    (1, \"Heart Attack\"),    # Highest priority\n    (5, \"Broken Arm\"),\n    (2, \"Severe Bleeding\"),\n    (8, \"Routine Checkup\"), # Lowest priority\n    (3, \"Chest Pain\"),\n    (7, \"Headache\"),\n    (1, \"Stroke\"),          # Also highest priority\n]\n\nprint(\"Adding patients to emergency queue:\")\nfor priority, condition in patients:\n    heapq.heappush(emergency_room, (priority, condition))  # O(log n)\n    print(f\"Added: {condition} (Priority {priority})\")\n\nprint(\"\\nTreating patients in priority order:\")\nwhile emergency_room:\n    priority, condition = heapq.heappop(emergency_room)  # O(log n)\n    print(f\"Treating: {condition} (Priority {priority})\")\n\n# Each operation is O(log n)\n# Total time: O(n log n) for n operations\n# Much better than sorting repeatedly: O(n² log n)!\n\n\nIf you want to know more about how the Heap Priority Queue code works, check out the Supplemental Slides 10_heap_sorting_slides"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#challenge-1-tuple-practice",
    "href": "materials/7_python_fundamentals_slides_all_together.html#challenge-1-tuple-practice",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Challenge 1: Tuple Practice 🟢",
    "text": "Challenge 1: Tuple Practice 🟢\n\n\n\nBasic Tuple Operations (5 minutes)\n\n\nPractice creating and using tuples for storing related data.\n\n\n\n\n\n\nTask\n\n\n# Given data\nstudent1 = (\"Alice\", 85, \"Computer Science\")\nstudent2 = (\"Bob\", 92, \"Mathematics\")\nstudent3 = (\"Carol\", 78, \"Physics\")\n\n# Your tasks (complete each line):\n# 1. Create a tuple with all three students\nall_students = # Your code here\n\n# 2. Get Alice's grade (second element of first tuple)\nalice_grade = # Your code here\n\n# 3. Get all student names in a list\nnames = # Your code here\n\n# 4. Count how many students have grades above 80\nhigh_grades = # Your code here"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#challenge-2-list-comprehension-magic",
    "href": "materials/7_python_fundamentals_slides_all_together.html#challenge-2-list-comprehension-magic",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Challenge 2: List Comprehension Magic 🟡",
    "text": "Challenge 2: List Comprehension Magic 🟡\n\n\n\nList Comprehensions (7 minutes)\n\n\nCreate lists efficiently using comprehension syntax.\n\n\n\n\n\n\nTask\n\n\n# Given data\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n\n# Your tasks:\n# 1. Create a list of squares for even numbers only\neven_squares = # Your code here\n\n# 2. Create a list of words with more than 5 letters, in uppercase\nlong_words_upper = # Your code here\n\n# 3. Create a list of numbers from 1-20 that are divisible by 3\ndivisible_by_3 = # Your code here\n\n# 4. Create a list with first letter of each word\nfirst_letters = # Your code here"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#challenge-3-set-operations",
    "href": "materials/7_python_fundamentals_slides_all_together.html#challenge-3-set-operations",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Challenge 3: Set Operations 🟢",
    "text": "Challenge 3: Set Operations 🟢\n\n\n\nWorking with Sets (5 minutes)\n\n\nPractice set operations for finding unique elements and relationships.\n\n\n\n\n\n\nTask\n\n\n# Given data\nclass_a = {\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"}\nclass_b = {\"Charlie\", \"David\", \"Frank\", \"Grace\", \"Alice\"}\ngrades = [85, 92, 78, 85, 91, 78, 88, 85, 92, 78]\n\n# Your tasks:\n# 1. Find students in both classes\nboth_classes = # Your code here\n\n# 2. Find students only in class A\nonly_class_a = # Your code here\n\n# 3. Find all unique grades\nunique_grades = # Your code here\n\n# 4. Find total number of unique students\ntotal_students = # Your code here"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#challenge-4-2d-list-basics",
    "href": "materials/7_python_fundamentals_slides_all_together.html#challenge-4-2d-list-basics",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Challenge 4: 2D List Basics 🟡",
    "text": "Challenge 4: 2D List Basics 🟡\n\n\n\nWorking with 2D Lists (8 minutes)\n\n\nPractice creating and manipulating 2D lists for grid-based data.\n\n\n\nTask: Complete the following code\n# Create a 3x3 tic-tac-toe board\nboard = [\n    [' ', ' ', ' '],\n    [' ', ' ', ' '],\n    [' ', ' ', ' ']\n]\n\n# Your tasks:\n# 1. Place 'X' in the center (row 1, column 1)\n# Your code here\n\n# 2. Place 'O' in top-left corner (row 0, column 0)\n# Your code here\n\n# 3. Create a list of all positions that are empty (' ')\nempty_positions = # Your code here\n\n# 4. Check if the center row has any 'X' in it\ncenter_has_x = # Your code here"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#challenge-5-list-cloning-practice",
    "href": "materials/7_python_fundamentals_slides_all_together.html#challenge-5-list-cloning-practice",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Challenge 5: List Cloning Practice 🟡",
    "text": "Challenge 5: List Cloning Practice 🟡\n\n\n\nSafe List Operations (6 minutes)\n\n\nPractice cloning lists to avoid unwanted side effects.\n\n\n\n\n\n\nTask\n\n\n# Original shopping list\noriginal_list = [\"apples\", \"bananas\", \"oranges\"]\n\n# Your tasks:\n# 1. Create a proper copy of the original list\nshopping_copy = # Your code here\n\n# 2. Add \"grapes\" to the copy (original should remain unchanged)\n# Your code here\n\n# 3. Create another copy and remove \"bananas\" from it\nfruit_copy = # Your code here\n# Your code here\n\n# 4. Verify original list is unchanged\nprint(f\"Original: {original_list}\")  # Should be [\"apples\", \"bananas\", \"oranges\"]"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#challenge-6-range-and-map-practice",
    "href": "materials/7_python_fundamentals_slides_all_together.html#challenge-6-range-and-map-practice",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Challenge 6: Range and Map Practice 🟡",
    "text": "Challenge 6: Range and Map Practice 🟡\n\n\n\nHigher-Order Functions (8 minutes)\n\n\nPractice using ranges with map() and filter() functions.\n\n\n\n\n\n\nTask\n\n\n# Given data\nprices = [19.99, 25.50, 12.75, 8.99, 45.00, 15.25]\n\n# Your tasks:\n# 1. Use range to create a list of numbers 0-9\nnumbers = # Your code here\n\n# 2. Use map() to add tax (8%) to all prices\nprices_with_tax = # Your code here\n\n# 3. Use filter() to find prices under $20\naffordable_prices = # Your code here\n\n# 4. Use map() to convert all prices to integers (rounded down)\nrounded_prices = # Your code here"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#challenge-7-combining-concepts",
    "href": "materials/7_python_fundamentals_slides_all_together.html#challenge-7-combining-concepts",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Challenge 7: Combining Concepts 🔴",
    "text": "Challenge 7: Combining Concepts 🔴\n\n\n\nIntegration Challenge (10 minutes)\n\n\nCombine multiple concepts in a mini student database.\n\n\n\nTask: Complete the following code\n# Student data: (name, age, grades_list)\nstudents = [\n    (\"Alice\", 20, [85, 92, 78]),\n    (\"Bob\", 19, [90, 88, 95]),\n    (\"Carol\", 21, [76, 82, 85])\n]\n\n# Your tasks:\n# 1. Create a set of all unique ages\nunique_ages = # Your code here\n\n# 2. Use list comprehension to get all student names\nnames = # Your code here\n\n# 3. Create a list of average grades for each student\naverages = # Your code here\n\n# 4. Find students with average grade above 85\nhigh_performers = # Your code here\n\n# 5. Clone the students list and add a new student\nstudents_copy = # Your code here\n# Add (\"David\", 22, [88, 91, 87]) to the copy"
  },
  {
    "objectID": "materials/7_python_fundamentals_slides_all_together.html#quick-check-solutions",
    "href": "materials/7_python_fundamentals_slides_all_together.html#quick-check-solutions",
    "title": "Chapter 5: STRUCTURED TYPES AND MUTABILITY",
    "section": "Quick Check Solutions 📝",
    "text": "Quick Check Solutions 📝\n\n\n\nTest Your Understanding\n\n\nBefore moving on, make sure you can explain:\n\nWhy we use tuples vs lists\nHow list comprehensions make code cleaner\nWhen to clone lists vs reference them\nWhat makes sets useful for data analysis\nHow 2D lists represent grid data\n\nHint: If you can teach it to someone else, you’ve mastered it! 🎓\n\n\n\n\nGreat job practicing! These building blocks will serve you well! 🐍✨"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#part1-exhaustive-method",
    "href": "materials/6_exhaustive_approximation.html#part1-exhaustive-method",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "Part1: Exhaustive Method",
    "text": "Part1: Exhaustive Method\nSimple Exhaustive Square Roots\n\n# Exhaustive square root\ndef simple_square_root(x):\n    # find a root of a perfect root\n    ans = 0\n    while ans **2 &lt; abs(x):\n        ans += 1\n    if ans**2 != abs(x):\n        print(f\"x = {x} is not perfect square root...\")\n    else:\n        if x&lt;0:\n            ans =-ans\n        print(f\"Square root of {x} is {ans}.\")\n\nWe count and then square the result to compare to the absolute value of the number to check."
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#simple_square_rootx",
    "href": "materials/6_exhaustive_approximation.html#simple_square_rootx",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "simple_square_root(x)",
    "text": "simple_square_root(x)\nCount, square and check\n\n\nStep-by-Step Process:\n\nStart with ans = 0\nCheck if ans² &lt; |x|\nIf true, increment ans by 1\nRepeat until ans² ≥ |x|\nTest if ans² exactly equals |x|\n\n\nKey Logic: Exhaustive search: Tests every integer sequentially.\nIf ans² == |x| then the root is found. Cool!  \nBinary outcome: Either finds exact root or reports failure"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#simple_cube_rootx",
    "href": "materials/6_exhaustive_approximation.html#simple_cube_rootx",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "simple_cube_root(x)",
    "text": "simple_cube_root(x)\nCount, cube and check\n\n\nStep-by-Step Process:\n(Same as before)\n\nStart with ans = 0\nCheck if ans^3 &lt; |x|\nIf true, increment ans by 1\nRepeat until ans^3 ≥ |x|\nTest if ans^3 exactly equals |x|\n\n\nKey Logic: Exhaustive search: Tests every integer sequentially.\nIf ans^3 == |x| then the root is found. Nifty!  \nBinary outcome: Either finds exact root or reports failure"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#complicated-exhaustive-square-roots",
    "href": "materials/6_exhaustive_approximation.html#complicated-exhaustive-square-roots",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "Complicated Exhaustive Square Roots",
    "text": "Complicated Exhaustive Square Roots\nAdd print statements to see steps.\n\ndef exhaustive_sqrt(x, epsilon=0.01):\n    \"\"\"\n    Find square root using exhaustive enumeration\n    \"\"\"\n    step = epsilon\n    num_guesses = 0\n    ans = 0.0\n    \n    print(f\"Finding square root of {x}\")\n    \n    while abs(ans**2 - x) &gt;= epsilon and ans*ans &lt;= x:\n        ans += step\n        num_guesses += 1\n    \n    print(f\"Number of guesses: {num_guesses}\")\n    \n    if abs(ans**2 - x) &gt;= epsilon:\n        print(f\"Failed to find square root of {x}\")\n        return None\n    else:\n        print(f\"Square root of {x} is approximately {ans}\")\n        return ans"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#how-this-code-works",
    "href": "materials/6_exhaustive_approximation.html#how-this-code-works",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "How This Code Works:",
    "text": "How This Code Works:\n\n\nAlgorithm Steps: 1. Start with ans = 0.0 2. Increment by epsilon each iteration 3. Check if ans² is close enough to x 4. Stop when within tolerance or exceeded target\nKey Variables: - step: How much to increment each guess - num_guesses: Performance counter - ans: Current approximation\n\nLoop Condition Explained: - abs(ans**2 - x) &gt;= epsilon: Not accurate enough yet - ans*ans &lt;= x: Haven’t exceeded target (prevents infinite loop)\nWhy It Works: - Systematically tests every possible value - Guaranteed to find solution if it exists - Simple but inefficient for large numbers"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#the-fundamental-limitation",
    "href": "materials/6_exhaustive_approximation.html#the-fundamental-limitation",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "The Fundamental Limitation",
    "text": "The Fundamental Limitation\nThese functions use “exhaustive enumeration” over integers:\n\nPerfect squares/cubes: Have integer roots (4, 9, 16, 25…)\nNon-perfect squares/cubes: Have irrational/decimal roots\n\nKey Insight: The algorithm design assumes the answer is an integer!\n\n\n# This works:\nsimple_square_root (25) = 5\nsimple_square_root(27) = 3\n\n# (only exact integers)\n\n# This fails:\nsimple_square_root(26) = 5.099... \nsimple_cube_root(26) = 2.962...\n\n# (not integers, no results found"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#part2-approximation",
    "href": "materials/6_exhaustive_approximation.html#part2-approximation",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "Part2: Approximation",
    "text": "Part2: Approximation\nWhat if I need exact numbers for roots of a non-perfect value?\nMy number is …\n\nNot a square\nNot a cube\nNot an \\(n^{th}\\) value of anything!\n\n\nHow to find exact values of any number I want?!"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#what-we-need-instead",
    "href": "materials/6_exhaustive_approximation.html#what-we-need-instead",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "What We Need Instead",
    "text": "What We Need Instead\nFor approximating non-perfect roots, we need:\n\nDecimal precision (not just integers)\nTolerance/epsilon (how close is “close enough?”)\nDifferent search strategies:\n\nIncrement by small decimals (0.01, 0.001…) \nNewton’s method\n\n\nNext: We’ll explore these approximation techniques!"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#so-what-is-approximation",
    "href": "materials/6_exhaustive_approximation.html#so-what-is-approximation",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "So, What is Approximation?",
    "text": "So, What is Approximation?\n\n\nKey Concepts:\n\nFinding “good enough” solutions\nTrading precision for efficiency\nIterative refinement\nStopping criteria (stop the approximation by setting precision)\n\n\nLike, Why Approximation?\n\nExact solutions may not exist (not a perfect number) \nReal-world applications (like how your computer does this root-finding!)"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#section",
    "href": "materials/6_exhaustive_approximation.html#section",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "",
    "text": "Issac Newton"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#square-root-approximation-with-newtons-method",
    "href": "materials/6_exhaustive_approximation.html#square-root-approximation-with-newtons-method",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "Square Root Approximation with Newton’s Method",
    "text": "Square Root Approximation with Newton’s Method"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#cube-roots",
    "href": "materials/6_exhaustive_approximation.html#cube-roots",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "Cube Roots",
    "text": "Cube Roots\n\ndef newtons_cube_root(n:float, guess:float = 1.0) -&gt; float:\n    while abs(n - guess*guess*guess) &gt; .0001:\n        print(f\"n = {n}, guess = {guess}\")\n        print(f\"   abs(n - guess^3) = {abs(n - guess*guess*guess)}\")\n        guess = guess - (guess*guess*guess - n)/(3*(guess*guess))\n        print(f\"   guess = guess - (guess*guess*guess - n)/(3*(guess*guess)) = {guess}\\n\")\n    return guess"
  },
  {
    "objectID": "materials/6_exhaustive_approximation.html#general-case",
    "href": "materials/6_exhaustive_approximation.html#general-case",
    "title": "Chapter 4: SOME SIMPLE NUMERICAL PROGRAMS",
    "section": "General Case",
    "text": "General Case\n\ndef newtons_nth_root(n: int, value: float, guess: float = 1.0) -&gt; float:\n    \"\"\"\n    Find the nth root of a value using Newton's method.\n    \n    Parameters:\n    n (int): The root to find (e.g., 2 for square root, 3 for cube root)\n    value (float): The value for which to find the nth root\n    guess (float): Initial guess (default: 1.0)\n    \n    Returns:\n    float: The nth root of the value\n    \n    Mathematical formula:\n    For finding y such that y^n = value, we use Newton's method:\n    y_new = y - f(y)/f'(y)\n    where f(y) = y^n - value and f'(y) = n * y^(n-1)\n    So: y_new = y - (y^n - value)/(n * y^(n-1))\n    \"\"\"\n    if n &lt;= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if value &lt; 0 and n % 2 == 0:\n        raise ValueError(\"Cannot find even root of negative number\")\n    \n    tolerance = 0.0001\n    \n    while abs(guess**n - value) &gt; tolerance:\n        print(f\"n = {n}, value = {value}, guess = {guess}\")\n        print(f\"   abs(guess^n - value) = abs({guess}^{n} - {value}) = {abs(guess**n - value)}\")\n        \n        # Newton's method formula: guess_new = guess - (guess^n - value)/(n * guess^(n-1))\n        guess_new = guess - (guess**n - value) / (n * guess**(n-1))\n        \n        print(f\"   guess_new = guess - (guess^n - value)/(n * guess^(n-1))\")\n        print(f\"   guess_new = {guess} - ({guess}^{n} - {value})/({n} * {guess}^{n-1}) = {guess_new}\\n\")\n        \n        guess = guess_new\n    \n    return guess"
  },
  {
    "objectID": "playground/06_listAndDictionaries.html",
    "href": "playground/06_listAndDictionaries.html",
    "title": "Just For Fun 06: Lists and Dictionaries",
    "section": "",
    "text": "Lesson Objectives\n\n\n\nBy the end of this lesson, you will be able to:\n\nCreate and manipulate lists to store sequences of data\nCreate and work with dictionaries to store key-value pairs\nAccess, modify, and iterate through lists and dictionaries\nChoose the appropriate data structure (list vs dictionary) for different tasks"
  },
  {
    "objectID": "playground/06_listAndDictionaries.html#introduction",
    "href": "playground/06_listAndDictionaries.html#introduction",
    "title": "Just For Fun 06: Lists and Dictionaries",
    "section": "Introduction",
    "text": "Introduction\nLists and dictionaries are two of the most important data structures in Python. They allow you to organize and manage collections of data efficiently:\n\nLists are ordered collections that can store multiple items in sequence\nDictionaries are collections of key-value pairs that allow you to quickly look up values using unique keys\n\nThink of a list like a shopping list where the order matters, and a dictionary like a phone book where you look up a person’s name (key) to find their phone number (value)."
  },
  {
    "objectID": "playground/06_listAndDictionaries.html#key-concepts",
    "href": "playground/06_listAndDictionaries.html#key-concepts",
    "title": "Just For Fun 06: Lists and Dictionaries",
    "section": "Key Concepts",
    "text": "Key Concepts\n\n\n💡 Concept 1: Lists - Ordered Collections\n\nLists are ordered, mutable collections that can store multiple items. Items in a list are accessed by their position (index), starting from 0.\nExample:\n# Creating a list with three string elements\nfruits = [\"apple\", \"banana\", \"orange\"]\n# Access the first element (index 0) and print it\nprint(fruits[0])  # Outputs: apple\n\n\n\n💡 Concept 2: Dictionaries - Key-Value Pairs\n\nDictionaries store data as key-value pairs. Instead of using numeric indices, you use meaningful keys to access values quickly.\nExample:\n# Creating a dictionary with string keys and mixed value types\nstudent = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\n# Access the value associated with the \"name\" key\nprint(student[\"name\"])  # Outputs: Alice"
  },
  {
    "objectID": "playground/06_listAndDictionaries.html#interactive-examples",
    "href": "playground/06_listAndDictionaries.html#interactive-examples",
    "title": "Just For Fun 06: Lists and Dictionaries",
    "section": "Interactive Examples",
    "text": "Interactive Examples\n\nExample 1: Working with Lists\n\nWhat this code does: This example demonstrates how to create a list, add items to it, and access elements by their index position.\n\nExample Code:\n# Create an empty list to store color names\ncolors = []\n\n# Add individual items to the end of the list using append()\ncolors.append(\"red\")\ncolors.append(\"blue\")\ncolors.append(\"green\")\n\n# Display the entire list and access specific elements\nprint(\"List of colors:\", colors)\nprint(\"First color:\", colors[0])  # Index 0 is the first element\nprint(\"Number of colors:\", len(colors))  # len() returns list length\n\n# Add multiple items at once using extend()\ncolors.extend([\"yellow\", \"purple\"])\nprint(\"Updated list:\", colors)\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\n# Create an empty list to store color names\ncolors = []\n\n# Add individual items to the end of the list using append()\ncolors.append(\"red\")\ncolors.append(\"blue\")\ncolors.append(\"green\")\n\n# Display the entire list and access specific elements\nprint(\"List of colors:\", colors)\nprint(\"First color:\", colors[0])  # Index 0 is the first element\nprint(\"Number of colors:\", len(colors))  # len() returns list length\n\n# Add multiple items at once using extend()\ncolors.extend([\"yellow\", \"purple\"])\nprint(\"Updated list:\", colors)\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nExample 2: Dictionary Basics and Key-Value Storage\n\nWhat this code does: This example demonstrates creating a dictionary, populating it with key-value pairs using a loop, and then retrieving values using their keys.\n\nExample Code:\n# Declare an empty dictionary to store number mappings\nnum_dict = {} # define the dictionary here\n\n# Populating the dictionary with key-value pairs\nprint(\"\\t Populating the dictionary.\")\nfor i in range(10):  # Loop from 0 to 9\n     key = i           # The key will be the number itself\n     value = i**2      # The value will be the square of the number\n     print(f\"\\t {key} --&gt; {value}\")  # Show what we're storing\n     num_dict[key] = value # Store the key-value pair in the dictionary\n\n# Retrieve values from the dictionary using their keys\nprint(\"\\t Pulling values from the dictionary using their keys.\")\nfor i in range(10):  # Loop through the same range\n     # Access the stored value using the key (i)\n     print(f\"\\t num_dict: {i} --&gt; {num_dict[i]}\") # pull values by their keys\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\n# Declare an empty dictionary to store number mappings\nnum_dict = {} # define the dictionary here\n\n# Populating the dictionary with key-value pairs\nprint(\"\\t Populating the dictionary.\")\nfor i in range(10):  # Loop from 0 to 9\n     key = i           # The key will be the number itself\n     value = i**2      # The value will be the square of the number\n     print(f\"\\t {key} --&gt; {value}\")  # Show what we're storing\n     num_dict[key] = value # Store the key-value pair in the dictionary\n\n# Retrieve values from the dictionary using their keys\nprint(\"\\t Pulling values from the dictionary using their keys.\")\nfor i in range(10):  # Loop through the same range\n     # Access the stored value using the key (i)\n     print(f\"\\t num_dict: {i} --&gt; {num_dict[i]}\") # pull values by their keys\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nExample 3: Student Grade Management System\n\nWhat this code does: This example creates a practical grade management system using both lists and dictionaries to store student information and calculate statistics.\n\nExample Code:\n# Create a dictionary where keys are student names and values are lists of grades\nstudents = {\n    \"Alice\": [85, 92, 78, 95],    # Alice's test scores\n    \"Bob\": [79, 85, 91, 88],      # Bob's test scores\n    \"Charlie\": [92, 89, 94, 97]   # Charlie's test scores\n}\n\n# Display all students and their grades with calculated averages\nprint(\"Student Grade Report:\")\nprint(\"-\" * 30)  # Print a line separator\n\n# Loop through each student and their grades\nfor student_name, grades in students.items():\n    # Calculate the average by summing all grades and dividing by count\n    average = sum(grades) / len(grades)\n    print(f\"{student_name}: {grades}\")\n    print(f\"  Average: {average:.1f}\")  # .1f rounds to 1 decimal place\n    print()  # Empty line for better formatting\n\n# Find the highest average across all students\nall_averages = []  # Create empty list to store all averages\nfor grades in students.values():  # Loop through just the grade lists\n    average = sum(grades) / len(grades)  # Calculate average for each student\n    all_averages.append(average)  # Add to our list of averages\n\n# Find the maximum value in the list of averages\nhighest_avg = max(all_averages)\nprint(f\"Highest class average: {highest_avg:.1f}\")\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\n# Create a dictionary where keys are student names and values are lists of grades\nstudents = {\n    \"Alice\": [85, 92, 78, 95],    # Alice's test scores\n    \"Bob\": [79, 85, 91, 88],      # Bob's test scores\n    \"Charlie\": [92, 89, 94, 97]   # Charlie's test scores\n}\n\n# Display all students and their grades with calculated averages\nprint(\"Student Grade Report:\")\nprint(\"-\" * 30)  # Print a line separator\n\n# Loop through each student and their grades\nfor student_name, grades in students.items():\n    # Calculate the average by summing all grades and dividing by count\n    average = sum(grades) / len(grades)\n    print(f\"{student_name}: {grades}\")\n    print(f\"  Average: {average:.1f}\")  # .1f rounds to 1 decimal place\n    print()  # Empty line for better formatting\n\n# Find the highest average across all students\nall_averages = []  # Create empty list to store all averages\nfor grades in students.values():  # Loop through just the grade lists\n    average = sum(grades) / len(grades)  # Calculate average for each student\n    all_averages.append(average)  # Add to our list of averages\n\n# Find the maximum value in the list of averages\nhighest_avg = max(all_averages)\nprint(f\"Highest class average: {highest_avg:.1f}\")\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nChallenge Yourself\n\nWord Frequency Counter\nCreate a program that counts how many times each word appears in a sentence using a dictionary.\nChallenge Code:\n# Start with this sentence to analyze\nsentence = \"the quick brown fox jumps over the lazy dog the fox is quick\"\n\n# Split the sentence into individual words using spaces as separators\nwords = sentence.split()\nprint(\"Words in sentence:\", words)\n\n# Create an empty dictionary to store word counts\nword_count = {}\n\n# Your challenge: Complete this code to count word frequencies\n# Hint: Loop through the words and update the dictionary\nfor word in words:\n    # Add your code here to count each word\n    # If the word is already in the dictionary, increment its count\n    # If the word is new, add it with a count of 1\n    pass\n\n# Display the results - show each word and how many times it appears\nprint(\"Word frequencies:\")\nfor word, count in word_count.items():\n    print(f\"'{word}': {count}\")\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\n# Start with this sentence to analyze\nsentence = \"the quick brown fox jumps over the lazy dog the fox is quick\"\n\n# Split the sentence into individual words using spaces as separators\nwords = sentence.split()\nprint(\"Words in sentence:\", words)\n\n# Create an empty dictionary to store word counts\nword_count = {}\n\n# Your challenge: Complete this code to count word frequencies\n# Hint: Loop through the words and update the dictionary\nfor word in words:\n    # Add your code here to count each word\n    # If the word is already in the dictionary, increment its count\n    # If the word is new, add it with a count of 1\n    pass\n\n# Display the results - show each word and how many times it appears\nprint(\"Word frequencies:\")\nfor word, count in word_count.items():\n    print(f\"'{word}': {count}\")\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nYour Turn!\n\nChallenge Tasks:\n\nList Manipulation: Create a list of your favorite movies, add 2 more movies, remove one, and print the final list.\nDictionary Creation: Build a dictionary that maps country names to their capital cities (at least 5 countries).\nCombined Challenge: Create a shopping list (as a list) and a price dictionary. Calculate the total cost of your shopping list.\nAdvanced Challenge: Modify the word frequency counter to ignore case (treat “The” and “the” as the same word).\n\nUse any of the terminals above to experiment with these challenges!\n\n\n\nSummary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored:\n\nLists: Ordered collections perfect for storing sequences of related items\nDictionaries: Key-value pairs ideal for quick lookups and data organization\nPractical Applications: How to use these data structures to solve real-world problems\nWhen to Use Each: Lists for ordered data, dictionaries for labeled data and fast lookups\n\n\n\n\n\nKey Takeaways\nLists and dictionaries are fundamental building blocks in Python programming. Lists excel when you need to maintain order and access items by position, while dictionaries shine when you need to associate meaningful labels (keys) with values for quick retrieval. Both are mutable, meaning you can modify them after creation, making them powerful tools for dynamic data management. As you continue programming, you’ll find these data structures essential for organizing information efficiently.\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython Lists Documentation\nPython Dictionaries Documentation\nReal Python: Python Lists and Tuples\nReal Python: Python Dictionaries"
  },
  {
    "objectID": "playground/06_listAndDictionaries.html#challenge-yourself",
    "href": "playground/06_listAndDictionaries.html#challenge-yourself",
    "title": "Just For Fun 06: Lists and Dictionaries",
    "section": "Challenge Yourself",
    "text": "Challenge Yourself\n\nWord Frequency Counter\nCreate a program that counts how many times each word appears in a sentence using a dictionary.\nChallenge Code:\n# Start with this sentence to analyze\nsentence = \"the quick brown fox jumps over the lazy dog the fox is quick\"\n\n# Split the sentence into individual words using spaces as separators\nwords = sentence.split()\nprint(\"Words in sentence:\", words)\n\n# Create an empty dictionary to store word counts\nword_count = {}\n\n# Your challenge: Complete this code to count word frequencies\n# Hint: Loop through the words and update the dictionary\nfor word in words:\n    # Add your code here to count each word\n    # If the word is already in the dictionary, increment its count\n    # If the word is new, add it with a count of 1\n    pass\n\n# Display the results - show each word and how many times it appears\nprint(\"Word frequencies:\")\nfor word, count in word_count.items():\n    print(f\"'{word}': {count}\")\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\n# Start with this sentence to analyze\nsentence = \"the quick brown fox jumps over the lazy dog the fox is quick\"\n\n# Split the sentence into individual words using spaces as separators\nwords = sentence.split()\nprint(\"Words in sentence:\", words)\n\n# Create an empty dictionary to store word counts\nword_count = {}\n\n# Your challenge: Complete this code to count word frequencies\n# Hint: Loop through the words and update the dictionary\nfor word in words:\n    # Add your code here to count each word\n    # If the word is already in the dictionary, increment its count\n    # If the word is new, add it with a count of 1\n    pass\n\n# Display the results - show each word and how many times it appears\nprint(\"Word frequencies:\")\nfor word, count in word_count.items():\n    print(f\"'{word}': {count}\")\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nYour Turn!\n\nChallenge Tasks:\n\nList Manipulation: Create a list of your favorite movies, add 2 more movies, remove one, and print the final list.\nDictionary Creation: Build a dictionary that maps country names to their capital cities (at least 5 countries).\nCombined Challenge: Create a shopping list (as a list) and a price dictionary. Calculate the total cost of your shopping list.\nAdvanced Challenge: Modify the word frequency counter to ignore case (treat “The” and “the” as the same word).\n\nUse any of the terminals above to experiment with these challenges!\n\n\n\nSummary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored:\n\nLists: Ordered collections perfect for storing sequences of related items\nDictionaries: Key-value pairs ideal for quick lookups and data organization\nPractical Applications: How to use these data structures to solve real-world problems\nWhen to Use Each: Lists for ordered data, dictionaries for labeled data and fast lookups\n\n\n\n\n\nKey Takeaways\nLists and dictionaries are fundamental building blocks in Python programming. Lists excel when you need to maintain order and access items by position, while dictionaries shine when you need to associate meaningful labels (keys) with values for quick retrieval. Both are mutable, meaning you can modify them after creation, making them powerful tools for dynamic data management. As you continue programming, you’ll find these data structures essential for organizing information efficiently.\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython Lists Documentation\nPython Dictionaries Documentation\nReal Python: Python Lists and Tuples\nReal Python: Python Dictionaries"
  },
  {
    "objectID": "playground/06_listAndDictionaries.html#summary",
    "href": "playground/06_listAndDictionaries.html#summary",
    "title": "Just For Fun 06: Lists and Dictionaries",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored:\n\nLists: Ordered collections perfect for storing sequences of related items\nDictionaries: Key-value pairs ideal for quick lookups and data organization\nPractical Applications: How to use these data structures to solve real-world problems\nWhen to Use Each: Lists for ordered data, dictionaries for labeled data and fast lookups"
  },
  {
    "objectID": "playground/06_listAndDictionaries.html#key-takeaways",
    "href": "playground/06_listAndDictionaries.html#key-takeaways",
    "title": "Just For Fun 06: Lists and Dictionaries",
    "section": "Key Takeaways",
    "text": "Key Takeaways\nLists and dictionaries are fundamental building blocks in Python programming. Lists excel when you need to maintain order and access items by position, while dictionaries shine when you need to associate meaningful labels (keys) with values for quick retrieval. Both are mutable, meaning you can modify them after creation, making them powerful tools for dynamic data management. As you continue programming, you’ll find these data structures essential for organizing information efficiently.\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython Lists Documentation\nPython Dictionaries Documentation\nReal Python: Python Lists and Tuples\nReal Python: Python Dictionaries"
  },
  {
    "objectID": "playground/05_functionCalls_general.html",
    "href": "playground/05_functionCalls_general.html",
    "title": "Just For Fun 05: Function Calls in Code",
    "section": "",
    "text": "Lesson Objectives\n\n\n\nBy the end of this lesson, you will be able to:\n\nIdentify and describe the anatomy of a Python function\nExplain the flow of execution in a Python script\nDiscuss the mathematical reasoning behind calculating the area of a square\nExperiment with function calls and inputs interactively"
  },
  {
    "objectID": "playground/05_functionCalls_general.html#introduction",
    "href": "playground/05_functionCalls_general.html#introduction",
    "title": "Just For Fun 05: Function Calls in Code",
    "section": "Introduction",
    "text": "Introduction\nIn this lesson, you’ll explore the structure of Python code, focusing on how functions are defined and called. We’ll use a simple example that calculates the area of a square to illustrate key concepts."
  },
  {
    "objectID": "playground/05_functionCalls_general.html#key-concepts",
    "href": "playground/05_functionCalls_general.html#key-concepts",
    "title": "Just For Fun 05: Function Calls in Code",
    "section": "Key Concepts",
    "text": "Key Concepts\n\n\n💡 Concept 1: Function Definition & Calls\n\nA function in Python is a reusable block of code that performs a specific task. Functions are defined using the def keyword, followed by the function name and parameters. To use a function, you “call” it by its name and provide the required arguments.\nExample:\ndef squareArea(s: float) -&gt; float:\n    \"\"\" determine area of square\"\"\"\n    return s * s\n\n\n\n💡 Concept 2: Flow of Execution\n\nPython executes code from top to bottom. The main() function is often used as a “driver” to organize the flow. When main() is called, it runs the code inside it, including any function calls.\nExample:\ndef main() -&gt; None:\n    sideLength = 5\n    print(f\"Length {sideLength}\")\n    print(f\" Area: {squareArea(sideLength)}\")\n\n\nExample 1a: Calculating the Area of a Rectangle\n\nWhat this code does: Defines a function to calculate the area of a rectangle and calls it with sample values.\n\nExample Code:\ndef rectangleArea(length: float, width: float) -&gt; float:\n    \"\"\" determine area of rectangle\"\"\"\n    return length * width\n\nprint(rectangleArea(6, 3))\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\ndef rectangleArea(length: float, width: float) -&gt; float:\n    \"\"\" determine area of rectangle\"\"\"\n    return length * width\n\nprint(rectangleArea(6, 3))\n\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nExample 1b: Calculating the Area of a Circle\n\nWhat this code does: Defines a function to calculate the area of a circle and calls it with a sample value.\n\nExample Code:\nimport math\ndef circleArea(radius: float) -&gt; float:\n    \"\"\" determine area of circle\"\"\"\n    return math.pi * radius * radius\n\nprint(circleArea(2))\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\nimport math\ndef circleArea(radius: float) -&gt; float:\n    \"\"\" determine area of circle\"\"\"\n    return math.pi * radius * radius\n\nprint(circleArea(2))\n\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nExample 1c: Calculating the Volume of a Cube\n\nWhat this code does: Defines a function to calculate the volume of a cube and calls it with a sample value.\n\nExample Code:\ndef cubeVolume(s: float) -&gt; float:\n    \"\"\" determine volume of cube\"\"\"\n    return s ** 3\n\nprint(cubeVolume(3))\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\ndef cubeVolume(s: float) -&gt; float:\n    \"\"\" determine volume of cube\"\"\"\n    return s ** 3\n\nprint(cubeVolume(3))\n\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nChallenge Questions\n\nChoose a function to check whether a side can have a negative distance value. What should the function do if it receives a negative value?\nChange the one of the circleArea or cubeVolume functions to handle a radius of zero or negative values. Should the area be zero or should it raise an error?\nChallenge: Write a function to calculate the volume of a cylinder (π * r^2 * h). Try different values for radius and height.\nChallenge: Write a function to calculate the area of a triangle given its base and height. Test your function with different values.\n\nUse the interactive code fields above to modify and run your solutions. Have fun experimenting and solving these challenges!\n\n\nYour Turn!\n\nChallenge Tasks:\n\nTry using different types of inputs (integers, floats, strings, booleans, complex numbers) and observe the results.\nModify the function to handle invalid inputs gracefully (e.g., using type checking or error handling).\nAdd comments to explain each part of the code.\nWrite your own function to calculate the area of a rectangle.\n\nUse any of the terminals above to experiment with these challenges!\n\n\n\nSummary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored: - The structure and anatomy of Python functions - How function calls work and how data flows through a program - Mathematical reasoning for calculating area - How different input types affect function behavior\n\n\n\n\nKey Takeaways\n\nFunctions are reusable blocks of code\nFlow of execution is organized using functions like main()\nMathematical formulas can be implemented directly in code\nInput types matter for function behavior\n\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython Functions Documentation\nPython Data Types\nQuarto Interactive Python"
  },
  {
    "objectID": "playground/05_functionCalls_general.html#summary",
    "href": "playground/05_functionCalls_general.html#summary",
    "title": "Just For Fun 05: Function Calls in Code",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored: - The structure and anatomy of Python functions - How function calls work and how data flows through a program - Mathematical reasoning for calculating area - How different input types affect function behavior"
  },
  {
    "objectID": "playground/05_functionCalls_general.html#key-takeaways",
    "href": "playground/05_functionCalls_general.html#key-takeaways",
    "title": "Just For Fun 05: Function Calls in Code",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nFunctions are reusable blocks of code\nFlow of execution is organized using functions like main()\nMathematical formulas can be implemented directly in code\nInput types matter for function behavior\n\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython Functions Documentation\nPython Data Types\nQuarto Interactive Python"
  },
  {
    "objectID": "playground/02_stringCheese.html",
    "href": "playground/02_stringCheese.html",
    "title": "Just For Fun 02: String Cheese Demo",
    "section": "",
    "text": "Lesson Objectives\n\n\n\nBy the end of this lesson, you will be able to:\n\nPrint strings in Python\nUse for loops with range()\nFormat strings with f-strings\nUnderstand string repetition"
  },
  {
    "objectID": "playground/02_stringCheese.html#introduction",
    "href": "playground/02_stringCheese.html#introduction",
    "title": "Just For Fun 02: String Cheese Demo",
    "section": "Introduction",
    "text": "Introduction\nIn this lesson, we’ll learn how to print “String Cheese” using Python! This fun example will teach you about loops, strings, and formatting."
  },
  {
    "objectID": "playground/02_stringCheese.html#key-concepts",
    "href": "playground/02_stringCheese.html#key-concepts",
    "title": "Just For Fun 02: String Cheese Demo",
    "section": "Key Concepts",
    "text": "Key Concepts\n\n\n💡 Concept 1: String Printing and Loops\n\nWe can use Python’s print() function combined with for loops to create repeated output. The range() function helps us control how many times something repeats.\nExample:\n# Print String Cheese multiple times\nfor i in range(5):\n    print(f\"String Cheese : {i}\")"
  },
  {
    "objectID": "playground/02_stringCheese.html#interactive-examples",
    "href": "playground/02_stringCheese.html#interactive-examples",
    "title": "Just For Fun 02: String Cheese Demo",
    "section": "Interactive Examples",
    "text": "Interactive Examples\n\nExample 1: Basic String Cheese Loop\n\nWhat this code does: This creates a simple loop that prints “String Cheese” 10 times, each with a number.\n\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\n\n\n▶ Run Code 🗑 Clear 📝 Load Example 🔍+ Larger Font 🔍- Smaller Font\n\n\nExample 2: String Cheese with Custom Messages\n\nWhat this code does: This example shows how to create more creative String Cheese messages with different formatting.\n\n\n\n\n\n\n\n\nLoading Python interpreter…\n\n\n\n\n\n\n\n▶ Run Code 🗑 Clear 📝 Load Example\n\n\nTry It Yourself\n\n🚀 Challenge: Create your own String Cheese variations!\nYour task: Write a loop that prints “String Cheese” with different numbers and messages.\nHint: Try using different ranges and string formatting options.\n\n\n\n\n\n\n\n\nReady for your solution!\n\n\n\n\n\n\n\n▶ Run Code 🗑 Clear 💡 Show Solution\n\n\nSummary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored:\n\nString printing with print() function\nFor loops with range() function\nF-string formatting for dynamic messages\nCreative text output and formatting\n\n\n\n\n\nNext Steps\n\n\n\n\n\n\nComing Up Next\n\n\n\nIn the next lesson, we’ll cover: - Variables and data types - More complex string operations\n\n\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython String Formatting\nPython For Loops\nPractice Problems"
  },
  {
    "objectID": "playground/02_stringCheese.html#try-it-yourself",
    "href": "playground/02_stringCheese.html#try-it-yourself",
    "title": "Just For Fun 02: String Cheese Demo",
    "section": "Try It Yourself",
    "text": "Try It Yourself\n\n🚀 Challenge: Create your own String Cheese variations!\nYour task: Write a loop that prints “String Cheese” with different numbers and messages.\nHint: Try using different ranges and string formatting options.\n\n\n\n\n\n\n\n\nReady for your solution!\n\n\n\n\n\n\n\n▶ Run Code 🗑 Clear 💡 Show Solution\n\n\nSummary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored:\n\nString printing with print() function\nFor loops with range() function\nF-string formatting for dynamic messages\nCreative text output and formatting\n\n\n\n\n\nNext Steps\n\n\n\n\n\n\nComing Up Next\n\n\n\nIn the next lesson, we’ll cover: - Variables and data types - More complex string operations\n\n\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython String Formatting\nPython For Loops\nPractice Problems"
  },
  {
    "objectID": "playground/02_stringCheese.html#summary",
    "href": "playground/02_stringCheese.html#summary",
    "title": "Just For Fun 02: String Cheese Demo",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\nWhat You Learned\n\n\n\nIn this lesson, you explored:\n\nString printing with print() function\nFor loops with range() function\nF-string formatting for dynamic messages\nCreative text output and formatting"
  },
  {
    "objectID": "playground/02_stringCheese.html#next-steps",
    "href": "playground/02_stringCheese.html#next-steps",
    "title": "Just For Fun 02: String Cheese Demo",
    "section": "Next Steps",
    "text": "Next Steps\n\n\n\n\n\n\nComing Up Next\n\n\n\nIn the next lesson, we’ll cover: - Variables and data types - More complex string operations\n\n\n\n\n\n\n\n\n\nAdditional Resources\n\n\n\n\nPython String Formatting\nPython For Loops\nPractice Problems"
  },
  {
    "objectID": "playground/04_functionCalls_squareArea.html",
    "href": "playground/04_functionCalls_squareArea.html",
    "title": "Just For Fun 04: Area of a Square and Function Calls",
    "section": "",
    "text": "What this code does: This code defines a function squareArea(s) that calculates the area of a square given its side length s. The main() function acts as a driver: it prints the area for a single value, then iterates over a list of test values (including integers, zero, negative numbers, and a complex number) and prints the area for each. Function calls: - squareArea(s) is called inside main() for each value in testValues_list and for the initial sideLength. - main() is called at the end to start the program.\n\nExample Code:\ndef squareArea(s: float ) -&gt; float:\n    \"\"\" determine area of square\"\"\"\n    return s*s # area of square is s*s\n# end of squareArea()\n\ndef main() -&gt; None:\n    \"\"\" driver function \"\"\"\n    sideLength = 5\n    # Testing value\n    print(f\"Length {sideLength}\")\n    print(f\" Area: {squareArea(sideLength)}\")\n    # These inputs work\n    testValues_list =[2,0,-3,2 + 5j]\n    # why will these inputs not work?\n    # testValues_list =[True, \"radius\"]\n    print(\"\\n Iterating over the list.\")\n    for val in testValues_list: #iteration\n        print(f\" Length {val}, Area: {squareArea(val)}\")\n    # end main()\n\nmain() # call the driver function\ndef squareArea(s: float ) -&gt; float:\n    \"\"\" determine area of square\"\"\"\n    return s*s # area of square is s*s\n# end of squareArea()\n\ndef main() -&gt; None:\n    \"\"\" driver function \"\"\"\n    sideLength = 5\n    # Testing value\n    print(f\"Length {sideLength}\")\n    print(f\" Area: {squareArea(sideLength)}\")\n    # These inputs work\n    testValues_list =[2,0,-3,2 + 5j]\n    # why will these inputs not work?\n    # testValues_list =[True, \"radius\"]\n    print(\"\\n Iterating over the list.\")\n    for val in testValues_list: #iteration\n        print(f\" Length {val}, Area: {squareArea(val)}\")\n    # end main()\n\nmain() # call the driver function\n\n\n▶ Run Code 🗑 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\n\n\n\n\n\n\nLoading Python interpreter…"
  },
  {
    "objectID": "utils/interactivePython.html",
    "href": "utils/interactivePython.html",
    "title": "Interactive Python Playground",
    "section": "",
    "text": "Welcome! Enter your Python code below, run it, and save it to your computer.\n\n\nIf you need a notebook for your work, maybe try JupyterLite!\nNote: All saved files are in the cookies and are therefore temporary. To get around this, please download the files from the Jupyter notebook to your local machine.\n\n\n▶ Run Code 💾 Save Code 📂 Load Code ➕ Insert Fibonacci Example 🧹 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nOutput will appear here."
  },
  {
    "objectID": "utils/interactivePython.html#python-playground",
    "href": "utils/interactivePython.html#python-playground",
    "title": "Interactive Python Playground",
    "section": "",
    "text": "Welcome! Enter your Python code below, run it, and save it to your computer.\n\n\nIf you need a notebook for your work, maybe try JupyterLite!\nNote: All saved files are in the cookies and are therefore temporary. To get around this, please download the files from the Jupyter notebook to your local machine.\n\n\n▶ Run Code 💾 Save Code 📂 Load Code ➕ Insert Fibonacci Example 🧹 Clear 🔍+ Larger Font 🔍- Smaller Font\n\n\nOutput will appear here."
  },
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "",
    "text": "Class Sessions: MWF 10:00 AM to 10:50 AM, Alden 101\nLaboratory Session: Thursday, 2:30 PM to 4 PM, Alden 101\nInstructor: Dr. Bonham-Carter, obonhamcarter@allegheny.edu\nOffice Location: Alden Hall 203\nInstructor Office Hours: Visit the below URL to find availability and schedule and appointment. https://www.oliverbonhamcarter.com/contactandabout/\nBook An Appointment!: https://calendar.app.google/dEK6MftNGNLV1Ft96\nNote: If the office hours times are not convenient, then please reach out to me and we can find an alternative time to meet."
  },
  {
    "objectID": "syllabus/syllabus.html#quick-links",
    "href": "syllabus/syllabus.html#quick-links",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Quick Links",
    "text": "Quick Links\n\nThe attendance form\nToken Form for Automatic Extension\nGradebook repository"
  },
  {
    "objectID": "syllabus/syllabus.html#course-description",
    "href": "syllabus/syllabus.html#course-description",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Course Description",
    "text": "Course Description\nA continuation of CMPSC 100 with an emphasis on implementing, using, and evaluating the computational structures needed to efficiently store and retrieve digital data. Participating in hands-on activities that often require teamwork, students create data structures and algorithms whose correctness and performance they study through proofs and experimentation. Students continue to refine their ability to organize and document a program’s source code so that it effectively communicates with the intended users and maintainers. During a weekly laboratory session, students use state-of-the-art technology to complete projects, reporting on their results through both written documents and oral presentations.\nQuantitative Reasoning (QR): Quantitative Reasoning is the ability to understand, investigate, communicate, and contextualize numerical, symbolic, and graphical information towards the exploration of natural, physical, behavioral, or social phenomena.\nScientific Process and Knowledge (SP): Courses involving Scientific Process and Knowledge aim to convey an understanding of what is known or can be known about the natural world; apply scientific reasoning towards the analysis and synthesis of scientific information; and create scientifically literate citizens who can engage productively in problem solving.\n\nPrerequisite: CMPSC 100 or permission of the instructor.\nDistribution Requirements: QR, SP."
  },
  {
    "objectID": "syllabus/syllabus.html#course-learning-objectives",
    "href": "syllabus/syllabus.html#course-learning-objectives",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\n\nWhen solving a problem with a Python program, accurately describe data structures and algorithms and their inherent trade-offs.\nUse data structures and algorithms to correctly and efficiently solve a problem through the use of a Python program.\nUse empirical methods to characterize the performance of a Python program that uses data structures and algorithms.\nUse industry-standard practices, such as testing and debugging, and professional-grade integrated development environments (IDEs), command-line tools, and version control systems to implement Python programs.\nImplement Python programs and documentation that conforms to industry-standard formats and styles.\n\nLearning Outcome QR: Students who successfully complete this requirement will demonstrate an understanding of how to interpret numeric data and/or their graphical or symbolic representations.\nLearning Outcome SP: Students who successfully complete this requirement will demonstrate an understanding of the nature, approaches, and domain of scientific inquiry."
  },
  {
    "objectID": "syllabus/syllabus.html#course-materials",
    "href": "syllabus/syllabus.html#course-materials",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Course Materials",
    "text": "Course Materials\n\nTextbook\nIntroduction to Computation and Programming Using Python by John V. Guttag\n\n\n\nOnline Resources and Course Materials\n\nW3schools  \nCourse GitHub Organization\nJupyter Notebooks Directory\nGuttag Textbook Publisher Preview\nGuttag Textbook Google Previews\nAdditional Guttag Textbook Availability\nGuttag Lectures\nPython Docs Proactive Programmers\n\n\n\nSelected Software and Technologies\nWe will be using the following technologies in class.\n\nVSCode\nPython 3.12 or later\npipx\nPoetry\nGatorgrade\nGit\nFree GitHub Account\nFree Discord Account\nAllegheny College Email\n\n\n\nGrading\n\n\nGradebook Repository\nGradeBook repository will be used to deliver your grades from your activities and labs to you. In this repository, you will find a file which contains the same information that the instructor has in the gradebook. While it is a repository that you will pull from, you will never need to push anything to this repository.\nPlease use the following URL to create your gradebook repository; https://classroom.github.com/a/34hXX52q.\n\nGrading Scale\n\n\n\n\n\n\n\n\n\n\n\n\nLetter\nRange\nLetter\nRange\nLetter\nRange\n\n\n\n\nA\n96 - 100\nA-\n90 - 95.9\n\n\n\n\nB+\n87 - 89.9\nB\n83 - 86.9\nB-\n80 - 82.9\n\n\nC+\n77 - 79.9\nC\n73 - 76.9\nC-\n70 - 72.9\n\n\nD+\n67 - 69.9\nD\n63 - 66.9\nF\n59.9 and below\n\n\n\n\n\nBenchmarks\nThe grade that a student receives in this class will be based on the following categories. All percentages are approximate and, if the need to do so presents itself, it is possible for the assigned percentages to change during the academic semester.\n\n\n\nCategory\nPercentage\nAssessment metric\n\n\n\n\nClass Participation and Activities\n20%\ncheck mark grade\n\n\nLabs\n40%\nletter grade\n\n\nMidterm Exam\n20%\nletter grade\n\n\nFinal Project\n20%\nletter grade\n\n\nTotal\n100%\n\n\n\n\n\n\nDefinitions of Grading Categories\n\nClass Participation: All students are required to actively participate during all of the class sessions. Your participation will take forms such as answering questions about the required reading assignments, completing in-class exercises, asking constructive questions of the other members of the class, giving presentations, leading a discussion session in class.% and in the course’s Slack channels.\nActivities: These assignments invite students to explore different techniques for rigorously designing, implementing, programming, evaluating, and documenting real-world Python programs. These assignments will invite students to use tools like a text editor, a terminal window, and a modern Python development environment to implement functions that strike the right balance between understandability, generalizability, and specialization. Students will also use the data collected from running experiments to evaluate the implementation of a Python function as they consider, for instance, its efficiency and correctness. Knowledge gained from the class and the textbook will be integral to the completion of these projects. Unless other information is given about a due date, activities are to be completed by the end of class.\nExams: The exams will cover all of the material in their associated module(s). The finalized date for each of the exams will be announced at least one week in advance of the scheduled date. Unless prior arrangements are made with the course instructor, all students will be expected to take these exams on the scheduled date and complete the exams in the stated period of time.\nFinal Project: This project will present you with an opportunity to design and implement a correct and carefully evaluated programming solution for a specific problem. Completion of the final project will require you to apply the knowledge, programming and technical skills that you have acquired during the course. The details for the final project will be given approximately a month before the project due date (during finals week)."
  },
  {
    "objectID": "syllabus/syllabus.html#schedule-at-a-glance",
    "href": "syllabus/syllabus.html#schedule-at-a-glance",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Schedule At-A-Glance",
    "text": "Schedule At-A-Glance\n\nWeek One: Software Operations (Guttag Chapter 1)\nWeek Two: Python Foundations (Guttage Chapter 2)\nWeek Three: Numerical Programs (Guttag Chapter 3)\nWeek Four: Function Scope (Guttag Chapter 4)\nWeek Five: Structured Types (Guttag Chapter 5)\nWeek Eleven: Object-Oriented Programming (Guttag Chapter 10)\n\n\nTBA\n\nWeek Six: Mutability and Aliasing (Guttag Chapter 5)\nWeek Seven: Recursion (Guttag Chapter 6)\nFall Break (Thursday to Sunday)\nWeek Nine: Modules and Files (Guttag Chapter 7)\nWeek Ten: Testing and Handling Exceptions (Guttag Chapter 8 and 9)\nWeek Twelve: Algorithmic Complexity (Guttag Chapter 11)\nWeek Thirteen: Sorting (Guttag Chapter 12)\nWeek Fourteen: Data Structures (Guttag Chapter 12 cont)\nWeek Fifteen: Optimization Problems (Guttag Chapter 14)\nWeek Sixteen: Review\n\n\n\nFinal Deliverable\n\nWednesday, December 10, 2025 at 9:00 AM (Complete Final Exam Schedule)\nExam Code: G"
  },
  {
    "objectID": "syllabus/syllabus.html#assignment-policies",
    "href": "syllabus/syllabus.html#assignment-policies",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Assignment Policies",
    "text": "Assignment Policies\n\nAssignment Submission\nAll graded components of the course are expected to be turned in on time. Due dates are provided on each assignment. Electronic versions of the Engineering and Specification Labs must be submitted to through a student’s GitHub repository created by GitHub Classroom. No credit will be awarded for any course work that you submit to the incorrect GitHub repository.\nLabs are graded based on gatorgrade scores and other criteria.\n\nFifty percent of the grade of each Lab is determined by the percentage of gatorgrade checks passed.\nOne quarter of the grade is determined by code correctness following a rubric.\nOne quarter of the grade is determined by professional skills and presentation following a rubric. Professional presentation is impacted by linting, formatting, testing, profiling, duplication avoidance, commenting, markdown styling and communication in reflections.\n\nActivities Nearly weekly, we will have an activity for which points in the course may be earned. Please be sure to turn in activities by the due date as they cannot be made up at a later time."
  },
  {
    "objectID": "syllabus/syllabus.html#discord",
    "href": "syllabus/syllabus.html#discord",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Discord",
    "text": "Discord\nThe instructor will be using Discord to pass important information along to the class, such as code, news and other details. Please actively check your Discord each day to ensure that you are up-to-date with course events."
  },
  {
    "objectID": "syllabus/syllabus.html#additional-policies",
    "href": "syllabus/syllabus.html#additional-policies",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Additional Policies",
    "text": "Additional Policies\n\nAttendance\nStudents are expected to come to class prepared, on time, and to stay engaged for the duration of the class period. This includes both class and lab sessions. This behavior is core to our shared departmental values and is in addition to the college’s attendance policy.\nEach day of class, please complete the attendance form.\n\nPreparedness\nComing to class prepared means coming with everything you need to engage in a class session. To satisfy basic expectations of CIS courses, this means, at minimum, that students must:\n\narrive at class with a fully charged laptop\nbring their laptop charger or a battery pack so as to ensure that their laptop works throughout the entire class session\ncomplete any pre-session work such as readings and preparatory assignments\n\n\n\nAttendance and Lateness\nOne missed class or lab session counts as one absence. Coming to class/lab late, leaving early, or missing a large portion of a class/lab session will result in your being marked as “late” to class. Coming to class/lab unprepared may also result in being marked “late”. Being marked “late” to class three times during the course of a semester is equal to one absence.\nExcluding the first week of the semester, students can have eight absences without any impact to their grade. These accommodations are meant to cover illness and emergency, so you should always come to class if you are able to do so.\nAs a general guideline, students cannot miss more than two weeks of class in total throughout the academic semester without receiving a letter grade reduction.\nFor this course, excluding the first week and eight excused absences, overall course grade will go down by 1/3 of a letter grade for each additional absence or absence equivalence regardless of base grade.\n\n\nEngagement\nThe term “engagement” or our expectation that students remain “engaged” can mean many things, often varying by course. Baseline behaviors that indicate engagement include:\n\nparticipation in class activities and discussions\ndefined contribution to class sessions in full-class or group discussions\nnote-taking (physical or digital)\nparticipating in course session attendance requirements\nnot participating in non-course related activities\nnot completing non-course related projects\n\n\n\n\nLate Work Policy\nThe deadlines for assignments are hard deadlines. This policy is intended to ensure that students keep up with course topics, are able to actively participate in class, and are accountable for managing time effectively.\nAll students in the CIS department are expected to turn in assignments on time. “On time” means on or before the assignment’s due date. This means that an assignment cannot be turned in for credit after a due date, unless the student applies a token.\n\nTokens\nStudents in 101 are allotted four tokens to receive extensions on any assignment except the final with no questions asked by the course instructor except either in the rare cases of documented severe and/or extenuating circumstances or in cases that violate the CIS policy document or any College-approved policy.\n\nA token may be applied via a Google Form up to the assignment deadline, with exceptions granted only for severe and/or extenuating circumstances.\nTokens grant an automatic extension of one week to anything except the project or final exam.\nTokens will not be accepted after the due date of the last lab. This means that token usage will end after the labs are complete and will no longer be accepted. This roughly implies that they will stop three or four weeks from the end of class.\n\nToken Form for Automatic Extension\n\n\n\nExtenuating Circumstances\nExtenuating circumstances are exceptional, unforeseen, outside of your control, and short-term, like illness and emergency. Regular circumstances associated with taking courses at Allegheny College are not considered extenuating.\nThe accommodations provided by tokens and permitted absences are meant to cover extenuating circumstances like illness, emergency, and work. However, if you have a contagious illness like COVID-19, the flu, or a cold, you should not come to class. If you have expended all your absences and tokens and are still sick with a contagious illness, you may contact your professor about options. If your symptoms are mild or you are recovering from a respiratory illness, we recommend that you wear a mask to class.\nProfessor must be informed of all athletic obligations at the beginning of the semester, or with as much notice as possible. If you are feeling healthy and well, you should make every effort to come to class on time and to complete assignments, rather than using absences and tokens you may need later.\nThese no-questions-asked accommodations are meant to protect student privacy, and to remove the additional effort of acquiring documentation under duress of illness or emergency. In addition, they allow the professor to remain focused on teaching rather than adjudicating excuses.\nIf extenuating circumstances are severe enough to require more absences and tokens, you may contact your professor to discuss options. In most cases, however, a situation of this gravity warrants a request for a “Late Drop” or “Incomplete” in the course, as the student will not have had adequate opportunity to learn the material."
  },
  {
    "objectID": "syllabus/syllabus.html#communications",
    "href": "syllabus/syllabus.html#communications",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Communications",
    "text": "Communications\n\nUsing GitHub and Discord\nThis course will primarily use GitHub and Discord for collaborative course communication. Communications that are not private matters must take place in the Data Structures Channel in Discord.\nThe Allegheny College Computer and Information Science Discord Server will also have useful announcements about departmental activities including TL office hours.\n\n\nUsing Email\nAlthough we will primarily use Discord for class communication, the course instructor will sometimes use email to send announcements about important matters such as changes in the schedule. It is your responsibility to check your email at least once a day and to ensure that you can reliably send and receive emails."
  },
  {
    "objectID": "syllabus/syllabus.html#honor-code",
    "href": "syllabus/syllabus.html#honor-code",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Honor Code",
    "text": "Honor Code\nThe Academic Honor Program that governs the entire academic program at Allegheny College is described in the Allegheny Academic Bulletin. The Honor Program applies to all work that is submitted for academic credit or to meet non-credit requirements for graduation at Allegheny College. This includes all work assigned for this class (e.g., examinations and course assignments). All students who have enrolled in the College will work under the Honor Program. Each student who has matriculated at the College has acknowledged the following Honor Code pledge:\n\nI hereby recognize and pledge to fulfill my responsibilities, as defined in the Honor Code, and to maintain the integrity of both myself and the College community as a whole.\n\n\nEffective Collaboration\nComputer science is an inherently collaborative discipline. The Department of Computer and Information Science at Allegheny College encourages students to engage in collaboration. However, in the context of individual coursework, through which each student must demonstrate their own knowledge, there are certain forms of collaboration that are and are not acceptable.\n\nAcceptable forms of collaboration include:\n\nDiscussing high-level concepts.\nReferring someone to a course text book, course slides, example programs, or other resources that contain helpful information or instructions.\nOutlining the high-level steps to solving a problem, without mentioning specific\nlines of code that need to be written.\n\nUnacceptable forms of collaboration include:\n\nSharing details about specific lines of code, including showing your source code to someone or looking at someone else’s code.\nCopying someone else’s source code, technical writing, program commands, or program output, even with some slight modifications.\nTyping source code, technical writing, or commands on someone else’s computer.\n\n\n\n\nPlagiarism and Artificial Intelligence\nStudents may not pass off or represent the work of another student, or their own prior work, as their own current work in any case. Plagiarism and AI-generated code, text, or images are not permitted in any assignment type unless the instructions supplied for the assignment explicitly state otherwise.For exams and all other coursework, students are expected to adhere to the given instructions for the particular exam or item of coursework. It is the responsibility of the student to review the authorization specifications on every item and act appropriately, upholding the honor code. Suspected plagiarized or unauthorized use of AI to generate the work that is turned in will be reported to the Honor Code Committee. This policy does not preclude the use of AI to learn."
  },
  {
    "objectID": "syllabus/syllabus.html#educational-accommodations",
    "href": "syllabus/syllabus.html#educational-accommodations",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Educational Accommodations",
    "text": "Educational Accommodations\nThe Americans with Disabilities Act (ADA) is a federal anti-discrimination statute that provides comprehensive civil rights protection for persons with disabilities. Among other things, this legislation requires all students with disabilities be guaranteed a learning environment that provides for reasonable accommodation of their disabilities. Students with disabilities who believe they may need accommodations in this class are encouraged to contact Student Accessibility and Support Services (SASS) at 814-332-2898. Student Accessibility and Support Services is part of the Learning Commons and is located in Pelletier Library. Please do this as soon as possible to ensure that approved accommodations are implemented in a timely fashion."
  },
  {
    "objectID": "syllabus/syllabus.html#syllabus-changes",
    "href": "syllabus/syllabus.html#syllabus-changes",
    "title": "CMPSC101 Fall 2025 :: DataStructures",
    "section": "Syllabus Changes",
    "text": "Syllabus Changes\nThe instructor may make updates or changes to this document at any time as needed until term grades are due. Changes will be announced to the class."
  }
]